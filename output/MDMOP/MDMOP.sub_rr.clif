(forall (a) (not (Nothing a)))
(forall (a) (not (and (Thing a) (Datatype a))))
(forall (a) (if (AverageAbsoluteFeatureCorrelation a) (Thing a)))
(forall (a) (if (AverageCategoricalFeaturePairsMutualInformation a) (Thing a)))
(forall (a) (if (AverageFeatureEntropy a) (Thing a)))
(forall (a) (if (AverageMutualInformation a) (Thing a)))
(forall (a) (if (BetweenGroupsSumSquaresCrossProducts a) (Thing a)))
(forall (a) (if (CanonicalCorrelationBestLinearCombination a) (Thing a)))
(forall (a) (if (CategoricalFeatureCharacteristic a) (Thing a)))
(forall (a) (if (CategoricalLabeledDataSetCharacteristic a) (Thing a)))
(forall (a) (if (ClassAbsoluteFrequencies a) (Thing a)))
(forall (a) (if (ClassCovarianceMatrices a) (Thing a)))
(forall (a) (if (ClassEntropy a) (Thing a)))
(forall (a) (if (ClassRelativeFrequencies a) (Thing a)))
(forall (a) (if (ContinuousFeatureCharacteristic a) (Thing a)))
(forall (a) (if (ContinuousLabeledDataSetCharacteristics a) (Thing a)))
(forall (a) (if (DataCharacteristic a) (Thing a)))
(forall (a) (if (DataSetCharacteristic a) (Thing a)))
(forall (a) (if (EigenValuesLinearDiscriminantFunctions a) (Thing a)))
(forall (a) (if (ErrorRateOf1NNClassifier a) (Thing a)))
(forall (a) (if (ErrorRateOfLinearClassifierLP a) (Thing a)))
(forall (a) (if (FeatureCharacteristic a) (Thing a)))
(forall (a) (if (FeatureCorrelation a) (Thing a)))
(forall (a) (if (FeatureEntropy a) (Thing a)))
(forall (a) (if (FeatureFrequentValue a) (Thing a)))
(forall (a) (if (FeatureHOutlier a) (Thing a)))
(forall (a) (if (FeatureMaximumValue a) (Thing a)))
(forall (a) (if (FeatureMeanValue a) (Thing a)))
(forall (a) (if (FeatureMinimumValue a) (Thing a)))
(forall (a) (if (FeatureModalValue a) (Thing a)))
(forall (a) (if (FeatureMutualInformationPerClass a) (Thing a)))
(forall (a) (if (FeatureRareValue a) (Thing a)))
(forall (a) (if (FeatureStandardDeviation a) (Thing a)))
(forall (a) (if (FeatureValueFrequencies a) (Thing a)))
(forall (a) (if (FeatureValueFrequenciesPerClass a) (Thing a)))
(forall (a) (if (FeatureVeryFrequentValue a) (Thing a)))
(forall (a) (if (FeatureVeryRareValue a) (Thing a)))
(forall (a) (if (LabeledDataSetCharacteristic a) (Thing a)))
(forall (a) (if (MaximumFeatureEfficiency a) (Thing a)))
(forall (a) (if (MaximumFishersDiscriminantRatio a) (Thing a)))
(forall (a) (if (MinimumSumOfErrorDistanceByLP a) (Thing a)))
(forall (a) (if (NoiseSignalRatio a) (Thing a)))
(forall (a) (if (NonLinearityOf1NNClassifier a) (Thing a)))
(forall (a) (if (NonLinearityOfLinearClassifierLP a) (Thing a)))
(forall (a) (if (NumberOfCategoricalFeatures a) (Thing a)))
(forall (a) (if (NumberOfClasses a) (Thing a)))
(forall (a) (if (NumberOfContinuousFeatures a) (Thing a)))
(forall (a) (if (NumberOfDistinctValues a) (Thing a)))
(forall (a) (if (NumberOfFeatures a) (Thing a)))
(forall (a) (if (NumberOfHOutliers a) (Thing a)))
(forall (a) (if (NumberOfInstances a) (Thing a)))
(forall (a) (if (NumberOfInstancesPerFeature a) (Thing a)))
(forall (a) (if (NumberOfMissingValues a) (Thing a)))
(forall (a) (if (ProportionOfBoundaryPoints a) (Thing a)))
(forall (a) (if (ProportionOfCategoricalFeatures a) (Thing a)))
(forall (a) (if (ProportionOfHOutliers a) (Thing a)))
(forall (a) (if (ProportionOfMissingValues a) (Thing a)))
(forall (a) (if (ProportionPointsWithRetainedAdherence a) (Thing a)))
(forall (a) (if (RatioOfAverageIntraInterDistances a) (Thing a)))
(forall (a) (if (TotalSumSquaresCrossProducts a) (Thing a)))
(forall (a) (if (VolumeOfOverlapRegion a) (Thing a)))
(forall (a) (if (WithinGroupsSumSquaresCrossProducts a) (Thing a)))
(forall (a) (if (ObsoleteClass a) (Thing a)))
(forall (a) (if (DistanceCharacterizationBetweenClusters a) (Thing a)))
(forall (a) (if (AlgorithmAssumption a) (Thing a)))
(forall (a) (if (AlgorithmCharacteristic a) (Thing a)))
(forall (a) (if (AlgorithmParameter a) (Thing a)))
(forall (a) (if (AssociationDiscoveryAlgorithm a) (Thing a)))
(forall (a) (if (AssociationDiscoveryTask a) (Thing a)))
(forall (a) (if (AssociationPatternSet a) (Thing a)))
(forall (a) (if (AssociationPatternSetClass a) (Thing a)))
(forall (a) (if (AttributeValueTableFormat a) (Thing a)))
(forall (a) (if (AverageLinkModel a) (Thing a)))
(forall (a) (if (AverageReliefFeatureWeight a) (Thing a)))
(forall (a) (if (AverageSVMFeatureWeight a) (Thing a)))
(forall (a) (if (BaselineClassifier a) (Thing a)))
(forall (a) (if (BaselineRegressor a) (Thing a)))
(forall (a) (if (BayesNetAlgorithm a) (Thing a)))
(forall (a) (if (BayesNetModel a) (Thing a)))
(forall (a) (if (BayesNetModelClass a) (Thing a)))
(forall (a) (if (BayesianAlgorithm a) (Thing a)))
(forall (a) (if (BayesianModel a) (Thing a)))
(forall (a) (if (BayesianModelClass a) (Thing a)))
(forall (a) (if (BayesianNetwork a) (Thing a)))
(forall (a) (if (BayesianStrategy a) (Thing a)))
(forall (a) (if (BiasVarianceProfile a) (Thing a)))
(forall (a) (if (BinarySplit-MultiwaySplit a) (Thing a)))
(forall (a) (if (Binomial-N a) (Thing a)))
(forall (a) (if (Binomial-P a) (Thing a)))
(forall (a) (if (BinomialDensityEstimation a) (Thing a)))
(forall (a) (if (Blind-Informed a) (Thing a)))
(forall (a) (if (BlindSearch a) (Thing a)))
(forall (a) (if (Bottom-UpClusteringAlgorithm a) (Thing a)))
(forall (a) (if (BottomKPctRule a) (Thing a)))
(forall (a) (if (BottomKRule a) (Thing a)))
(forall (a) (if (BranchAndBound a) (Thing a)))
(forall (a) (if (C4.5CrispTreeModel a) (Thing a)))
(forall (a) (if (C4.5ProbTreeModel a) (Thing a)))
(forall (a) (if (C4.5RuleModel a) (Thing a)))
(forall (a) (if (CARTClassificationModel a) (Thing a)))
(forall (a) (if (CHAIDModel a) (Thing a)))
(forall (a) (if (CN2Model a) (Thing a)))
(forall (a) (if (CSVC-Algorithm a) (Thing a)))
(forall (a) (if (CapacityParameter a) (Thing a)))
(forall (a) (if (CardinalityReductionTask a) (Thing a)))
(forall (a) (if (CategoricalFeature a) (Thing a)))
(forall (a) (if (CategoricalFeatureValue a) (Thing a)))
(forall (a) (if (CategoricalLabeledDataSet a) (Thing a)))
(forall (a) (if (CategoricalTargetRelatedAssumption a) (Thing a)))
(forall (a) (if (Characteristic a) (Thing a)))
(forall (a) (if (ChiSquared-Nu a) (Thing a)))
(forall (a) (if (ClassBalancingTask a) (Thing a)))
(forall (a) (if (ClassBasedModelParameter a) (Thing a)))
(forall (a) (if (ClassCondMeanMatrix a) (Thing a)))
(forall (a) (if (ClassCondProbMatrix a) (Thing a)))
(forall (a) (if (ClassCondProbabilityAssumption a) (Thing a)))
(forall (a) (if (ClassCondVarianceMatrix a) (Thing a)))
(forall (a) (if (ClassPriorProbabilityAssumption a) (Thing a)))
(forall (a) (if (ClassPriorVector a) (Thing a)))
(forall (a) (if (ClassificationAlgorithmCharacteristic a) (Thing a)))
(forall (a) (if (ClassificationModel a) (Thing a)))
(forall (a) (if (ClassificationModelClass a) (Thing a)))
(forall (a) (if (ClassificationModelEvalFunction a) (Thing a)))
(forall (a) (if (ClassificationModelingAlgorithm a) (Thing a)))
(forall (a) (if (ClassificationModelingOperator a) (Thing a)))
(forall (a) (if (ClassificationModelingTask a) (Thing a)))
(forall (a) (if (ClassificationProblem a) (Thing a)))
(forall (a) (if (ClassificationProblemType a) (Thing a)))
(forall (a) (if (ClassificationRuleInductionAlgorithm a) (Thing a)))
(forall (a) (if (ClassificationRuleInductionAlgorithmCharacteristic a) (Thing a)))
(forall (a) (if (ClassificationTask a) (Thing a)))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (Thing a)))
(forall (a) (if (ClassificationTreeInductionAlgorithmCharacteristic a) (Thing a)))
(forall (a) (if (ClusteringAlgorithmCharacteristic a) (Thing a)))
(forall (a) (if (ClusteringBasedModelParameter a) (Thing a)))
(forall (a) (if (ClusteringModel a) (Thing a)))
(forall (a) (if (ClusteringModelClass a) (Thing a)))
(forall (a) (if (ClusteringModelEvalFunction a) (Thing a)))
(forall (a) (if (ClusteringModelingAlgorithm a) (Thing a)))
(forall (a) (if (ClusteringModelingOperator a) (Thing a)))
(forall (a) (if (ClusteringModelingTask a) (Thing a)))
(forall (a) (if (ClusteringProblem a) (Thing a)))
(forall (a) (if (ClusteringProblemType a) (Thing a)))
(forall (a) (if (ClusteringTask a) (Thing a)))
(forall (a) (if (CombinationFunction a) (Thing a)))
(forall (a) (if (ComplementClassCondProbMatrix a) (Thing a)))
(forall (a) (if (ComplementNaiveBayesModel a) (Thing a)))
(forall (a) (if (CompleteLinkModel a) (Thing a)))
(forall (a) (if (ComputationalComplexityFunction a) (Thing a)))
(forall (a) (if (ComputationalComplexityMeasure a) (Thing a)))
(forall (a) (if (Constraint a) (Thing a)))
(forall (a) (if (ContinuousFeature a) (Thing a)))
(forall (a) (if (ContinuousFeatureValue a) (Thing a)))
(forall (a) (if (ContinuousLabeledDataSet a) (Thing a)))
(forall (a) (if (ContinuousOptimizationProblem a) (Thing a)))
(forall (a) (if (ContinuousOptimizationStrategy a) (Thing a)))
(forall (a) (if (ContinuousParametricDensityEstimation a) (Thing a)))
(forall (a) (if (ContinuousTargetRelatedAssumption a) (Thing a)))
(forall (a) (if (ContinuousUniformDensityEstimation a) (Thing a)))
(forall (a) (if (ConvexOptimizationProblem a) (Thing a)))
(forall (a) (if (CoordinateSystem a) (Thing a)))
(forall (a) (if (CoreDM-Task a) (Thing a)))
(forall (a) (if (CrossValidation a) (Thing a)))
(forall (a) (if (DM-Algorithm a) (Thing a)))
(forall (a) (if (DM-Data a) (Thing a)))
(forall (a) (if (DM-DataClass a) (Thing a)))
(forall (a) (if (DM-Experiment a) (Thing a)))
(forall (a) (if (DM-Hypothesis a) (Thing a)))
(forall (a) (if (DM-HypothesisClass a) (Thing a)))
(forall (a) (if (DM-Model a) (Thing a)))
(forall (a) (if (DM-ModelClass a) (Thing a)))
(forall (a) (if (DM-Operation a) (Thing a)))
(forall (a) (if (DM-Operator a) (Thing a)))
(forall (a) (if (DM-PatternSet a) (Thing a)))
(forall (a) (if (DM-PatternSetClass a) (Thing a)))
(forall (a) (if (DM-Process a) (Thing a)))
(forall (a) (if (DM-Software a) (Thing a)))
(forall (a) (if (DM-Task a) (Thing a)))
(forall (a) (if (DM-Workflow a) (Thing a)))
(forall (a) (if (DataAbstractionAlgorithm a) (Thing a)))
(forall (a) (if (DataAbstractionTask a) (Thing a)))
(forall (a) (if (DataCleaningTask a) (Thing a)))
(forall (a) (if (DataFormat a) (Thing a)))
(forall (a) (if (DataProcessingAlgorithm a) (Thing a)))
(forall (a) (if (DataProcessingAlgorithmCharacteristic a) (Thing a)))
(forall (a) (if (DataProcessingOperator a) (Thing a)))
(forall (a) (if (DataProcessingTask a) (Thing a)))
(forall (a) (if (DataProcessingWorkflow a) (Thing a)))
(forall (a) (if (DataReductionTask a) (Thing a)))
(forall (a) (if (DataRetrievalTask a) (Thing a)))
(forall (a) (if (DataSet a) (Thing a)))
(forall (a) (if (DataSetClass a) (Thing a)))
(forall (a) (if (DataTable a) (Thing a)))
(forall (a) (if (DataTableClass a) (Thing a)))
(forall (a) (if (DataTransformationTask a) (Thing a)))
(forall (a) (if (DataType a) (Thing a)))
(forall (a) (if (DecisionBoundary a) (Thing a)))
(forall (a) (if (DecisionCriterion a) (Thing a)))
(forall (a) (if (DecisionRule a) (Thing a)))
(forall (a) (if (DecisionStrategy a) (Thing a)))
(forall (a) (if (DecisionTarget a) (Thing a)))
(forall (a) (if (DecisionTree a) (Thing a)))
(forall (a) (if (DecisionTreeModel a) (Thing a)))
(forall (a) (if (DecisionTreeModelClass a) (Thing a)))
(forall (a) (if (DependencyModel a) (Thing a)))
(forall (a) (if (DependencyModelClass a) (Thing a)))
(forall (a) (if (DependencyModelingAlgorithm a) (Thing a)))
(forall (a) (if (DependencyModelingTask a) (Thing a)))
(forall (a) (if (DescriptionTask a) (Thing a)))
(forall (a) (if (DescriptiveModel a) (Thing a)))
(forall (a) (if (DescriptiveModelClass a) (Thing a)))
(forall (a) (if (DescriptiveModelEvalFunction a) (Thing a)))
(forall (a) (if (DescriptiveModelingAlgorithm a) (Thing a)))
(forall (a) (if (DescriptiveModelingTask a) (Thing a)))
(forall (a) (if (Deterministic-Stochastic a) (Thing a)))
(forall (a) (if (DeterministicSearch a) (Thing a)))
(forall (a) (if (DeviationDescription a) (Thing a)))
(forall (a) (if (DeviationDetectionTask a) (Thing a)))
(forall (a) (if (DimensionalityReductionTask a) (Thing a)))
(forall (a) (if (DiscreteFeature a) (Thing a)))
(forall (a) (if (DiscreteFeatureCharacteristic a) (Thing a)))
(forall (a) (if (DiscreteFeatureValue a) (Thing a)))
(forall (a) (if (DiscreteOptimizationProblem a) (Thing a)))
(forall (a) (if (DiscreteOptimizationStrategy a) (Thing a)))
(forall (a) (if (DiscreteParametricDensityEstimation a) (Thing a)))
(forall (a) (if (DiscreteUniformDensityEstimation a) (Thing a)))
(forall (a) (if (DiscretizationBasedDensityEstimation a) (Thing a)))
(forall (a) (if (DiscriminantAnalysisAlgorithm a) (Thing a)))
(forall (a) (if (DiscriminantFunctionAlgorithm a) (Thing a)))
(forall (a) (if (DiscriminantFunctionModel a) (Thing a)))
(forall (a) (if (DiscriminantFunctionModelClass a) (Thing a)))
(forall (a) (if (DiscriminantModel a) (Thing a)))
(forall (a) (if (DiscriminantModelClass a) (Thing a)))
(forall (a) (if (DiscriminativeAlgorithm a) (Thing a)))
(forall (a) (if (DiscriminativeModel a) (Thing a)))
(forall (a) (if (DiscriminativeModelClass a) (Thing a)))
(forall (a) (if (DissociationDiscoveryTask a) (Thing a)))
(forall (a) (if (DissociationPatternSet a) (Thing a)))
(forall (a) (if (DissociationPatternSetClass a) (Thing a)))
(forall (a) (if (DistanceFunction a) (Thing a)))
(forall (a) (if (DistanceOrSimilarityFunction a) (Thing a)))
(forall (a) (if (DistributionParameter a) (Thing a)))
(forall (a) (if (Eager-Lazy a) (Thing a)))
(forall (a) (if (EarlyStoppingStrategy a) (Thing a)))
(forall (a) (if (EmbeddedFSAlgorithm a) (Thing a)))
(forall (a) (if (EntropyBasedFSAlgorithm a) (Thing a)))
(forall (a) (if (EntropyBasedFWAlgorithm a) (Thing a)))
(forall (a) (if (EvaluationFunction a) (Thing a)))
(forall (a) (if (ExactContinuousOptimizationStrategy a) (Thing a)))
(forall (a) (if (Exhaustive-NonExhaustive a) (Thing a)))
(forall (a) (if (ExploratoryDataAnalysisTask a) (Thing a)))
(forall (a) (if (Exponential-lambda a) (Thing a)))
(forall (a) (if (ExternalValidityModelFunction a) (Thing a)))
(forall (a) (if (Feature a) (Thing a)))
(forall (a) (if (Feature-BasedModelParameter a) (Thing a)))
(forall (a) (if (FeatureClass a) (Thing a)))
(forall (a) (if (FeatureClassMutualInformation a) (Thing a)))
(forall (a) (if (FeatureDiscretizationAlgorithm a) (Thing a)))
(forall (a) (if (FeatureDiscretizationOperator a) (Thing a)))
(forall (a) (if (FeatureDiscretizationTask a) (Thing a)))
(forall (a) (if (FeatureEvaluationContext a) (Thing a)))
(forall (a) (if (FeatureEvaluationFunction a) (Thing a)))
(forall (a) (if (FeatureEvaluationTarget a) (Thing a)))
(forall (a) (if (FeatureExtractionAlgorithm a) (Thing a)))
(forall (a) (if (FeatureExtractionAlgorithmCharacteristic a) (Thing a)))
(forall (a) (if (FeatureExtractionOperator a) (Thing a)))
(forall (a) (if (FeatureExtractionTask a) (Thing a)))
(forall (a) (if (FeatureLinearTransformAlgorithm a) (Thing a)))
(forall (a) (if (FeatureLogTransformAlgorithm a) (Thing a)))
(forall (a) (if (FeatureNormalizationAlgorithm a) (Thing a)))
(forall (a) (if (FeatureRankingAlgorithm a) (Thing a)))
(forall (a) (if (FeatureRankingTask a) (Thing a)))
(forall (a) (if (FeatureRelatedAssumption a) (Thing a)))
(forall (a) (if (FeatureSelectionAlgorithm a) (Thing a)))
(forall (a) (if (FeatureSelectionOperator a) (Thing a)))
(forall (a) (if (FeatureSelectionTask a) (Thing a)))
(forall (a) (if (FeatureSetEvaluationFunction a) (Thing a)))
(forall (a) (if (FeatureSqrtTansformAlgorithm a) (Thing a)))
(forall (a) (if (FeatureSquashToIntervalAlgorithm a) (Thing a)))
(forall (a) (if (FeatureStandardizationAlgorithm a) (Thing a)))
(forall (a) (if (FeatureSubsetWeightingAlgorithm a) (Thing a)))
(forall (a) (if (FeatureTransformationAlgorithm a) (Thing a)))
(forall (a) (if (FeatureTransformationTask a) (Thing a)))
(forall (a) (if (FeatureValue a) (Thing a)))
(forall (a) (if (FeatureWeightingAlgorithm a) (Thing a)))
(forall (a) (if (FeatureWeightingAlgorithmCharacteristic a) (Thing a)))
(forall (a) (if (FeatureWeightingOperator a) (Thing a)))
(forall (a) (if (FeatureWeightingTask a) (Thing a)))
(forall (a) (if (FeedforwardLayeredNNModelClass a) (Thing a)))
(forall (a) (if (FeedforwardNNAlgorithm a) (Thing a)))
(forall (a) (if (FeedfowardLayeredNNModel a) (Thing a)))
(forall (a) (if (Filter-Wrapper-Embedded a) (Thing a)))
(forall (a) (if (FilterFSAlgorithm a) (Thing a)))
(forall (a) (if (FirstOrderLogicStructure a) (Thing a)))
(forall (a) (if (FishersLinearDiscriminantModel a) (Thing a)))
(forall (a) (if (FormalExpression a) (Thing a)))
(forall (a) (if (ForwardWrapperFSAlgorithm a) (Thing a)))
(forall (a) (if (FunctionParameter a) (Thing a)))
(forall (a) (if (GAwithFSSEvaluatorFSAlgorithm a) (Thing a)))
(forall (a) (if (GAwithWrappedLearnerFSAlgorithm a) (Thing a)))
(forall (a) (if (Gauss-CovarianceMatrix a) (Thing a)))
(forall (a) (if (Gauss-MeanVector a) (Thing a)))
(forall (a) (if (GaussianKernelBasedDensityEstimation a) (Thing a)))
(forall (a) (if (GaussianKernelSVCModel a) (Thing a)))
(forall (a) (if (GenToSpec-SpecToGen a) (Thing a)))
(forall (a) (if (GeneralizedAdditiveModel a) (Thing a)))
(forall (a) (if (GenerateAndSelectStrategy a) (Thing a)))
(forall (a) (if (GenerativeAlgorithm a) (Thing a)))
(forall (a) (if (GenerativeModel a) (Thing a)))
(forall (a) (if (GenerativeModelClass a) (Thing a)))
(forall (a) (if (GeneticFSAlgorithm a) (Thing a)))
(forall (a) (if (GeneticSearch a) (Thing a)))
(forall (a) (if (Graph a) (Thing a)))
(forall (a) (if (GraphTheoreticClusteringAlgorithm a) (Thing a)))
(forall (a) (if (GraphicalModel a) (Thing a)))
(forall (a) (if (GreedySearch a) (Thing a)))
(forall (a) (if (HandlingOfCategoricalFeatures a) (Thing a)))
(forall (a) (if (HandlingOfClassificationCosts a) (Thing a)))
(forall (a) (if (HandlingOfContinuousFeatures a) (Thing a)))
(forall (a) (if (HandlingOfInstanceWeights a) (Thing a)))
(forall (a) (if (HardMarginSVC-Algorithm a) (Thing a)))
(forall (a) (if (HeuristicBestFirstSearch a) (Thing a)))
(forall (a) (if (HeuristicContinuousOptimizationStrategy a) (Thing a)))
(forall (a) (if (HierarchicalClusteringAlgorithm a) (Thing a)))
(forall (a) (if (HierarchicalClusteringModel a) (Thing a)))
(forall (a) (if (HierarchicalClusteringModelClass a) (Thing a)))
(forall (a) (if (HierarchicalClusteringModelParameter a) (Thing a)))
(forall (a) (if (HighBias-HighVariance a) (Thing a)))
(forall (a) (if (HillClimbing a) (Thing a)))
(forall (a) (if (HingeLoss a) (Thing a)))
(forall (a) (if (HypothesisApplicationAlgorithm a) (Thing a)))
(forall (a) (if (HypothesisApplicationTask a) (Thing a)))
(forall (a) (if (HypothesisCharacteristic a) (Thing a)))
(forall (a) (if (HypothesisComplexityControlStrategy a) (Thing a)))
(forall (a) (if (HypothesisEvaluationFunction a) (Thing a)))
(forall (a) (if (HypothesisEvaluationMeasure a) (Thing a)))
(forall (a) (if (HypothesisEvaluationTask a) (Thing a)))
(forall (a) (if (HypothesisProcessingAlgorithm a) (Thing a)))
(forall (a) (if (HypothesisProcessingTask a) (Thing a)))
(forall (a) (if (HypothesisStructure a) (Thing a)))
(forall (a) (if (HypothesisTestBasedFSAlgorithm a) (Thing a)))
(forall (a) (if (ICA-OptimizationProblem a) (Thing a)))
(forall (a) (if (ID3Model a) (Thing a)))
(forall (a) (if (IO-Class a) (Thing a)))
(forall (a) (if (IO-Object a) (Thing a)))
(forall (a) (if (IncrementalClusteringAlgorithm a) (Thing a)))
(forall (a) (if (IncrementalReducedErrorPruningAlgorithm a) (Thing a)))
(forall (a) (if (InductionAlgorithm a) (Thing a)))
(forall (a) (if (InductionAlgorithmCharacteristic a) (Thing a)))
(forall (a) (if (InductionTask a) (Thing a)))
(forall (a) (if (InductionWorkflow a) (Thing a)))
(forall (a) (if (InformedSearch a) (Thing a)))
(forall (a) (if (Instance a) (Thing a)))
(forall (a) (if (Instance-BasedModelParameter a) (Thing a)))
(forall (a) (if (InstanceRelatedAssumption a) (Thing a)))
(forall (a) (if (InstanceWeightVector a) (Thing a)))
(forall (a) (if (InternalValidityModelFunction a) (Thing a)))
(forall (a) (if (Interpretability a) (Thing a)))
(forall (a) (if (IntervalFeature a) (Thing a)))
(forall (a) (if (IntervalFeatureCharacteristic a) (Thing a)))
(forall (a) (if (IntervalFeatureValue a) (Thing a)))
(forall (a) (if (ItemReassignmentToCluster a) (Thing a)))
(forall (a) (if (ItemSequenceTableFormat a) (Thing a)))
(forall (a) (if (ItemSetTableFormat a) (Thing a)))
(forall (a) (if (IterativeImprovementSearch a) (Thing a)))
(forall (a) (if (K-Means-Parameter a) (Thing a)))
(forall (a) (if (K-MeansAlgorithm a) (Thing a)))
(forall (a) (if (K-MeansModel a) (Thing a)))
(forall (a) (if (K-MeansModelClass a) (Thing a)))
(forall (a) (if (KNN-Parameter a) (Thing a)))
(forall (a) (if (KNearestNeighborAlgorithm a) (Thing a)))
(forall (a) (if (KNearestNeighborModel a) (Thing a)))
(forall (a) (if (KNearestNeighborModelClass a) (Thing a)))
(forall (a) (if (KernelEuclideanDistance a) (Thing a)))
(forall (a) (if (KernelFunction a) (Thing a)))
(forall (a) (if (KernelTypeParameter a) (Thing a)))
(forall (a) (if (KernelWeightVector a) (Thing a)))
(forall (a) (if (LabeledDataSet a) (Thing a)))
(forall (a) (if (LabeledDataSetClass a) (Thing a)))
(forall (a) (if (LabeledDataTable a) (Thing a)))
(forall (a) (if (LeafSizeParameter a) (Thing a)))
(forall (a) (if (LearnerBasedFWAlgorithm a) (Thing a)))
(forall (a) (if (LearnerFreeFWAlgorithm a) (Thing a)))
(forall (a) (if (LearningPolicy a) (Thing a)))
(forall (a) (if (Linear-NonLinear a) (Thing a)))
(forall (a) (if (LinearBoundary a) (Thing a)))
(forall (a) (if (LinearCombination a) (Thing a)))
(forall (a) (if (LinearConstraint a) (Thing a)))
(forall (a) (if (LinearDiscriminantModel a) (Thing a)))
(forall (a) (if (LinearEqualityConstraint a) (Thing a)))
(forall (a) (if (LinearInequalityConstraint a) (Thing a)))
(forall (a) (if (LinearModel a) (Thing a)))
(forall (a) (if (LinearRegressionModel a) (Thing a)))
(forall (a) (if (LinearSVCModel a) (Thing a)))
(forall (a) (if (List a) (Thing a)))
(forall (a) (if (LocalBeamSearch a) (Thing a)))
(forall (a) (if (LocalDelimitationStrategy a) (Thing a)))
(forall (a) (if (LocalPiecewiseModelStructure a) (Thing a)))
(forall (a) (if (LogLikelihood a) (Thing a)))
(forall (a) (if (LogicalExpression a) (Thing a)))
(forall (a) (if (LogicalModel a) (Thing a)))
(forall (a) (if (LogicalModelClass a) (Thing a)))
(forall (a) (if (LogicalStructure a) (Thing a)))
(forall (a) (if (LogisticRegressionModel a) (Thing a)))
(forall (a) (if (Low-Medium-High a) (Thing a)))
(forall (a) (if (ManifoldFeatureExtractionAlgorithm a) (Thing a)))
(forall (a) (if (MarkovNetwork a) (Thing a)))
(forall (a) (if (MathematicalExpression a) (Thing a)))
(forall (a) (if (MathematicalFunction a) (Thing a)))
(forall (a) (if (MathematicalModel a) (Thing a)))
(forall (a) (if (MathematicalStructure a) (Thing a)))
(forall (a) (if (MaxRule a) (Thing a)))
(forall (a) (if (MeanValueRegressor a) (Thing a)))
(forall (a) (if (Measure a) (Thing a)))
(forall (a) (if (MeasureClass a) (Thing a)))
(forall (a) (if (MedianValueRegressor a) (Thing a)))
(forall (a) (if (MetricLearningApproach a) (Thing a)))
(forall (a) (if (MinRule a) (Thing a)))
(forall (a) (if (Minimize-Maximize a) (Thing a)))
(forall (a) (if (Minimum-VarianceModel a) (Thing a)))
(forall (a) (if (MissingValueImputationAlgorithm a) (Thing a)))
(forall (a) (if (MissingValueImputationTask a) (Thing a)))
(forall (a) (if (MixtureModel a) (Thing a)))
(forall (a) (if (ModelAggregationAlgorithm a) (Thing a)))
(forall (a) (if (ModelAggregationTask a) (Thing a)))
(forall (a) (if (ModelApplicationAlgorithm a) (Thing a)))
(forall (a) (if (ModelApplicationOperator a) (Thing a)))
(forall (a) (if (ModelApplicationTask a) (Thing a)))
(forall (a) (if (ModelApplicationWorkflow a) (Thing a)))
(forall (a) (if (ModelCharacteristic a) (Thing a)))
(forall (a) (if (ModelComplexity a) (Thing a)))
(forall (a) (if (ModelComplexityFunction a) (Thing a)))
(forall (a) (if (ModelComplexityMeasure a) (Thing a)))
(forall (a) (if (ModelEvaluationAlgorithm a) (Thing a)))
(forall (a) (if (ModelEvaluationFunction a) (Thing a)))
(forall (a) (if (ModelEvaluationMeasure a) (Thing a)))
(forall (a) (if (ModelEvaluationOperator a) (Thing a)))
(forall (a) (if (ModelEvaluationTask a) (Thing a)))
(forall (a) (if (ModelParameter a) (Thing a)))
(forall (a) (if (ModelParameterCount a) (Thing a)))
(forall (a) (if (ModelParameterMagnitude a) (Thing a)))
(forall (a) (if (ModelPerformance a) (Thing a)))
(forall (a) (if (ModelProcessingAlgorithm a) (Thing a)))
(forall (a) (if (ModelProcessingOperator a) (Thing a)))
(forall (a) (if (ModelProcessingTask a) (Thing a)))
(forall (a) (if (ModelProcessingWorkflow a) (Thing a)))
(forall (a) (if (ModelPruningAlgorithm a) (Thing a)))
(forall (a) (if (ModelPruningTask a) (Thing a)))
(forall (a) (if (ModelStructure a) (Thing a)))
(forall (a) (if (ModelingAlgorithm a) (Thing a)))
(forall (a) (if (ModelingOperator a) (Thing a)))
(forall (a) (if (ModelingTask a) (Thing a)))
(forall (a) (if (MultilayerPerceptronAlgorithm a) (Thing a)))
(forall (a) (if (Multinomial-N a) (Thing a)))
(forall (a) (if (Multinomial-Pvector a) (Thing a)))
(forall (a) (if (MultinomialDensityEstimation a) (Thing a)))
(forall (a) (if (MultivariateFSAlgorithm a) (Thing a)))
(forall (a) (if (MultivariateFWAlgorithm a) (Thing a)))
(forall (a) (if (MultivariateLearnerBasedFWAlgorithm a) (Thing a)))
(forall (a) (if (MultivariateLearnerFreeFWAlgorithm a) (Thing a)))
(forall (a) (if (MultivariateNormalDensityEstimation a) (Thing a)))
(forall (a) (if (MultivariateTreeInductionAlgorithm a) (Thing a)))
(forall (a) (if (NBTreeModel a) (Thing a)))
(forall (a) (if (NNParameter a) (Thing a)))
(forall (a) (if (NaiveBayesAlgorithm a) (Thing a)))
(forall (a) (if (NaiveBayesDiscreteModel a) (Thing a)))
(forall (a) (if (NaiveBayesKernelModel a) (Thing a)))
(forall (a) (if (NaiveBayesModel a) (Thing a)))
(forall (a) (if (NaiveBayesModelClass a) (Thing a)))
(forall (a) (if (NaiveBayesMultinomialModel a) (Thing a)))
(forall (a) (if (NaiveBayesNormalModel a) (Thing a)))
(forall (a) (if (NeighborhoodRange a) (Thing a)))
(forall (a) (if (NeuralNetworkAlgorithm a) (Thing a)))
(forall (a) (if (NeuralNetworkModel a) (Thing a)))
(forall (a) (if (NeuralNetworkModelClass a) (Thing a)))
(forall (a) (if (NoiseReductionTask a) (Thing a)))
(forall (a) (if (Non-IncrementalClusteringAlgorithm a) (Thing a)))
(forall (a) (if (NonConvexOptimizationProblem a) (Thing a)))
(forall (a) (if (NonLinearRegressionModel a) (Thing a)))
(forall (a) (if (NonParametricModel a) (Thing a)))
(forall (a) (if (NonParametricTest a) (Thing a)))
(forall (a) (if (NonParametricTestBasedFSAlgorithm a) (Thing a)))
(forall (a) (if (NonProbabilisticModelStructure a) (Thing a)))
(forall (a) (if (NonlinearBoundary a) (Thing a)))
(forall (a) (if (NonlinearCombination a) (Thing a)))
(forall (a) (if (NonlinearPolynomialKernel a) (Thing a)))
(forall (a) (if (NonlinearPositiveSemidefiniteKernel a) (Thing a)))
(forall (a) (if (NonlinearSVCModel a) (Thing a)))
(forall (a) (if (NonlinearSVCModelClass a) (Thing a)))
(forall (a) (if (NonparametricDensityEstimation a) (Thing a)))
(forall (a) (if (NonpositiveSemidefiniteKernel a) (Thing a)))
(forall (a) (if (NuSVC-Algorithm a) (Thing a)))
(forall (a) (if (NumberOfInternalNodes a) (Thing a)))
(forall (a) (if (NumberOfLeaves a) (Thing a)))
(forall (a) (if (NumberOfProbabilities a) (Thing a)))
(forall (a) (if (NumberOfRules a) (Thing a)))
(forall (a) (if (NumberOfSupportVectors a) (Thing a)))
(forall (a) (if (NumberOfWeights a) (Thing a)))
(forall (a) (if (OneClassSVC-Algorithm a) (Thing a)))
(forall (a) (if (OpParameterSetting a) (Thing a)))
(forall (a) (if (OperatorParameter a) (Thing a)))
(forall (a) (if (Optimal-Suboptimal a) (Thing a)))
(forall (a) (if (OptimizationProblem a) (Thing a)))
(forall (a) (if (OptimizationStrategy a) (Thing a)))
(forall (a) (if (OrderDependency a) (Thing a)))
(forall (a) (if (OrdinalFeature a) (Thing a)))
(forall (a) (if (OrdinalFeatureCharacteristic a) (Thing a)))
(forall (a) (if (OrdinalFeatureValue a) (Thing a)))
(forall (a) (if (Orthogonal-NonOrthogonal a) (Thing a)))
(forall (a) (if (PARTModel a) (Thing a)))
(forall (a) (if (PRISMModel a) (Thing a)))
(forall (a) (if (Parameter a) (Thing a)))
(forall (a) (if (ParametricDensityEstimation a) (Thing a)))
(forall (a) (if (ParametricModel a) (Thing a)))
(forall (a) (if (ParametricTest a) (Thing a)))
(forall (a) (if (ParametricTestBasedFSAlgorithm a) (Thing a)))
(forall (a) (if (PartitionalClusteringAlgorithm a) (Thing a)))
(forall (a) (if (PartitionalClusteringModel a) (Thing a)))
(forall (a) (if (PartitionalClusteringModelClass a) (Thing a)))
(forall (a) (if (PartitionalClusteringModelParameter a) (Thing a)))
(forall (a) (if (PathBasedSearch a) (Thing a)))
(forall (a) (if (PatternDiscoveryAlgorithm a) (Thing a)))
(forall (a) (if (PatternDiscoveryTask a) (Thing a)))
(forall (a) (if (PatternEvaluationFunction a) (Thing a)))
(forall (a) (if (PatternProcessingAlgorithm a) (Thing a)))
(forall (a) (if (PatternPruningAlgorithm a) (Thing a)))
(forall (a) (if (PatternPruningTask a) (Thing a)))
(forall (a) (if (PatternSetApplicationAlgorithm a) (Thing a)))
(forall (a) (if (PatternSetApplicationTask a) (Thing a)))
(forall (a) (if (PatternSetBasedClassifModelingAlgorithm a) (Thing a)))
(forall (a) (if (PatternSetBasedClassificationModel a) (Thing a)))
(forall (a) (if (PatternSetBasedModelStructure a) (Thing a)))
(forall (a) (if (PatternSetCharacteristic a) (Thing a)))
(forall (a) (if (PatternSetEvaluationMeasure a) (Thing a)))
(forall (a) (if (PatternSetEvaluationTask a) (Thing a)))
(forall (a) (if (PatternSetProcessingTask a) (Thing a)))
(forall (a) (if (PatternStructure a) (Thing a)))
(forall (a) (if (PerceptronModel a) (Thing a)))
(forall (a) (if (PerformanceBoundsAnalysis a) (Thing a)))
(forall (a) (if (PiecewiseLinearBoundary a) (Thing a)))
(forall (a) (if (PolynomialKernelSVCModel a) (Thing a)))
(forall (a) (if (PositiveSemidefiniteKernel a) (Thing a)))
(forall (a) (if (PosteriorProbabilityAssumption a) (Thing a)))
(forall (a) (if (PredictionTask a) (Thing a)))
(forall (a) (if (PredictiveModel a) (Thing a)))
(forall (a) (if (PredictiveModelClass a) (Thing a)))
(forall (a) (if (PredictiveModelEvalFunction a) (Thing a)))
(forall (a) (if (PredictiveModelingAlgorithm a) (Thing a)))
(forall (a) (if (PredictiveModelingAlgorithmCharacteristic a) (Thing a)))
(forall (a) (if (PredictiveModelingTask a) (Thing a)))
(forall (a) (if (PrimitiveType a) (Thing a)))
(forall (a) (if (ProbabilisticClusteringAlgorithm a) (Thing a)))
(forall (a) (if (ProbabilisticModelClass a) (Thing a)))
(forall (a) (if (ProbabilisticModelStructure a) (Thing a)))
(forall (a) (if (ProbabilityDensityEstimation a) (Thing a)))
(forall (a) (if (ProbabilityDistributionRelatedAssumption a) (Thing a)))
(forall (a) (if (ProbabilityEstimationAlgorithm a) (Thing a)))
(forall (a) (if (ProbabilityEstimationModel a) (Thing a)))
(forall (a) (if (ProbabilityEstimationTask a) (Thing a)))
(forall (a) (if (ProjectiveFeatureExtractionAlgorithm a) (Thing a)))
(forall (a) (if (PropositionalDataSet a) (Thing a)))
(forall (a) (if (PropositionalLogicStructure a) (Thing a)))
(forall (a) (if (PropositionalRuleSet a) (Thing a)))
(forall (a) (if (PruningStrategy a) (Thing a)))
(forall (a) (if (QuadraticConstraint a) (Thing a)))
(forall (a) (if (QuadraticDiscriminantModel a) (Thing a)))
(forall (a) (if (QuadraticEqualityConstraint a) (Thing a)))
(forall (a) (if (QuadraticInequalityConstraint a) (Thing a)))
(forall (a) (if (QuadraticProgramming a) (Thing a)))
(forall (a) (if (QualitativeFeature a) (Thing a)))
(forall (a) (if (QuantitativeFeature a) (Thing a)))
(forall (a) (if (RM-OperatorParameter a) (Thing a)))
(forall (a) (if (ROperator a) (Thing a)))
(forall (a) (if (RadialBasisFunctionNetworkAlgorithm a) (Thing a)))
(forall (a) (if (RandomComponent a) (Thing a)))
(forall (a) (if (RandomTreeModel a) (Thing a)))
(forall (a) (if (RangeOfNeighborhood a) (Thing a)))
(forall (a) (if (RapidMinerOperator a) (Thing a)))
(forall (a) (if (RecoveryOfPursuit a) (Thing a)))
(forall (a) (if (RecurrentNNAlgorithm a) (Thing a)))
(forall (a) (if (RegressionModel a) (Thing a)))
(forall (a) (if (RegressionModelClass a) (Thing a)))
(forall (a) (if (RegressionModelEvalFunction a) (Thing a)))
(forall (a) (if (RegressionModelingAlgorithm a) (Thing a)))
(forall (a) (if (RegressionModelingOperator a) (Thing a)))
(forall (a) (if (RegressionModelingTask a) (Thing a)))
(forall (a) (if (RegressionTask a) (Thing a)))
(forall (a) (if (RegressionTreeInductionAlgorithm a) (Thing a)))
(forall (a) (if (RegularizationParameter a) (Thing a)))
(forall (a) (if (RegularizationStrategy a) (Thing a)))
(forall (a) (if (RegularizedClassificationModelEvalFunction a) (Thing a)))
(forall (a) (if (RegularizedDiscriminantModel a) (Thing a)))
(forall (a) (if (RelOp a) (Thing a)))
(forall (a) (if (RelationalDataSet a) (Thing a)))
(forall (a) (if (RelativeValidityModelFunction a) (Thing a)))
(forall (a) (if (RelaxationStrategy a) (Thing a)))
(forall (a) (if (RipperModel a) (Thing a)))
(forall (a) (if (Rule a) (Thing a)))
(forall (a) (if (RuleEnsembleInductionAlgorithm a) (Thing a)))
(forall (a) (if (RuleInductionStrategy a) (Thing a)))
(forall (a) (if (RulePruningAlgorithm a) (Thing a)))
(forall (a) (if (RuleSetModel a) (Thing a)))
(forall (a) (if (RuleSetModelClass a) (Thing a)))
(forall (a) (if (RulesetPruningAlgorithm a) (Thing a)))
(forall (a) (if (SVC-Algorithm a) (Thing a)))
(forall (a) (if (SVC-Parameter a) (Thing a)))
(forall (a) (if (SVCModel a) (Thing a)))
(forall (a) (if (SVCModelClass a) (Thing a)))
(forall (a) (if (SampleHandlingForRuleInduction a) (Thing a)))
(forall (a) (if (SampleHandlingStrategy a) (Thing a)))
(forall (a) (if (ScopeOfSelection a) (Thing a)))
(forall (a) (if (SearchDirection a) (Thing a)))
(forall (a) (if (SearchStrategy a) (Thing a)))
(forall (a) (if (SegmentationModel a) (Thing a)))
(forall (a) (if (SelfConfiguringNNAlgorithm a) (Thing a)))
(forall (a) (if (SemiSupervisedInductionAlgorithm a) (Thing a)))
(forall (a) (if (SetCoveringAlgorithm a) (Thing a)))
(forall (a) (if (SetOfClassCondCovarianceMatrices a) (Thing a)))
(forall (a) (if (SetOfSplitThresholds a) (Thing a)))
(forall (a) (if (SetOfWeightVectors a) (Thing a)))
(forall (a) (if (SetOrBag a) (Thing a)))
(forall (a) (if (SharedCovarianceMatrix a) (Thing a)))
(forall (a) (if (SigmoidKernel a) (Thing a)))
(forall (a) (if (SimilarityBasedModelStructure a) (Thing a)))
(forall (a) (if (SimilarityFunction a) (Thing a)))
(forall (a) (if (SimulatedAnnealing a) (Thing a)))
(forall (a) (if (SingleConditionModel a) (Thing a)))
(forall (a) (if (SingleFeature-FeatureSubset a) (Thing a)))
(forall (a) (if (SingleFeatureEvaluationFunction a) (Thing a)))
(forall (a) (if (SingleFeatureWeightingAlgorithm a) (Thing a)))
(forall (a) (if (SingleLinkModel a) (Thing a)))
(forall (a) (if (SlipperModel a) (Thing a)))
(forall (a) (if (SplineModel a) (Thing a)))
(forall (a) (if (SplitEvalFunctionParameter a) (Thing a)))
(forall (a) (if (SplitTypeParameter a) (Thing a)))
(forall (a) (if (SquaredError a) (Thing a)))
(forall (a) (if (StatisticBasedFWAlgorithm a) (Thing a)))
(forall (a) (if (StatisticalTest a) (Thing a)))
(forall (a) (if (StochasticSearch a) (Thing a)))
(forall (a) (if (Strategy a) (Thing a)))
(forall (a) (if (StructuredFeature a) (Thing a)))
(forall (a) (if (StructuredFeatureCharacteristic a) (Thing a)))
(forall (a) (if (StructuredFeatureValue a) (Thing a)))
(forall (a) (if (StructuredKernel a) (Thing a)))
(forall (a) (if (StructuredKernelSVCModel a) (Thing a)))
(forall (a) (if (StructuredLabeledDataSet a) (Thing a)))
(forall (a) (if (StructuredPredictionModel a) (Thing a)))
(forall (a) (if (StructuredPredictionModelClass a) (Thing a)))
(forall (a) (if (StructuredPredictionModelingAlgorithm a) (Thing a)))
(forall (a) (if (StructuredPredictionModelingTask a) (Thing a)))
(forall (a) (if (StructuredPredictionTask a) (Thing a)))
(forall (a) (if (StructuredType a) (Thing a)))
(forall (a) (if (SubgroupDescription a) (Thing a)))
(forall (a) (if (SubgroupDiscoveryTask a) (Thing a)))
(forall (a) (if (SubsamplingTask a) (Thing a)))
(forall (a) (if (SumOfSquaredWeights a) (Thing a)))
(forall (a) (if (SumOfWeights a) (Thing a)))
(forall (a) (if (SupervisedDiscretizationAlgorithm a) (Thing a)))
(forall (a) (if (SupervisedFeatureExtractionAlgorithm a) (Thing a)))
(forall (a) (if (SupervisedInductionAlgorithm a) (Thing a)))
(forall (a) (if (TableFormat a) (Thing a)))
(forall (a) (if (TargetFeature a) (Thing a)))
(forall (a) (if (TargetRelatedAssumption a) (Thing a)))
(forall (a) (if (TimeSeriesTableFormat a) (Thing a)))
(forall (a) (if (ToleranceToClassImbalance a) (Thing a)))
(forall (a) (if (ToleranceToCorrelatedFeatures a) (Thing a)))
(forall (a) (if (ToleranceToHighDimensionality a) (Thing a)))
(forall (a) (if (ToleranceToIrrelevantFeatures a) (Thing a)))
(forall (a) (if (ToleranceToMissingValues a) (Thing a)))
(forall (a) (if (ToleranceToNoise a) (Thing a)))
(forall (a) (if (ToleranceToWideDataSets a) (Thing a)))
(forall (a) (if (Top-DownClusteringAlgorithm a) (Thing a)))
(forall (a) (if (TopKPctRule a) (Thing a)))
(forall (a) (if (TopKRule a) (Thing a)))
(forall (a) (if (TrainingSet a) (Thing a)))
(forall (a) (if (TransformationFunction a) (Thing a)))
(forall (a) (if (Tree a) (Thing a)))
(forall (a) (if (TreeBasedRuleInductionAlgorithm a) (Thing a)))
(forall (a) (if (TreeBranchingFactor a) (Thing a)))
(forall (a) (if (TreeDepth a) (Thing a)))
(forall (a) (if (TreeInductionParameter a) (Thing a)))
(forall (a) (if (TreePruningAlgorithm a) (Thing a)))
(forall (a) (if (TreePruningParameter a) (Thing a)))
(forall (a) (if (Tuple a) (Thing a)))
(forall (a) (if (Uniform-K a) (Thing a)))
(forall (a) (if (UniquenessOfSolution a) (Thing a)))
(forall (a) (if (Univariate-Multivariate a) (Thing a)))
(forall (a) (if (UnivariateFSAlgorithm a) (Thing a)))
(forall (a) (if (UnivariateFWAlgorithm a) (Thing a)))
(forall (a) (if (UnivariateLearnerBasedFWAlgorithm a) (Thing a)))
(forall (a) (if (UnivariateLearnerFreeFWAlgorithm a) (Thing a)))
(forall (a) (if (UnivariateNormalDensityEstimation a) (Thing a)))
(forall (a) (if (UnivariateTreeInductionAlgorithm a) (Thing a)))
(forall (a) (if (UnlabeledDataSet a) (Thing a)))
(forall (a) (if (UnlabeledDataSetClass a) (Thing a)))
(forall (a) (if (UnlabeledDataTable a) (Thing a)))
(forall (a) (if (UnsupervisedDiscretizationAlgorithm a) (Thing a)))
(forall (a) (if (UnsupervisedFeatureExtractionAlgorithm a) (Thing a)))
(forall (a) (if (UnsupervisedInductionAlgorithm a) (Thing a)))
(forall (a) (if (UtilityAlgorithm a) (Thing a)))
(forall (a) (if (UtilityOperator a) (Thing a)))
(forall (a) (if (UtilityTask a) (Thing a)))
(forall (a) (if (ValueSearchStopRule a) (Thing a)))
(forall (a) (if (ValueThresholdRule a) (Thing a)))
(forall (a) (if (VotedPerceptronModel a) (Thing a)))
(forall (a) (if (Weka-OperatorParameter a) (Thing a)))
(forall (a) (if (WekaOperator a) (Thing a)))
(forall (a) (if (Workflow a) (Thing a)))
(forall (a) (if (WorkflowEntity a) (Thing a)))
(forall (a) (if (WorkflowTemplate a) (Thing a)))
(forall (a) (if (WorkflowVariable a) (Thing a)))
(forall (a) (if (WrapperFSAlgorithm a) (Thing a)))
(forall (a) (if (WrapperFWAlgorithm a) (Thing a)))
(forall (a) (if (Yes-No-Unknown a) (Thing a)))
(forall (a) (if (AssociationRuleGenerationAlgorithm a) (Thing a)))
(forall (a) (if (SubgroupDiscoveryAlgorithm a) (Thing a)))
(forall (a) (if (abstract a) (Thing a)))
(forall (a) (if (abstract-quality a) (Thing a)))
(forall (a) (if (abstract-region a) (Thing a)))
(forall (a) (if (accomplishment a) (Thing a)))
(forall (a) (if (achievement a) (Thing a)))
(forall (a) (if (endurant a) (Thing a)))
(forall (a) (if (event a) (Thing a)))
(forall (a) (if (non-physical-endurant a) (Thing a)))
(forall (a) (if (non-physical-object a) (Thing a)))
(forall (a) (if (particular a) (Thing a)))
(forall (a) (if (perdurant a) (Thing a)))
(forall (a) (if (process a) (Thing a)))
(forall (a) (if (quale a) (Thing a)))
(forall (a) (if (quality a) (Thing a)))
(forall (a) (if (quality-space a) (Thing a)))
(forall (a) (if (region a) (Thing a)))
(forall (a) (if (spatio-temporal-particular a) (Thing a)))
(forall (a) (if (state a) (Thing a)))
(forall (a) (if (stative a) (Thing a)))
(forall (a) (if (action a) (Thing a)))
(forall (a) (if (activity a) (Thing a)))
(forall (a) (if (cognitive-state a) (Thing a)))
(forall (a) (if (collection a) (Thing a)))
(forall (a) (if (communication-event a) (Thing a)))
(forall (a) (if (concept a) (Thing a)))
(forall (a) (if (course a) (Thing a)))
(forall (a) (if (description a) (Thing a)))
(forall (a) (if (description-role a) (Thing a)))
(forall (a) (if (indicator a) (Thing a)))
(forall (a) (if (information-encoding-system a) (Thing a)))
(forall (a) (if (information-object a) (Thing a)))
(forall (a) (if (logical-role a) (Thing a)))
(forall (a) (if (method a) (Thing a)))
(forall (a) (if (non-agentive-social-object a) (Thing a)))
(forall (a) (if (parameter a) (Thing a)))
(forall (a) (if (path a) (Thing a)))
(forall (a) (if (physical-realization a) (Thing a)))
(forall (a) (if (plan a) (Thing a)))
(forall (a) (if (project a) (Thing a)))
(forall (a) (if (role a) (Thing a)))
(forall (a) (if (social-object a) (Thing a)))
(forall (a) (if (task a) (Thing a)))
(forall (a) (if (technique a) (Thing a)))
(forall (a) (if (boolean a) (Datatype a)))
(forall (a) (if (DATA a) (Datatype a)))
(forall (a) (if (hexBinary a) (Datatype a)))
(forall (a) (if (base64Binary a) (Datatype a)))
(forall (a) (if (date a) (Datatype a)))
(forall (a) (if (time a) (Datatype a)))
(forall (a) (if (gYearMonth a) (Datatype a)))
(forall (a) (if (gYear a) (Datatype a)))
(forall (a) (if (gMonthDay a) (Datatype a)))
(forall (a) (if (gDay a) (Datatype a)))
(forall (a) (if (gMonth a) (Datatype a)))
(forall (a) (if (duration a) (Datatype a)))
(forall (a) (if (dateTime a) (Datatype a)))
(forall (a) (if (dateTimeStamp a) (Datatype a)))
(forall (a) (if (anyURI a) (Datatype a)))
(forall (a) (if (integer a) (Datatype a)))
(forall (a) (if (negativeInteger a) (Datatype a)))
(forall (a) (if (nonNegativeInteger a) (Datatype a)))
(forall (a) (if (nonPositiveInteger a) (Datatype a)))
(forall (a) (if (positiveInteger a) (Datatype a)))
(forall (a) (if (decimal a) (Datatype a)))
(forall (a) (if (double a) (Datatype a)))
(forall (a) (if (float a) (Datatype a)))
(forall (a) (if (long a) (Datatype a)))
(forall (a) (if (int a) (Datatype a)))
(forall (a) (if (short a) (Datatype a)))
(forall (a) (if (byte a) (Datatype a)))
(forall (a) (if (unsignedLong a) (Datatype a)))
(forall (a) (if (unsignedInt a) (Datatype a)))
(forall (a) (if (unsignedShort a) (Datatype a)))
(forall (a) (if (unsignedByte a) (Datatype a)))
(forall (a) (if (string a) (Datatype a)))
(forall (a) (if (NCName a) (Datatype a)))
(forall (a) (if (QName a) (Datatype a)))
(forall (a) (if (Name a) (Datatype a)))
(forall (a) (if (NMTOKEN a) (Datatype a)))
(forall (a) (if (NMTOKENS a) (Datatype a)))
(forall (a) (if (token a) (Datatype a)))
(forall (a) (if (language a) (Datatype a)))
(forall (a) (if (normalizedString a) (Datatype a)))
(forall (a) (if (NOTATION a) (Datatype a)))
(forall (a) (if (ENTITY a) (Datatype a)))
(forall (a) (if (ENTITIES a) (Datatype a)))
(forall (a) (if (ID a) (Datatype a)))
(forall (a) (if (IDREF a) (Datatype a)))
(forall (a) (if (IDREFS a) (Datatype a)))
(forall (a) (if (real a) (Datatype a)))
(forall (a) (if (rational a) (Datatype a)))
(forall (a) (if (XMLLiteral a) (Datatype a)))
(forall (a) (if (Literal a) (Datatype a)))
(forall (a) (if (anyType a) (Datatype a)))
(if (hasDataValue a b) (topDataProperty a b))
(if (hasDefaultValue a b) (topDataProperty a b))
(if (hasExplicitFeatureSpace a b) (topDataProperty a b))
(if (hasFixedThreshold a b) (topDataProperty a b))
(if (hasMaximumValue a b) (topDataProperty a b))
(if (hasMeanValue a b) (topDataProperty a b))
(if (hasMinimumValue a b) (topDataProperty a b))
(if (hasNumberOfConstraints a b) (topDataProperty a b))
(if (hasNumberOfSupportVectors a b) (topDataProperty a b))
(if (hasParameterKey a b) (topDataProperty a b))
(if (hasPolynomialDegree a b) (topDataProperty a b))
(if (isAdmissible a b) (topDataProperty a b))
(if (isComplete a b) (topDataProperty a b))
(if (isMultiAlgorithmOperator a b) (topDataProperty a b))
(if (topDataProperty a b) (topDataProperty a b))
(if (hasDataValue a b) (not (bottomDataProperty a b)))
(if (hasDefaultValue a b) (not (bottomDataProperty a b)))
(if (hasExplicitFeatureSpace a b) (not (bottomDataProperty a b)))
(if (hasFixedThreshold a b) (not (bottomDataProperty a b)))
(if (hasMaximumValue a b) (not (bottomDataProperty a b)))
(if (hasMeanValue a b) (not (bottomDataProperty a b)))
(if (hasMinimumValue a b) (not (bottomDataProperty a b)))
(if (hasNumberOfConstraints a b) (not (bottomDataProperty a b)))
(if (hasNumberOfSupportVectors a b) (not (bottomDataProperty a b)))
(if (hasParameterKey a b) (not (bottomDataProperty a b)))
(if (hasPolynomialDegree a b) (not (bottomDataProperty a b)))
(if (isAdmissible a b) (not (bottomDataProperty a b)))
(if (isComplete a b) (not (bottomDataProperty a b)))
(if (isMultiAlgorithmOperator a b) (not (bottomDataProperty a b)))
(if (topDataProperty a b) (not (bottomDataProperty a b)))
(if (ObsoleteObjectProperty a b) (topObjectProperty a b))
(if (achieves a b) (topObjectProperty a b))
(if (addresses a b) (topObjectProperty a b))
(if (assumes a b) (topObjectProperty a b))
(if (executes a b) (topObjectProperty a b))
(if (handlesFeatureType a b) (topObjectProperty a b))
(if (hasCombinationFunction a b) (topObjectProperty a b))
(if (hasComplexityComponent a b) (topObjectProperty a b))
(if (hasComponent a b) (topObjectProperty a b))
(if (hasComponentStep a b) (topObjectProperty a b))
(if (hasComputationalComplexityFunction a b) (topObjectProperty a
                                                                b))
(if (hasConstraint a b) (topObjectProperty a b))
(if (hasDataType a b) (topObjectProperty a b))
(if (hasDecisionBoundary a b) (topObjectProperty a b))
(if (hasDecisionCriterion a b) (topObjectProperty a b))
(if (hasDecisionRule a b) (topObjectProperty a b))
(if (hasDecisionStrategy a b) (topObjectProperty a b))
(if (hasDecisionTarget a b) (topObjectProperty a b))
(if (hasDensityEstimation a b) (topObjectProperty a b))
(if (hasDistanceFunction a b) (topObjectProperty a b))
(if (hasDistanceOrSimilarityFunction a b) (topObjectProperty a b))
(if (hasDistinctValue a b) (topObjectProperty a b))
(if (hasDistributionParameter a b) (topObjectProperty a b))
(if (hasDualForm a b) (topObjectProperty a b))
(if (hasEvaluationFunction a b) (topObjectProperty a b))
(if (hasFeature a b) (topObjectProperty a b))
(if (hasFeatureEvaluator a b) (topObjectProperty a b))
(if (hasFeatureTestEvaluator a b) (topObjectProperty a b))
(if (hasFirstSubprocess a b) (topObjectProperty a b))
(if (hasHypothesisComplexityControlStrategy a
                                            b) (topObjectProperty a b))
(if (hasHypothesisStructure a b) (topObjectProperty a b))
(if (hasInput a b) (topObjectProperty a b))
(if (hasInstance a b) (topObjectProperty a b))
(if (hasKernelFunction a b) (topObjectProperty a b))
(if (hasLeafPredictor a b) (topObjectProperty a b))
(if (hasMainTable a b) (topObjectProperty a b))
(if (hasMember a b) (topObjectProperty a b))
(if (hasModalValue a b) (topObjectProperty a b))
(if (hasModelComplexityMeasure a b) (topObjectProperty a b))
(if (hasObjectiveFunction a b) (topObjectProperty a b))
(if (hasOptimalityLevel a b) (topObjectProperty a b))
(if (hasOptimizationGoal a b) (topObjectProperty a b))
(if (hasOptimizationProblem a b) (topObjectProperty a b))
(if (hasOptimizationStrategy a b) (topObjectProperty a b))
(if (hasOutput a b) (topObjectProperty a b))
(if (hasParameter a b) (topObjectProperty a b))
(if (hasParameterRole a b) (topObjectProperty a b))
(if (hasParameterSetting a b) (topObjectProperty a b))
(if (hasPart a b) (topObjectProperty a b))
(if (hasPerformanceComponent a b) (topObjectProperty a b))
(if (hasPostprocessor a b) (topObjectProperty a b))
(if (hasPreprocessor a b) (topObjectProperty a b))
(if (hasRecoveryOfPursuit a b) (topObjectProperty a b))
(if (hasRelationalOperator a b) (topObjectProperty a b))
(if (hasScopeOfSelection a b) (topObjectProperty a b))
(if (hasSearchDirection a b) (topObjectProperty a b))
(if (hasSearchGuidance a b) (topObjectProperty a b))
(if (hasSelfTunedHyperParameter a b) (topObjectProperty a b))
(if (hasSimilarityFunction a b) (topObjectProperty a b))
(if (hasSink a b) (topObjectProperty a b))
(if (hasSource a b) (topObjectProperty a b))
(if (hasStopCriterion a b) (topObjectProperty a b))
(if (hasSubprocess a b) (topObjectProperty a b))
(if (hasTable a b) (topObjectProperty a b))
(if (hasTableFormat a b) (topObjectProperty a b))
(if (hasTargetFeature a b) (topObjectProperty a b))
(if (hasTargetLearner a b) (topObjectProperty a b))
(if (hasUncertaintyLevel a b) (topObjectProperty a b))
(if (hasValueDomain a b) (topObjectProperty a b))
(if (hasVariable a b) (topObjectProperty a b))
(if (implements a b) (topObjectProperty a b))
(if (inDMSoftware a b) (topObjectProperty a b))
(if (interactsWithLearnerAs a b) (topObjectProperty a b))
(if (isComponentOf a b) (topObjectProperty a b))
(if (isImplementedBy a b) (topObjectProperty a b))
(if (isParameterOf a b) (topObjectProperty a b))
(if (isPartOf a b) (topObjectProperty a b))
(if (isSpecifiedInputOf a b) (topObjectProperty a b))
(if (isSpecifiedOutputOf a b) (topObjectProperty a b))
(if (isSubprocessOf a b) (topObjectProperty a b))
(if (isSubsampleOf a b) (topObjectProperty a b))
(if (isTargetFeatureOf a b) (topObjectProperty a b))
(if (realizes a b) (topObjectProperty a b))
(if (requiresDataType a b) (topObjectProperty a b))
(if (setsValueOf a b) (topObjectProperty a b))
(if (solves a b) (topObjectProperty a b))
(if (specifiesInputClass a b) (topObjectProperty a b))
(if (specifiesOutputClass a b) (topObjectProperty a b))
(if (step1 a b) (topObjectProperty a b))
(if (step2 a b) (topObjectProperty a b))
(if (abstract-location a b) (topObjectProperty a b))
(if (abstract-location-of a b) (topObjectProperty a b))
(if (atomic-part a b) (topObjectProperty a b))
(if (atomic-part-of a b) (topObjectProperty a b))
(if (boundary a b) (topObjectProperty a b))
(if (boundary-of a b) (topObjectProperty a b))
(if (exact-location a b) (topObjectProperty a b))
(if (exact-location-of a b) (topObjectProperty a b))
(if (generic-constituent a b) (topObjectProperty a b))
(if (generic-constituent-of a b) (topObjectProperty a b))
(if (generic-dependent a b) (topObjectProperty a b))
(if (generic-location a b) (topObjectProperty a b))
(if (generic-location-of a b) (topObjectProperty a b))
(if (generically-dependent-on a b) (topObjectProperty a b))
(if (has-quale a b) (topObjectProperty a b))
(if (has-quality a b) (topObjectProperty a b))
(if (immediate-relation a b) (topObjectProperty a b))
(if (immediate-relation-i a b) (topObjectProperty a b))
(if (inherent-in a b) (topObjectProperty a b))
(if (mediated-relation a b) (topObjectProperty a b))
(if (mediated-relation-i a b) (topObjectProperty a b))
(if (overlaps a b) (topObjectProperty a b))
(if (part a b) (topObjectProperty a b))
(if (part-of a b) (topObjectProperty a b))
(if (proper-part a b) (topObjectProperty a b))
(if (proper-part-of a b) (topObjectProperty a b))
(if (q-location a b) (topObjectProperty a b))
(if (q-location-of a b) (topObjectProperty a b))
(if (quale-of a b) (topObjectProperty a b))
(if (admits a b) (topObjectProperty a b))
(if (admitted-by a b) (topObjectProperty a b))
(if (co-participates-with a b) (topObjectProperty a b))
(if (component a b) (topObjectProperty a b))
(if (component-of a b) (topObjectProperty a b))
(if (covered-by a b) (topObjectProperty a b))
(if (covers a b) (topObjectProperty a b))
(if (d-used-by a b) (topObjectProperty a b))
(if (d-uses a b) (topObjectProperty a b))
(if (defined-by a b) (topObjectProperty a b))
(if (defines a b) (topObjectProperty a b))
(if (direct-predecessor a b) (topObjectProperty a b))
(if (direct-successor a b) (topObjectProperty a b))
(if (expanded-by a b) (topObjectProperty a b))
(if (expands a b) (topObjectProperty a b))
(if (expected-by a b) (topObjectProperty a b))
(if (expects a b) (topObjectProperty a b))
(if (exploited-by a b) (topObjectProperty a b))
(if (exploits a b) (topObjectProperty a b))
(if (expressed-by a b) (topObjectProperty a b))
(if (expresses a b) (topObjectProperty a b))
(if (has-method a b) (topObjectProperty a b))
(if (instantiated-by a b) (topObjectProperty a b))
(if (instantiates a b) (topObjectProperty a b))
(if (intensionally-referenced-by a b) (topObjectProperty a b))
(if (intensionally-references a b) (topObjectProperty a b))
(if (involved-in a b) (topObjectProperty a b))
(if (involves a b) (topObjectProperty a b))
(if (member a b) (topObjectProperty a b))
(if (member-of a b) (topObjectProperty a b))
(if (method-of a b) (topObjectProperty a b))
(if (ordered-by a b) (topObjectProperty a b))
(if (orders a b) (topObjectProperty a b))
(if (parametrized-by a b) (topObjectProperty a b))
(if (parametrizes a b) (topObjectProperty a b))
(if (predecessor a b) (topObjectProperty a b))
(if (referenced-by a b) (topObjectProperty a b))
(if (references a b) (topObjectProperty a b))
(if (refined-by a b) (topObjectProperty a b))
(if (refines a b) (topObjectProperty a b))
(if (sequenced-by a b) (topObjectProperty a b))
(if (sequences a b) (topObjectProperty a b))
(if (specialized-by a b) (topObjectProperty a b))
(if (specializes a b) (topObjectProperty a b))
(if (successor a b) (topObjectProperty a b))
(if (used-by a b) (topObjectProperty a b))
(if (uses a b) (topObjectProperty a b))
(if (value-for a b) (topObjectProperty a b))
(if (valued-by a b) (topObjectProperty a b))
(if (topObjectProperty a b) (topObjectProperty a b))
(if (ObsoleteObjectProperty a b) (not (bottomObjectProperty a b)))
(if (achieves a b) (not (bottomObjectProperty a b)))
(if (addresses a b) (not (bottomObjectProperty a b)))
(if (assumes a b) (not (bottomObjectProperty a b)))
(if (executes a b) (not (bottomObjectProperty a b)))
(if (handlesFeatureType a b) (not (bottomObjectProperty a b)))
(if (hasCombinationFunction a b) (not (bottomObjectProperty a b)))
(if (hasComplexityComponent a b) (not (bottomObjectProperty a b)))
(if (hasComponent a b) (not (bottomObjectProperty a b)))
(if (hasComponentStep a b) (not (bottomObjectProperty a b)))
(if (hasComputationalComplexityFunction a
                                        b) (not (bottomObjectProperty a b)))
(if (hasConstraint a b) (not (bottomObjectProperty a b)))
(if (hasDataType a b) (not (bottomObjectProperty a b)))
(if (hasDecisionBoundary a b) (not (bottomObjectProperty a b)))
(if (hasDecisionCriterion a b) (not (bottomObjectProperty a b)))
(if (hasDecisionRule a b) (not (bottomObjectProperty a b)))
(if (hasDecisionStrategy a b) (not (bottomObjectProperty a b)))
(if (hasDecisionTarget a b) (not (bottomObjectProperty a b)))
(if (hasDensityEstimation a b) (not (bottomObjectProperty a b)))
(if (hasDistanceFunction a b) (not (bottomObjectProperty a b)))
(if (hasDistanceOrSimilarityFunction a
                                     b) (not (bottomObjectProperty a b)))
(if (hasDistinctValue a b) (not (bottomObjectProperty a b)))
(if (hasDistributionParameter a b) (not (bottomObjectProperty a
                                                              b)))
(if (hasDualForm a b) (not (bottomObjectProperty a b)))
(if (hasEvaluationFunction a b) (not (bottomObjectProperty a b)))
(if (hasFeature a b) (not (bottomObjectProperty a b)))
(if (hasFeatureEvaluator a b) (not (bottomObjectProperty a b)))
(if (hasFeatureTestEvaluator a b) (not (bottomObjectProperty a b)))
(if (hasFirstSubprocess a b) (not (bottomObjectProperty a b)))
(if (hasHypothesisComplexityControlStrategy a
                                            b) (not (bottomObjectProperty a b)))
(if (hasHypothesisStructure a b) (not (bottomObjectProperty a b)))
(if (hasInput a b) (not (bottomObjectProperty a b)))
(if (hasInstance a b) (not (bottomObjectProperty a b)))
(if (hasKernelFunction a b) (not (bottomObjectProperty a b)))
(if (hasLeafPredictor a b) (not (bottomObjectProperty a b)))
(if (hasMainTable a b) (not (bottomObjectProperty a b)))
(if (hasMember a b) (not (bottomObjectProperty a b)))
(if (hasModalValue a b) (not (bottomObjectProperty a b)))
(if (hasModelComplexityMeasure a b) (not (bottomObjectProperty a
                                                               b)))
(if (hasObjectiveFunction a b) (not (bottomObjectProperty a b)))
(if (hasOptimalityLevel a b) (not (bottomObjectProperty a b)))
(if (hasOptimizationGoal a b) (not (bottomObjectProperty a b)))
(if (hasOptimizationProblem a b) (not (bottomObjectProperty a b)))
(if (hasOptimizationStrategy a b) (not (bottomObjectProperty a b)))
(if (hasOutput a b) (not (bottomObjectProperty a b)))
(if (hasParameter a b) (not (bottomObjectProperty a b)))
(if (hasParameterRole a b) (not (bottomObjectProperty a b)))
(if (hasParameterSetting a b) (not (bottomObjectProperty a b)))
(if (hasPart a b) (not (bottomObjectProperty a b)))
(if (hasPerformanceComponent a b) (not (bottomObjectProperty a b)))
(if (hasPostprocessor a b) (not (bottomObjectProperty a b)))
(if (hasPreprocessor a b) (not (bottomObjectProperty a b)))
(if (hasRecoveryOfPursuit a b) (not (bottomObjectProperty a b)))
(if (hasRelationalOperator a b) (not (bottomObjectProperty a b)))
(if (hasScopeOfSelection a b) (not (bottomObjectProperty a b)))
(if (hasSearchDirection a b) (not (bottomObjectProperty a b)))
(if (hasSearchGuidance a b) (not (bottomObjectProperty a b)))
(if (hasSelfTunedHyperParameter a b) (not (bottomObjectProperty a
                                                                b)))
(if (hasSimilarityFunction a b) (not (bottomObjectProperty a b)))
(if (hasSink a b) (not (bottomObjectProperty a b)))
(if (hasSource a b) (not (bottomObjectProperty a b)))
(if (hasStopCriterion a b) (not (bottomObjectProperty a b)))
(if (hasSubprocess a b) (not (bottomObjectProperty a b)))
(if (hasTable a b) (not (bottomObjectProperty a b)))
(if (hasTableFormat a b) (not (bottomObjectProperty a b)))
(if (hasTargetFeature a b) (not (bottomObjectProperty a b)))
(if (hasTargetLearner a b) (not (bottomObjectProperty a b)))
(if (hasUncertaintyLevel a b) (not (bottomObjectProperty a b)))
(if (hasValueDomain a b) (not (bottomObjectProperty a b)))
(if (hasVariable a b) (not (bottomObjectProperty a b)))
(if (implements a b) (not (bottomObjectProperty a b)))
(if (inDMSoftware a b) (not (bottomObjectProperty a b)))
(if (interactsWithLearnerAs a b) (not (bottomObjectProperty a b)))
(if (isComponentOf a b) (not (bottomObjectProperty a b)))
(if (isImplementedBy a b) (not (bottomObjectProperty a b)))
(if (isParameterOf a b) (not (bottomObjectProperty a b)))
(if (isPartOf a b) (not (bottomObjectProperty a b)))
(if (isSpecifiedInputOf a b) (not (bottomObjectProperty a b)))
(if (isSpecifiedOutputOf a b) (not (bottomObjectProperty a b)))
(if (isSubprocessOf a b) (not (bottomObjectProperty a b)))
(if (isSubsampleOf a b) (not (bottomObjectProperty a b)))
(if (isTargetFeatureOf a b) (not (bottomObjectProperty a b)))
(if (realizes a b) (not (bottomObjectProperty a b)))
(if (requiresDataType a b) (not (bottomObjectProperty a b)))
(if (setsValueOf a b) (not (bottomObjectProperty a b)))
(if (solves a b) (not (bottomObjectProperty a b)))
(if (specifiesInputClass a b) (not (bottomObjectProperty a b)))
(if (specifiesOutputClass a b) (not (bottomObjectProperty a b)))
(if (step1 a b) (not (bottomObjectProperty a b)))
(if (step2 a b) (not (bottomObjectProperty a b)))
(if (abstract-location a b) (not (bottomObjectProperty a b)))
(if (abstract-location-of a b) (not (bottomObjectProperty a b)))
(if (atomic-part a b) (not (bottomObjectProperty a b)))
(if (atomic-part-of a b) (not (bottomObjectProperty a b)))
(if (boundary a b) (not (bottomObjectProperty a b)))
(if (boundary-of a b) (not (bottomObjectProperty a b)))
(if (exact-location a b) (not (bottomObjectProperty a b)))
(if (exact-location-of a b) (not (bottomObjectProperty a b)))
(if (generic-constituent a b) (not (bottomObjectProperty a b)))
(if (generic-constituent-of a b) (not (bottomObjectProperty a b)))
(if (generic-dependent a b) (not (bottomObjectProperty a b)))
(if (generic-location a b) (not (bottomObjectProperty a b)))
(if (generic-location-of a b) (not (bottomObjectProperty a b)))
(if (generically-dependent-on a b) (not (bottomObjectProperty a
                                                              b)))
(if (has-quale a b) (not (bottomObjectProperty a b)))
(if (has-quality a b) (not (bottomObjectProperty a b)))
(if (immediate-relation a b) (not (bottomObjectProperty a b)))
(if (immediate-relation-i a b) (not (bottomObjectProperty a b)))
(if (inherent-in a b) (not (bottomObjectProperty a b)))
(if (mediated-relation a b) (not (bottomObjectProperty a b)))
(if (mediated-relation-i a b) (not (bottomObjectProperty a b)))
(if (overlaps a b) (not (bottomObjectProperty a b)))
(if (part a b) (not (bottomObjectProperty a b)))
(if (part-of a b) (not (bottomObjectProperty a b)))
(if (proper-part a b) (not (bottomObjectProperty a b)))
(if (proper-part-of a b) (not (bottomObjectProperty a b)))
(if (q-location a b) (not (bottomObjectProperty a b)))
(if (q-location-of a b) (not (bottomObjectProperty a b)))
(if (quale-of a b) (not (bottomObjectProperty a b)))
(if (admits a b) (not (bottomObjectProperty a b)))
(if (admitted-by a b) (not (bottomObjectProperty a b)))
(if (co-participates-with a b) (not (bottomObjectProperty a b)))
(if (component a b) (not (bottomObjectProperty a b)))
(if (component-of a b) (not (bottomObjectProperty a b)))
(if (covered-by a b) (not (bottomObjectProperty a b)))
(if (covers a b) (not (bottomObjectProperty a b)))
(if (d-used-by a b) (not (bottomObjectProperty a b)))
(if (d-uses a b) (not (bottomObjectProperty a b)))
(if (defined-by a b) (not (bottomObjectProperty a b)))
(if (defines a b) (not (bottomObjectProperty a b)))
(if (direct-predecessor a b) (not (bottomObjectProperty a b)))
(if (direct-successor a b) (not (bottomObjectProperty a b)))
(if (expanded-by a b) (not (bottomObjectProperty a b)))
(if (expands a b) (not (bottomObjectProperty a b)))
(if (expected-by a b) (not (bottomObjectProperty a b)))
(if (expects a b) (not (bottomObjectProperty a b)))
(if (exploited-by a b) (not (bottomObjectProperty a b)))
(if (exploits a b) (not (bottomObjectProperty a b)))
(if (expressed-by a b) (not (bottomObjectProperty a b)))
(if (expresses a b) (not (bottomObjectProperty a b)))
(if (has-method a b) (not (bottomObjectProperty a b)))
(if (instantiated-by a b) (not (bottomObjectProperty a b)))
(if (instantiates a b) (not (bottomObjectProperty a b)))
(if (intensionally-referenced-by a b) (not (bottomObjectProperty a
                                                                 b)))
(if (intensionally-references a b) (not (bottomObjectProperty a
                                                              b)))
(if (involved-in a b) (not (bottomObjectProperty a b)))
(if (involves a b) (not (bottomObjectProperty a b)))
(if (member a b) (not (bottomObjectProperty a b)))
(if (member-of a b) (not (bottomObjectProperty a b)))
(if (method-of a b) (not (bottomObjectProperty a b)))
(if (ordered-by a b) (not (bottomObjectProperty a b)))
(if (orders a b) (not (bottomObjectProperty a b)))
(if (parametrized-by a b) (not (bottomObjectProperty a b)))
(if (parametrizes a b) (not (bottomObjectProperty a b)))
(if (predecessor a b) (not (bottomObjectProperty a b)))
(if (referenced-by a b) (not (bottomObjectProperty a b)))
(if (references a b) (not (bottomObjectProperty a b)))
(if (refined-by a b) (not (bottomObjectProperty a b)))
(if (refines a b) (not (bottomObjectProperty a b)))
(if (sequenced-by a b) (not (bottomObjectProperty a b)))
(if (sequences a b) (not (bottomObjectProperty a b)))
(if (specialized-by a b) (not (bottomObjectProperty a b)))
(if (specializes a b) (not (bottomObjectProperty a b)))
(if (successor a b) (not (bottomObjectProperty a b)))
(if (used-by a b) (not (bottomObjectProperty a b)))
(if (uses a b) (not (bottomObjectProperty a b)))
(if (value-for a b) (not (bottomObjectProperty a b)))
(if (valued-by a b) (not (bottomObjectProperty a b)))
(if (topObjectProperty a b) (not (bottomObjectProperty a b)))
(forall (a) (iff (AssociationDiscoveryAlgorithm a) (and (PatternDiscoveryAlgorithm a)
                                                        (exists (b) (and (addresses a
                                                                                    b)
                                                                         (AssociationDiscoveryTask b))))))
(forall (a) (iff (BlindSearch a) (and (SearchStrategy a)
                                      (hasSearchGuidance a Blind))))
(forall (a) (iff (CategoricalLabeledDataSet a) (and (LabeledDataSet a)
                                                    (exists (b) (and (hasMainTable a
                                                                                   b)
                                                                     (and (LabeledDataTable b)
                                                                          (exists (c) (and (hasTargetFeature b
                                                                                                             c)
                                                                                           (CategoricalFeature c)))))))))
(forall (a) (iff (ClassificationAlgorithmCharacteristic a) (and (AlgorithmCharacteristic a)
                                                                (exists (b) (and (inherent-in a
                                                                                              b)
                                                                                 (ClassificationModelingAlgorithm b))))))
(forall (a) (iff (ClassificationModelingAlgorithm a) (and (ModelingAlgorithm a)
                                                          (exists (b) (and (addresses a
                                                                                      b)
                                                                           (ClassificationModelingTask b))))))
(forall (a) (iff (ClassificationModelingOperator a) (and (DM-Operator a)
                                                         (exists (b) (and (implements a
                                                                                      b)
                                                                          (ClassificationModelingAlgorithm b))))))
(forall (a) (iff (ClassificationRuleInductionAlgorithmCharacteristic a) (and (AlgorithmCharacteristic a)
                                                                             (exists (b) (and (inherent-in a
                                                                                                           b)
                                                                                              (ClassificationRuleInductionAlgorithm b))))))
(forall (a) (iff (ClassificationTreeInductionAlgorithmCharacteristic a) (and (AlgorithmCharacteristic a)
                                                                             (exists (b) (and (inherent-in a
                                                                                                           b)
                                                                                              (ClassificationTreeInductionAlgorithm b))))))
(forall (a) (iff (ClusteringAlgorithmCharacteristic a) (and (AlgorithmCharacteristic a)
                                                            (exists (b) (and (inherent-in a
                                                                                          b)
                                                                             (ClusteringModelingAlgorithm b))))))
(forall (a) (iff (ClusteringModelingAlgorithm a) (and (ModelingAlgorithm a)
                                                      (exists (b) (and (addresses a
                                                                                  b)
                                                                       (ClusteringModelingTask b))))))
(forall (a) (iff (ClusteringModelingOperator a) (and (DM-Operator a)
                                                     (exists (b) (and (implements a
                                                                                  b)
                                                                      (ClusteringModelingAlgorithm b))))))
(forall (a) (iff (ContinuousLabeledDataSet a) (and (LabeledDataSet a)
                                                   (exists (b) (and (hasMainTable a
                                                                                  b)
                                                                    (and (LabeledDataTable b)
                                                                         (exists (c) (and (hasTargetFeature b
                                                                                                            c)
                                                                                          (ContinuousFeature c)))))))))
(forall (a) (iff (DataProcessingAlgorithm a) (and (DM-Algorithm a)
                                                  (exists (b) (and (addresses a
                                                                              b)
                                                                   (DataProcessingTask b))))))
(forall (a) (iff (DataProcessingAlgorithmCharacteristic a) (and (AlgorithmCharacteristic a)
                                                                (exists (b) (and (inherent-in a
                                                                                              b)
                                                                                 (DataProcessingAlgorithm b))))))
(forall (a) (iff (DataProcessingOperator a) (and (DM-Operator a)
                                                 (exists (b) (and (implements a
                                                                              b)
                                                                  (DataProcessingAlgorithm b))))))
(forall (a) (iff (DataProcessingWorkflow a) (and (Workflow a)
                                                 (exists (b) (and (addresses a
                                                                             b)
                                                                  (DataProcessingTask b))))))
(forall (a) (iff (DecisionTreeModel a) (and (LogicalModel a)
                                            (exists (b) (and (hasHypothesisStructure a
                                                                                     b)
                                                             (DecisionTree b))))))
(forall (a) (iff (DependencyModelingAlgorithm a) (and (ModelingAlgorithm a)
                                                      (exists (b) (and (addresses a
                                                                                  b)
                                                                       (DependencyModelingTask b))))))
(forall (a) (iff (DescriptiveModelingAlgorithm a) (and (ModelingAlgorithm a)
                                                       (exists (b) (and (addresses a
                                                                                   b)
                                                                        (DescriptiveModelingTask b))))))
(forall (a) (iff (DeterministicSearch a) (and (SearchStrategy a)
                                              (hasUncertaintyLevel a
                                                                   Deterministic))))
(forall (a) (iff (DiscriminantAnalysisAlgorithm a) (and (ClassificationModelingAlgorithm a)
                                                        (exists (b) (and (specifiesOutputClass a
                                                                                               b)
                                                                         (DiscriminantModelClass b))))))
(forall (a) (iff (DiscriminantFunctionAlgorithm a) (and (ClassificationModelingAlgorithm a)
                                                        (exists (b) (and (specifiesOutputClass a
                                                                                               b)
                                                                         (DiscriminantFunctionModelClass b))))))
(forall (a) (iff (DiscriminativeAlgorithm a) (and (ClassificationModelingAlgorithm a)
                                                  (exists (b) (and (specifiesOutputClass a
                                                                                         b)
                                                                   (DiscriminativeModelClass b))))))
(forall (a) (iff (EmbeddedFSAlgorithm a) (and (FeatureSelectionAlgorithm a)
                                              (interactsWithLearnerAs a
                                                                      Embedded))))
(forall (a) (iff (EntropyBasedFSAlgorithm a) (and (FeatureSelectionAlgorithm a)
                                                  (exists (b) (and (hasFeatureEvaluator a
                                                                                        b)
                                                                   (EntropyBasedFWAlgorithm b))))))
(forall (a) (iff (FeatureDiscretizationAlgorithm a) (and (DataProcessingAlgorithm a)
                                                         (exists (b) (and (addresses a
                                                                                     b)
                                                                          (FeatureDiscretizationTask b))))))
(forall (a) (iff (FeatureDiscretizationOperator a) (and (DM-Operator a)
                                                        (exists (b) (and (implements a
                                                                                     b)
                                                                         (FeatureDiscretizationAlgorithm b))))))
(forall (a) (iff (FeatureExtractionAlgorithm a) (and (DataProcessingAlgorithm a)
                                                     (exists (b) (and (addresses a
                                                                                 b)
                                                                      (FeatureExtractionTask b))))))
(forall (a) (iff (FeatureExtractionAlgorithmCharacteristic a) (and (AlgorithmCharacteristic a)
                                                                   (exists (b) (and (inherent-in a
                                                                                                 b)
                                                                                    (FeatureExtractionAlgorithm b))))))
(forall (a) (iff (FeatureExtractionOperator a) (and (DM-Operator a)
                                                    (exists (b) (and (implements a
                                                                                 b)
                                                                     (FeatureExtractionAlgorithm b))))))
(forall (a) (iff (FeatureRankingAlgorithm a) (and (DataProcessingAlgorithm a)
                                                  (exists (b) (and (addresses a
                                                                              b)
                                                                   (FeatureRankingTask b))))))
(forall (a) (iff (FeatureSelectionAlgorithm a) (and (DataProcessingAlgorithm a)
                                                    (exists (b) (and (addresses a
                                                                                b)
                                                                     (FeatureSelectionTask b))))))
(forall (a) (iff (FeatureSelectionOperator a) (and (DM-Operator a)
                                                   (exists (b) (and (implements a
                                                                                b)
                                                                    (FeatureSelectionAlgorithm b))))))
(forall (a) (iff (FeatureSubsetWeightingAlgorithm a) (and (FeatureWeightingAlgorithm a)
                                                          (has-quality a
                                                                       FeatureSubsetEvaluationTarget))))
(forall (a) (iff (FeatureTransformationAlgorithm a) (and (DataProcessingAlgorithm a)
                                                         (exists (b) (and (addresses a
                                                                                     b)
                                                                          (FeatureTransformationTask b))))))
(forall (a) (iff (FeatureWeightingAlgorithm a) (and (DataProcessingAlgorithm a)
                                                    (exists (b) (and (addresses a
                                                                                b)
                                                                     (FeatureWeightingTask b))))))
(forall (a) (iff (FeatureWeightingAlgorithmCharacteristic a) (and (AlgorithmCharacteristic a)
                                                                  (exists (b) (and (inherent-in a
                                                                                                b)
                                                                                   (FeatureWeightingAlgorithm b))))))
(forall (a) (iff (FeatureWeightingOperator a) (and (DM-Operator a)
                                                   (exists (b) (and (implements a
                                                                                b)
                                                                    (FeatureWeightingAlgorithm b))))))
(forall (a) (iff (FilterFSAlgorithm a) (and (FeatureSelectionAlgorithm a)
                                            (interactsWithLearnerAs a Filter))))
(forall (a) (iff (GenerativeAlgorithm a) (and (ClassificationModelingAlgorithm a)
                                              (exists (b) (and (specifiesOutputClass a
                                                                                     b)
                                                               (GenerativeModelClass b))))))
(forall (a) (iff (GreedySearch a) (and (SearchStrategy a)
                                       (hasRecoveryOfPursuit a Irrevocable)
                                       (hasScopeOfSelection a Local))))
(forall (a) (iff (HierarchicalClusteringAlgorithm a) (and (ClusteringModelingAlgorithm a)
                                                          (exists (b) (and (specifiesOutputClass a
                                                                                                 b)
                                                                           (HierarchicalClusteringModelClass b))))))
(forall (a) (iff (HypothesisApplicationAlgorithm a) (and (DM-Algorithm a)
                                                         (exists (b) (and (addresses a
                                                                                     b)
                                                                          (HypothesisApplicationTask b))))))
(forall (a) (iff (HypothesisProcessingAlgorithm a) (and (DM-Algorithm a)
                                                        (exists (b) (and (addresses a
                                                                                    b)
                                                                         (HypothesisProcessingTask b))))))
(forall (a) (iff (IO-Object a) (and (non-physical-endurant a)
                                    (or (DM-Data a) (DM-Hypothesis a)))))
(forall (a) (iff (InductionAlgorithm a) (and (DM-Algorithm a)
                                             (exists (b) (and (addresses a b)
                                                              (InductionTask b))))))
(forall (a) (iff (InductionAlgorithmCharacteristic a) (and (AlgorithmCharacteristic a)
                                                           (exists (b) (and (inherent-in a
                                                                                         b)
                                                                            (InductionAlgorithm b))))))
(forall (a) (iff (InductionWorkflow a) (and (Workflow a)
                                            (exists (b) (and (addresses a b)
                                                             (ModelingTask b))))))
(forall (a) (iff (InformedSearch a) (and (SearchStrategy a)
                                         (hasSearchGuidance a Informed))))
(forall (a) (iff (LabeledDataSet a) (and (DataSet a)
                                         (exists (b) (and (hasMainTable a b)
                                                          (LabeledDataTable b))))))
(forall (a) (iff (LearnerBasedFWAlgorithm a) (and (FeatureWeightingAlgorithm a)
                                                  (or (MultivariateLearnerBasedFWAlgorithm a)
                                                      (UnivariateLearnerBasedFWAlgorithm a)))))
(forall (a) (iff (LearnerFreeFWAlgorithm a) (and (FeatureWeightingAlgorithm a)
                                                 (or (MultivariateLearnerFreeFWAlgorithm a)
                                                     (UnivariateLearnerFreeFWAlgorithm a)))))
(forall (a) (iff (LinearModel a) (and (DiscriminantFunctionModel a)
                                      (hasHypothesisStructure a
                                                              LinearCombinationOfFeatures))))
(forall (a) (iff (LogicalModel a) (and (DiscriminantFunctionModel a)
                                       (exists (b) (and (hasHypothesisStructure a
                                                                                b)
                                                        (LogicalStructure b))))))
(forall (a) (iff (MathematicalModel a) (and (DiscriminantFunctionModel a)
                                            (exists (b) (and (hasHypothesisStructure a
                                                                                     b)
                                                             (MathematicalStructure b))))))
(forall (a) (iff (MissingValueImputationAlgorithm a) (and (DataProcessingAlgorithm a)
                                                          (exists (b) (and (addresses a
                                                                                      b)
                                                                           (MissingValueImputationTask b))))))
(forall (a) (iff (ModelAggregationAlgorithm a) (and (ModelProcessingAlgorithm a)
                                                    (exists (b) (and (addresses a
                                                                                b)
                                                                     (ModelAggregationTask b))))))
(forall (a) (iff (ModelApplicationAlgorithm a) (and (HypothesisApplicationAlgorithm a)
                                                    (exists (b) (and (addresses a
                                                                                b)
                                                                     (ModelApplicationTask b))))))
(forall (a) (iff (ModelApplicationOperator a) (and (DM-Operator a)
                                                   (exists (b) (and (implements a
                                                                                b)
                                                                    (ModelApplicationAlgorithm b))))))
(forall (a) (iff (ModelApplicationWorkflow a) (and (Workflow a)
                                                   (exists (b) (and (addresses a
                                                                               b)
                                                                    (ModelApplicationTask b))))))
(forall (a) (iff (ModelEvaluationAlgorithm a) (and (DM-Algorithm a)
                                                   (exists (b) (and (addresses a
                                                                               b)
                                                                    (ModelEvaluationTask b))))))
(forall (a) (iff (ModelEvaluationOperator a) (and (DM-Operator a)
                                                  (exists (b) (and (implements a
                                                                               b)
                                                                   (ModelEvaluationAlgorithm b))))))
(forall (a) (iff (ModelProcessingAlgorithm a) (and (HypothesisProcessingAlgorithm a)
                                                   (exists (b) (and (addresses a
                                                                               b)
                                                                    (ModelProcessingTask b))))))
(forall (a) (iff (ModelProcessingOperator a) (and (DM-Operator a)
                                                  (exists (b) (and (implements a
                                                                               b)
                                                                   (ModelProcessingAlgorithm b))))))
(forall (a) (iff (ModelProcessingWorkflow a) (and (Workflow a)
                                                  (exists (b) (and (addresses a
                                                                              b)
                                                                   (ModelProcessingTask b))))))
(forall (a) (iff (ModelPruningAlgorithm a) (and (ModelProcessingAlgorithm a)
                                                (exists (b) (and (addresses a b)
                                                                 (ModelPruningTask b))))))
(forall (a) (iff (ModelingAlgorithm a) (and (InductionAlgorithm a)
                                            (exists (b) (and (addresses a b)
                                                             (ModelingTask b))))))
(forall (a) (iff (ModelingOperator a) (and (DM-Operator a)
                                           (exists (b) (and (implements a b)
                                                            (ModelingAlgorithm b))))))
(forall (a) (iff (MultivariateFSAlgorithm a) (and (FeatureSelectionAlgorithm a)
                                                  (exists (b) (and (hasFeatureEvaluator a
                                                                                        b)
                                                                   (MultivariateFWAlgorithm b))))))
(forall (a) (iff (MultivariateFWAlgorithm a) (and (FeatureWeightingAlgorithm a)
                                                  (has-quality a
                                                               MultivariateFeatureEvaluationContext))))
(forall (a) (iff (MultivariateLearnerBasedFWAlgorithm a) (and (FeatureWeightingAlgorithm a)
                                                              (exists (b) (and (hasTargetLearner a
                                                                                                 b)
                                                                               (PredictiveModelingAlgorithm b)))
                                                              (has-quality a
                                                                           MultivariateFeatureEvaluationContext))))
(forall (a) (iff (MultivariateLearnerFreeFWAlgorithm a) (and (FeatureWeightingAlgorithm a)
                                                             (hasTargetLearner a
                                                                               None)
                                                             (has-quality a
                                                                          MultivariateFeatureEvaluationContext))))
(forall (a) (iff (PartitionalClusteringAlgorithm a) (and (ClusteringModelingAlgorithm a)
                                                         (exists (b) (and (specifiesOutputClass a
                                                                                                b)
                                                                          (PartitionalClusteringModelClass b))))))
(forall (a) (iff (PatternDiscoveryAlgorithm a) (and (InductionAlgorithm a)
                                                    (exists (b) (and (addresses a
                                                                                b)
                                                                     (PatternDiscoveryTask b))))))
(forall (a) (iff (PatternProcessingAlgorithm a) (and (HypothesisProcessingAlgorithm a)
                                                     (exists (b) (and (addresses a
                                                                                 b)
                                                                      (PatternSetProcessingTask b))))))
(forall (a) (iff (PatternPruningAlgorithm a) (and (PatternProcessingAlgorithm a)
                                                  (exists (b) (and (addresses a
                                                                              b)
                                                                   (PatternPruningTask b))))))
(forall (a) (iff (PatternSetApplicationAlgorithm a) (and (HypothesisApplicationAlgorithm a)
                                                         (exists (b) (and (addresses a
                                                                                     b)
                                                                          (PatternSetApplicationTask b))))))
(forall (a) (iff (PatternSetBasedClassifModelingAlgorithm a) (and (ClassificationModelingAlgorithm a)
                                                                  (exists (b) (and (hasComponentStep a
                                                                                                     b)
                                                                                   (PatternDiscoveryAlgorithm b))))))
(forall (a) (iff (PatternSetBasedClassificationModel a) (and (ClassificationModel a)
                                                             (exists (b) (and (hasHypothesisStructure a
                                                                                                      b)
                                                                              (PatternSetBasedModelStructure b))))))
(forall (a) (iff (PredictiveModelingAlgorithm a) (and (ModelingAlgorithm a)
                                                      (exists (b) (and (addresses a
                                                                                  b)
                                                                       (PredictiveModelingTask b))))))
(forall (a) (iff (PredictiveModelingAlgorithmCharacteristic a) (and (AlgorithmCharacteristic a)
                                                                    (exists (b) (and (inherent-in a
                                                                                                  b)
                                                                                     (PredictiveModelingAlgorithm b))))))
(forall (a) (iff (ProbabilityEstimationAlgorithm a) (and (ModelingAlgorithm a)
                                                         (exists (b) (and (addresses a
                                                                                     b)
                                                                          (ProbabilityEstimationTask b))))))
(forall (a) (iff (PropositionalDataSet a) (and (DataSet a)
                                               (and (exists (b) (and (DataTable b)
                                                                     (hasTable a
                                                                               b)))
                                                    (exists (b
                                                             c) (if (and (hasTable a
                                                                                   b)
                                                                         (hasTable a
                                                                                   c)
                                                                         (DataTable b)) (= b c)))))))
(forall (a) (iff (RegressionModelingAlgorithm a) (and (ModelingAlgorithm a)
                                                      (exists (b) (and (addresses a
                                                                                  b)
                                                                       (RegressionModelingTask b))))))
(forall (a) (iff (RegressionModelingOperator a) (and (DM-Operator a)
                                                     (exists (b) (and (implements a
                                                                                  b)
                                                                      (RegressionModelingAlgorithm b))))))
(forall (a) (iff (RelationalDataSet a) (and (DataSet a)
                                            (exists (b c) (and (not (= b c))
                                                               (DataTable b)
                                                               (DataTable c)
                                                               (hasTable a b)
                                                               (hasTable a
                                                                         c))))))
(forall (a) (iff (RuleEnsembleInductionAlgorithm a) (and (ClassificationRuleInductionAlgorithm a)
                                                         (has-quality a
                                                                      SampleHandlingThruBoostedWeighting))))
(forall (a) (iff (RuleSetModel a) (and (LogicalModel a)
                                       (exists (b) (and (hasHypothesisStructure a
                                                                                b)
                                                        (PropositionalRuleSet b))))))
(forall (a) (iff (SemiSupervisedInductionAlgorithm a) (and (InductionAlgorithm a)
                                                           (exists (b) (and (specifiesInputClass a
                                                                                                 b)
                                                                            (LabeledDataSetClass b)))
                                                           (exists (b) (and (specifiesInputClass a
                                                                                                 b)
                                                                            (UnlabeledDataSetClass b))))))
(forall (a) (iff (SetCoveringAlgorithm a) (and (ClassificationRuleInductionAlgorithm a)
                                               (has-quality a
                                                            SampleHandlingThruSetCovering))))
(forall (a) (iff (SingleFeatureWeightingAlgorithm a) (and (FeatureWeightingAlgorithm a)
                                                          (has-quality a
                                                                       SingleFeatureEvaluationTarget))))
(forall (a) (iff (StochasticSearch a) (and (SearchStrategy a)
                                           (hasUncertaintyLevel a Stochastic))))
(forall (a) (iff (StructuredLabeledDataSet a) (and (LabeledDataSet a)
                                                   (exists (b) (and (hasMainTable a
                                                                                  b)
                                                                    (and (LabeledDataTable b)
                                                                         (exists (c) (and (hasTargetFeature b
                                                                                                            c)
                                                                                          (StructuredFeature c)))))))))
(forall (a) (iff (StructuredPredictionModelingAlgorithm a) (and (ModelingAlgorithm a)
                                                                (exists (b) (and (addresses a
                                                                                            b)
                                                                                 (StructuredPredictionModelingTask b))))))
(forall (a) (iff (SupervisedInductionAlgorithm a) (and (InductionAlgorithm a)
                                                       (exists (b) (and (specifiesInputClass a
                                                                                             b)
                                                                        (LabeledDataSetClass b))))))
(forall (a) (iff (TargetFeature a) (and (Feature a)
                                        (exists (b) (and (isTargetFeatureOf a b)
                                                         (LabeledDataTable b))))))
(forall (a) (iff (TreeBasedRuleInductionAlgorithm a) (and (ClassificationRuleInductionAlgorithm a)
                                                          (has-quality a
                                                                       SampleHandlingThruRecursivePartitioning))))
(forall (a) (iff (UnivariateFSAlgorithm a) (and (FeatureSelectionAlgorithm a)
                                                (exists (b) (and (hasFeatureEvaluator a
                                                                                      b)
                                                                 (UnivariateFWAlgorithm b))))))
(forall (a) (iff (UnivariateFWAlgorithm a) (and (FeatureWeightingAlgorithm a)
                                                (has-quality a
                                                             UnivariateFeatureEvaluationContext))))
(forall (a) (iff (UnivariateLearnerBasedFWAlgorithm a) (and (FeatureWeightingAlgorithm a)
                                                            (exists (b) (and (hasTargetLearner a
                                                                                               b)
                                                                             (PredictiveModelingAlgorithm b)))
                                                            (has-quality a
                                                                         UnivariateFeatureEvaluationContext))))
(forall (a) (iff (UnivariateLearnerFreeFWAlgorithm a) (and (FeatureWeightingAlgorithm a)
                                                           (hasTargetLearner a
                                                                             None)
                                                           (has-quality a
                                                                        UnivariateFeatureEvaluationContext))))
(forall (a) (iff (UnlabeledDataSet a) (and (DataSet a)
                                           (exists (b) (and (hasMainTable a b)
                                                            (UnlabeledDataTable b))))))
(forall (a) (iff (UnsupervisedInductionAlgorithm a) (and (InductionAlgorithm a)
                                                         (exists (b) (and (specifiesInputClass a
                                                                                               b)
                                                                          (UnlabeledDataSetClass b))))))
(forall (a) (iff (WrapperFSAlgorithm a) (and (FeatureSelectionAlgorithm a)
                                             (interactsWithLearnerAs a
                                                                     Wrapper))))
(forall (a) (iff (SubgroupDiscoveryAlgorithm a) (and (PatternDiscoveryAlgorithm a)
                                                     (exists (b) (and (addresses a
                                                                                 b)
                                                                      (SubgroupDiscoveryTask b))))))
(forall (a) (iff (quale a) (and (region a)
                                (exists (b) (and (atomic-part-of a b)
                                                 (region b))))))
(forall (a) (iff (quality-space a) (and (region a)
                                        (forall (b) (if (overlaps a
                                                                  b) (not (quality-space b)))))))
(forall (a) (iff (spatio-temporal-particular a) (and (particular a)
                                                     (or (endurant a)
                                                         (perdurant a)
                                                         (quality a)))))
(forall (a) (iff (activity a) (and (action a)
                                   (exists (b) (and (generically-dependent-on a
                                                                              b)
                                                    (plan b)))
                                   (exists (b) (and (part a b) (action b)))
                                   (exists (b) (and (sequenced-by a b)
                                                    (task b))))))
(forall (a) (iff (collection a) (and (non-agentive-social-object a)
                                     (exists (b) (and (covered-by a b)
                                                      (role b))))))
(forall (a) (if (AverageAbsoluteFeatureCorrelation a) (DataSetCharacteristic a)))
(forall (a) (if (AverageAbsoluteFeatureCorrelation a) (and (exists (b) (and (and (quale b)
                                                                                 (and (exists (c) (and (float c)
                                                                                                       (hasDataValue b
                                                                                                                     c)))
                                                                                      (exists (c
                                                                                               d) (if (and (hasDataValue b
                                                                                                                         c)
                                                                                                           (hasDataValue b
                                                                                                                         d)
                                                                                                           (float c)) (= c d)))))
                                                                            (has-quale a
                                                                                       b)))
                                                           (exists (b
                                                                    c) (if (and (has-quale a
                                                                                           b)
                                                                                (has-quale a
                                                                                           c)
                                                                                (and (quale b)
                                                                                     (and (exists (c) (and (float c)
                                                                                                           (hasDataValue b
                                                                                                                         c)))
                                                                                          (exists (c
                                                                                                   d) (if (and (hasDataValue b
                                                                                                                             c)
                                                                                                               (hasDataValue b
                                                                                                                             d)
                                                                                                               (float c)) (= c d)))))) (= b c))))))
(forall (a) (if (AverageCategoricalFeaturePairsMutualInformation a) (DataSetCharacteristic a)))
(forall (a) (if (AverageFeatureEntropy a) (DataSetCharacteristic a)))
(forall (a) (if (AverageMutualInformation a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (BetweenGroupsSumSquaresCrossProducts a) (DataSetCharacteristic a)))
(forall (a) (if (CanonicalCorrelationBestLinearCombination a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (CategoricalFeatureCharacteristic a) (FeatureCharacteristic a)))
(forall (a) (if (CategoricalLabeledDataSetCharacteristic a) (LabeledDataSetCharacteristic a)))
(forall (a) (if (ClassAbsoluteFrequencies a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (ClassCovarianceMatrices a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (ClassEntropy a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (ClassRelativeFrequencies a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (ContinuousFeatureCharacteristic a) (FeatureCharacteristic a)))
(forall (a) (if (ContinuousLabeledDataSetCharacteristics a) (LabeledDataSetCharacteristic a)))
(forall (a) (if (DataCharacteristic a) (Characteristic a)))
(forall (a) (if (DataSetCharacteristic a) (DataCharacteristic a)))
(forall (a) (if (EigenValuesLinearDiscriminantFunctions a) (DataSetCharacteristic a)))
(forall (a) (if (ErrorRateOf1NNClassifier a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (ErrorRateOfLinearClassifierLP a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (FeatureCharacteristic a) (DataCharacteristic a)))
(forall (a) (if (FeatureCorrelation a) (ContinuousFeatureCharacteristic a)))
(forall (a) (if (FeatureEntropy a) (CategoricalFeatureCharacteristic a)))
(forall (a) (if (FeatureFrequentValue a) (CategoricalFeatureCharacteristic a)))
(forall (a) (if (FeatureHOutlier a) (ContinuousFeatureCharacteristic a)))
(forall (a) (if (FeatureMaximumValue a) (ContinuousFeatureCharacteristic a)))
(forall (a) (if (FeatureMeanValue a) (ContinuousFeatureCharacteristic a)))
(forall (a) (if (FeatureMinimumValue a) (ContinuousFeatureCharacteristic a)))
(forall (a) (if (FeatureModalValue a) (CategoricalFeatureCharacteristic a)))
(forall (a) (if (FeatureMutualInformationPerClass a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (FeatureRareValue a) (CategoricalFeatureCharacteristic a)))
(forall (a) (if (FeatureStandardDeviation a) (ContinuousFeatureCharacteristic a)))
(forall (a) (if (FeatureValueFrequencies a) (CategoricalFeatureCharacteristic a)))
(forall (a) (if (FeatureValueFrequenciesPerClass a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (FeatureVeryFrequentValue a) (CategoricalFeatureCharacteristic a)))
(forall (a) (if (FeatureVeryRareValue a) (CategoricalFeatureCharacteristic a)))
(forall (a) (if (LabeledDataSetCharacteristic a) (DataSetCharacteristic a)))
(forall (a) (if (MaximumFeatureEfficiency a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (MaximumFishersDiscriminantRatio a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (MinimumSumOfErrorDistanceByLP a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (NoiseSignalRatio a) (DataSetCharacteristic a)))
(forall (a) (if (NonLinearityOf1NNClassifier a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (NonLinearityOfLinearClassifierLP a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (NumberOfCategoricalFeatures a) (DataSetCharacteristic a)))
(forall (a) (if (NumberOfClasses a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (NumberOfContinuousFeatures a) (DataSetCharacteristic a)))
(forall (a) (if (NumberOfDistinctValues a) (CategoricalFeatureCharacteristic a)))
(forall (a) (if (NumberOfFeatures a) (DataSetCharacteristic a)))
(forall (a) (if (NumberOfHOutliers a) (DataSetCharacteristic a)))
(forall (a) (if (NumberOfInstances a) (DataSetCharacteristic a)))
(forall (a) (if (NumberOfInstancesPerFeature a) (DataSetCharacteristic a)))
(forall (a) (if (NumberOfMissingValues a) (FeatureCharacteristic a)))
(forall (a) (if (ProportionOfBoundaryPoints a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (ProportionOfCategoricalFeatures a) (DataSetCharacteristic a)))
(forall (a) (if (ProportionOfHOutliers a) (DataSetCharacteristic a)))
(forall (a) (if (ProportionOfMissingValues a) (FeatureCharacteristic a)))
(forall (a) (if (ProportionPointsWithRetainedAdherence a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (RatioOfAverageIntraInterDistances a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (TotalSumSquaresCrossProducts a) (DataSetCharacteristic a)))
(forall (a) (if (VolumeOfOverlapRegion a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (WithinGroupsSumSquaresCrossProducts a) (DataSetCharacteristic a)))
(forall (a) (if (DistanceCharacterizationBetweenClusters a) (AlgorithmCharacteristic a)))
(forall (a) (if (AlgorithmAssumption a) (non-physical-endurant a)))
(forall (a) (if (AlgorithmCharacteristic a) (Characteristic a)))
(forall (a) (if (AlgorithmParameter a) (Parameter a)))
(forall (a) (if (AlgorithmParameter a) (and (exists (b) (and (string b)
                                                             (hasParameterKey a
                                                                              b)))
                                            (exists (b
                                                     c) (if (and (hasParameterKey a
                                                                                  b)
                                                                 (hasParameterKey a
                                                                                  c)
                                                                 (string b)) (= b c))))))
(forall (a) (if (AssociationDiscoveryAlgorithm a) (has-quality a
                                                               EagerLearningPolicy)))
(forall (a) (if (AssociationDiscoveryTask a) (PatternDiscoveryTask a)))
(forall (a) (if (AssociationDiscoveryTask a) (exists (b) (and (specifiesInputClass a
                                                                                   b)
                                                              (UnlabeledDataSetClass b)))))
(forall (a) (if (AssociationDiscoveryTask a) (exists (b) (and (specifiesOutputClass a
                                                                                    b)
                                                              (AssociationPatternSetClass b)))))
(forall (a) (if (AssociationPatternSet a) (DM-PatternSet a)))
(forall (a) (if (AssociationPatternSetClass a) (DM-PatternSetClass a)))
(forall (a) (if (AttributeValueTableFormat a) (TableFormat a)))
(forall (a) (if (AverageLinkModel a) (HierarchicalClusteringModel a)))
(forall (a) (if (AverageReliefFeatureWeight a) (CategoricalLabeledDataSetCharacteristic a)))
(forall (a) (if (AverageSVMFeatureWeight a) (LabeledDataSetCharacteristic a)))
(forall (a) (if (BaselineClassifier a) (ClassificationModel a)))
(forall (a) (if (BaselineRegressor a) (RegressionModel a)))
(forall (a) (if (BayesNetAlgorithm a) (BayesianAlgorithm a)))
(forall (a) (if (BayesNetModel a) (BayesianModel a)))
(forall (a) (if (BayesNetModelClass a) (BayesianModelClass a)))
(forall (a) (if (BayesianAlgorithm a) (ClassificationModelingAlgorithm a)))
(forall (a) (if (BayesianAlgorithm a) (exists (b) (and (specifiesOutputClass a
                                                                             b)
                                                       (BayesianModelClass b)))))
(forall (a) (if (BayesianAlgorithm a) (has-quality a
                                                   EagerLearningPolicy)))
(forall (a) (if (BayesianModel a) (GenerativeModel a)))
(forall (a) (if (BayesianModelClass a) (GenerativeModelClass a)))
(forall (a) (if (BayesianNetwork a) (GraphicalModel a)))
(forall (a) (if (BayesianStrategy a) (HypothesisComplexityControlStrategy a)))
(forall (a) (if (BiasVarianceProfile a) (AlgorithmCharacteristic a)))
(forall (a) (if (BiasVarianceProfile a) (exists (b) (and (inherent-in a
                                                                      b)
                                                         (or (ClassificationModelingAlgorithm b)
                                                             (RegressionModelingAlgorithm b))))))
(forall (a) (if (BiasVarianceProfile a) (forall (b) (if (inherent-in a
                                                                     b) (or (ClassificationModelingAlgorithm b)
                                                                            (RegressionModelingAlgorithm b))))))
(forall (a) (if (BiasVarianceProfile a) (and (exists (b) (and (HighBias-HighVariance b)
                                                              (has-quale a b)))
                                             (exists (b c) (if (and (has-quale a
                                                                               b)
                                                                    (has-quale a
                                                                               c)
                                                                    (HighBias-HighVariance b)) (= b c))))))
(forall (a) (if (BinarySplit-MultiwaySplit a) (abstract-region a)))
(forall (a) (if (Binomial-N a) (DistributionParameter a)))
(forall (a) (if (Binomial-N a) (hasDataType a Integer)))
(forall (a) (if (Binomial-P a) (DistributionParameter a)))
(forall (a) (if (BinomialDensityEstimation a) (DiscreteParametricDensityEstimation a)))
(forall (a) (if (BinomialDensityEstimation a) (exists (b) (and (hasDistributionParameter a
                                                                                         b)
                                                               (Binomial-N b)))))
(forall (a) (if (BinomialDensityEstimation a) (exists (b) (and (hasDistributionParameter a
                                                                                         b)
                                                               (Binomial-P b)))))
(forall (a) (if (Blind-Informed a) (abstract-region a)))
(forall (a) (if (Bottom-UpClusteringAlgorithm a) (ClusteringModelingAlgorithm a)))
(forall (a) (if (BottomKPctRule a) (DecisionRule a)))
(forall (a) (if (BottomKPctRule a) (hasDecisionCriterion a
                                                         BottomPercent)))
(forall (a) (if (BottomKPctRule a) (hasRelationalOperator a
                                                          LeqRelOp)))
(forall (a) (if (BottomKRule a) (DecisionRule a)))
(forall (a) (if (BottomKRule a) (hasDecisionCriterion a
                                                      BottomRank)))
(forall (a) (if (BottomKRule a) (hasRelationalOperator a
                                                       LeqRelOp)))
(forall (a) (if (BranchAndBound a) (PathBasedSearch a)))
(forall (a) (if (BranchAndBound a) (hasRecoveryOfPursuit a
                                                         Tentative)))
(forall (a) (if (BranchAndBound a) (hasScopeOfSelection a Global)))
(forall (a) (if (BranchAndBound a) (hasSearchGuidance a Informed)))
(forall (a) (if (BranchAndBound a) (hasUncertaintyLevel a
                                                        Deterministic)))
(forall (a) (if (BranchAndBound a) (and (isAdmissible a b)
                                        (= true b) (boolean b))))
(forall (a) (if (BranchAndBound a) (and (isComplete a b) (= true b)
                                        (boolean b))))
(forall (a) (if (C4.5CrispTreeModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (C4.5CrispTreeModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                                   b)
                                                        (NumberOfLeaves b)))))
(forall (a) (if (C4.5CrispTreeModel a) (hasDecisionBoundary a
                                                            PiecewiseAxisParallelLinearBoundary)))
(forall (a) (if (C4.5CrispTreeModel a) (hasHypothesisStructure a
                                                               UnivariateDecisionTree)))
(forall (a) (if (C4.5ProbTreeModel a) (DiscriminativeModel a)))
(forall (a) (if (C4.5ProbTreeModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                                  b)
                                                       (NumberOfLeaves b)))))
(forall (a) (if (C4.5ProbTreeModel a) (hasHypothesisStructure a
                                                              PosteriorProbabilityDistribution)))
(forall (a) (if (C4.5RuleModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (C4.5RuleModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                              b)
                                                   (NumberOfRules b)))))
(forall (a) (if (C4.5RuleModel a) (hasDecisionBoundary a
                                                       PiecewiseAxisParallelLinearBoundary)))
(forall (a) (if (C4.5RuleModel a) (hasHypothesisStructure a
                                                          DecisionList)))
(forall (a) (if (CARTClassificationModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (CARTClassificationModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                                        b)
                                                             (NumberOfLeaves b)))))
(forall (a) (if (CARTClassificationModel a) (hasDecisionBoundary a
                                                                 PiecewiseAxisParallelLinearBoundary)))
(forall (a) (if (CARTClassificationModel a) (hasHypothesisStructure a
                                                                    UnivariateDecisionTree)))
(forall (a) (if (CHAIDModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (CHAIDModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                           b)
                                                (NumberOfLeaves b)))))
(forall (a) (if (CHAIDModel a) (hasDecisionBoundary a
                                                    PiecewiseAxisParallelLinearBoundary)))
(forall (a) (if (CHAIDModel a) (hasHypothesisStructure a
                                                       UnivariateDecisionTree)))
(forall (a) (if (CN2Model a) (DiscriminantFunctionModel a)))
(forall (a) (if (CN2Model a) (exists (b) (and (hasModelComplexityMeasure a
                                                                         b)
                                              (NumberOfRules b)))))
(forall (a) (if (CN2Model a) (hasDecisionBoundary a
                                                  PiecewiseAxisParallelLinearBoundary)))
(forall (a) (if (CN2Model a) (hasHypothesisStructure a
                                                     UnweightedRuleSet)))
(forall (a) (if (CSVC-Algorithm a) (SVC-Algorithm a)))
(forall (a) (if (CSVC-Algorithm a) (exists (b) (and (hasOptimizationStrategy a
                                                                             b)
                                                    (QuadraticProgramming b)))))
(forall (a) (if (CSVC-Algorithm a) (has-quality a
                                                HandlesBinaryClassification)))
(forall (a) (if (CSVC-Algorithm a) (has-quality a ToleratesNoise)))
(forall (a) (if (CapacityParameter a) (SVC-Parameter a)))
(forall (a) (if (CardinalityReductionTask a) (DataReductionTask a)))
(forall (a) (if (CardinalityReductionTask a) (exists (b) (and (specifiesInputClass a
                                                                                   b)
                                                              (DataSetClass b)))))
(forall (a) (if (CardinalityReductionTask a) (exists (b) (and (specifiesOutputClass a
                                                                                    b)
                                                              (DataSetClass b)))))
(forall (a) (if (CategoricalFeature a) (QualitativeFeature a)))
(forall (a) (if (CategoricalFeature a) (exists (b) (and (hasDistinctValue a
                                                                          b)
                                                        (CategoricalFeatureValue b)))))
(forall (a) (if (CategoricalFeature a) (and (exists (b) (and (AverageMutualInformation b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (AverageMutualInformation b)) (= b c))))))
(forall (a) (if (CategoricalFeature a) (and (exists (b) (and (CategoricalFeatureCharacteristic b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (CategoricalFeatureCharacteristic b)) (= b c))))))
(forall (a) (if (CategoricalFeature a) (and (exists (b) (and (FeatureEntropy b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (FeatureEntropy b)) (= b c))))))
(forall (a) (if (CategoricalFeature a) (and (exists (b) (and (FeatureFrequentValue b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (FeatureFrequentValue b)) (= b c))))))
(forall (a) (if (CategoricalFeature a) (and (exists (b) (and (FeatureModalValue b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (FeatureModalValue b)) (= b c))))))
(forall (a) (if (CategoricalFeature a) (and (exists (b) (and (FeatureRareValue b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (FeatureRareValue b)) (= b c))))))
(forall (a) (if (CategoricalFeature a) (and (exists (b) (and (FeatureValueFrequencies b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (FeatureValueFrequencies b)) (= b c))))))
(forall (a) (if (CategoricalFeature a) (and (exists (b) (and (FeatureVeryFrequentValue b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (FeatureVeryFrequentValue b)) (= b c))))))
(forall (a) (if (CategoricalFeature a) (and (exists (b) (and (FeatureVeryRareValue b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (FeatureVeryRareValue b)) (= b c))))))
(forall (a) (if (CategoricalFeature a) (and (exists (b) (and (NumberOfDistinctValues b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (NumberOfDistinctValues b)) (= b c))))))
(forall (a) (if (CategoricalFeatureValue a) (FeatureValue a)))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (AverageMutualInformation b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (AverageMutualInformation b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (CanonicalCorrelationBestLinearCombination b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (CanonicalCorrelationBestLinearCombination b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (ClassAbsoluteFrequencies b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (ClassAbsoluteFrequencies b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (ClassCovarianceMatrices b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (ClassCovarianceMatrices b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (ClassEntropy b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (ClassEntropy b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (ClassRelativeFrequencies b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (ClassRelativeFrequencies b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (ErrorRateOf1NNClassifier b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (ErrorRateOf1NNClassifier b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (ErrorRateOfLinearClassifierLP b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (ErrorRateOfLinearClassifierLP b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (FeatureMutualInformationPerClass b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (FeatureMutualInformationPerClass b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (FeatureValueFrequenciesPerClass b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (FeatureValueFrequenciesPerClass b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (MaximumFeatureEfficiency b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (MaximumFeatureEfficiency b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (MaximumFishersDiscriminantRatio b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (MaximumFishersDiscriminantRatio b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (MinimumSumOfErrorDistanceByLP b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (MinimumSumOfErrorDistanceByLP b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (NonLinearityOf1NNClassifier b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (NonLinearityOf1NNClassifier b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (NonLinearityOfLinearClassifierLP b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (NonLinearityOfLinearClassifierLP b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (NumberOfClasses b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (NumberOfClasses b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (ProportionOfBoundaryPoints b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (ProportionOfBoundaryPoints b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (ProportionPointsWithRetainedAdherence b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (ProportionPointsWithRetainedAdherence b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (RatioOfAverageIntraInterDistances b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (RatioOfAverageIntraInterDistances b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (VolumeOfOverlapRegion b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (VolumeOfOverlapRegion b)) (= b c))))))
(forall (a) (if (CategoricalLabeledDataSet a) (and (exists (b) (and (AverageReliefFeatureWeight b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (AverageReliefFeatureWeight b)) (= b c))))))
(forall (a) (if (CategoricalTargetRelatedAssumption a) (TargetRelatedAssumption a)))
(forall (a) (if (Characteristic a) (abstract-quality a)))
(forall (a) (if (ChiSquared-Nu a) (DistributionParameter a)))
(forall (a) (if (ChiSquared-Nu a) (hasDataType a Integer)))
(forall (a) (if (ClassBalancingTask a) (DataTransformationTask a)))
(forall (a) (if (ClassBalancingTask a) (specifiesInputClass a
                                                            CategoricalLabeledDataSet)))
(forall (a) (if (ClassBalancingTask a) (specifiesOutputClass a
                                                             CategoricalLabeledDataSet)))
(forall (a) (if (ClassBasedModelParameter a) (ModelParameter a)))
(forall (a) (if (ClassCondMeanMatrix a) (Feature-BasedModelParameter a)))
(forall (a) (if (ClassCondMeanMatrix a) (hasDataType a Matrix)))
(forall (a) (if (ClassCondProbMatrix a) (Feature-BasedModelParameter a)))
(forall (a) (if (ClassCondProbMatrix a) (hasDataType a Matrix)))
(forall (a) (if (ClassCondProbabilityAssumption a) (ProbabilityDistributionRelatedAssumption a)))
(forall (a) (if (ClassCondVarianceMatrix a) (Feature-BasedModelParameter a)))
(forall (a) (if (ClassCondVarianceMatrix a) (hasDataType a
                                                         Matrix)))
(forall (a) (if (ClassPriorProbabilityAssumption a) (ProbabilityDistributionRelatedAssumption a)))
(forall (a) (if (ClassPriorVector a) (ClassBasedModelParameter a)))
(forall (a) (if (ClassPriorVector a) (hasDataType a Vector)))
(forall (a) (if (ClassificationModel a) (PredictiveModel a)))
(forall (a) (if (ClassificationModel a) (exists (b) (and (hasDecisionBoundary a
                                                                              b)
                                                         (DecisionBoundary b)))))
(forall (a) (if (ClassificationModelClass a) (PredictiveModelClass a)))
(forall (a) (if (ClassificationModelEvalFunction a) (PredictiveModelEvalFunction a)))
(forall (a) (if (ClassificationModelingAlgorithm a) (exists (b) (and (hasOptimizationProblem a
                                                                                             b)
                                                                     (and (OptimizationProblem b)
                                                                          (exists (c) (and (hasObjectiveFunction b
                                                                                                                 c)
                                                                                           (ClassificationModelEvalFunction c))))))))
(forall (a) (if (ClassificationModelingAlgorithm a) (exists (b) (and (hasOptimizationStrategy a
                                                                                              b)
                                                                     (OptimizationStrategy b)))))
(forall (a) (if (ClassificationModelingAlgorithm a) (forall (b) (if (hasDecisionRule a
                                                                                     b) (DecisionRule b)))))
(forall (a) (if (ClassificationModelingAlgorithm a) (forall (b) (if (hasHypothesisComplexityControlStrategy a
                                                                                                            b) (or (HypothesisComplexityControlStrategy b)
                                                                                                                   (= b None))))))
(forall (a) (if (ClassificationModelingAlgorithm a) (assumes a
                                                             IID-Assumption)))
(forall (a) (if (ClassificationModelingAlgorithm a) (and (exists (b) (and (BiasVarianceProfile b)
                                                                          (has-quality a
                                                                                       b)))
                                                         (exists (b
                                                                  c) (if (and (has-quality a
                                                                                           b)
                                                                              (has-quality a
                                                                                           c)
                                                                              (BiasVarianceProfile b)) (= b c))))))
(forall (a) (if (ClassificationModelingAlgorithm a) (and (exists (b) (and (ClassificationProblemType b)
                                                                          (has-quality a
                                                                                       b)))
                                                         (exists (b
                                                                  c) (if (and (has-quality a
                                                                                           b)
                                                                              (has-quality a
                                                                                           c)
                                                                              (ClassificationProblemType b)) (= b c))))))
(forall (a) (if (ClassificationModelingAlgorithm a) (and (exists (b) (and (HandlingOfClassificationCosts b)
                                                                          (has-quality a
                                                                                       b)))
                                                         (exists (b
                                                                  c) (if (and (has-quality a
                                                                                           b)
                                                                              (has-quality a
                                                                                           c)
                                                                              (HandlingOfClassificationCosts b)) (= b c))))))
(forall (a) (if (ClassificationModelingAlgorithm a) (and (exists (b) (and (ToleranceToClassImbalance b)
                                                                          (has-quality a
                                                                                       b)))
                                                         (exists (b
                                                                  c) (if (and (has-quality a
                                                                                           b)
                                                                              (has-quality a
                                                                                           c)
                                                                              (ToleranceToClassImbalance b)) (= b c))))))
(forall (a) (if (ClassificationModelingTask a) (PredictiveModelingTask a)))
(forall (a) (if (ClassificationModelingTask a) (exists (b) (and (specifiesOutputClass a
                                                                                      b)
                                                                (ClassificationModelClass b)))))
(forall (a) (if (ClassificationModelingTask a) (specifiesInputClass a
                                                                    CategoricalLabeledDataSet)))
(forall (a) (if (ClassificationProblem a) (abstract-region a)))
(forall (a) (if (ClassificationProblemType a) (AlgorithmCharacteristic a)))
(forall (a) (if (ClassificationProblemType a) (exists (b) (and (inherent-in a
                                                                            b)
                                                               (ClassificationModelingAlgorithm b)))))
(forall (a) (if (ClassificationProblemType a) (forall (b) (if (inherent-in a
                                                                           b) (ClassificationModelingAlgorithm b)))))
(forall (a) (if (ClassificationProblemType a) (and (exists (b) (and (ClassificationProblem b)
                                                                    (has-quale a
                                                                               b)))
                                                   (exists (b
                                                            c) (if (and (has-quale a
                                                                                   b)
                                                                        (has-quale a
                                                                                   c)
                                                                        (ClassificationProblem b)) (= b c))))))
(forall (a) (if (ClassificationRuleInductionAlgorithm a) (ClassificationModelingAlgorithm a)))
(forall (a) (if (ClassificationRuleInductionAlgorithm a) (exists (b) (and (specifiesOutputClass a
                                                                                                b)
                                                                          (RuleSetModelClass b)))))
(forall (a) (if (ClassificationRuleInductionAlgorithm a) (has-quality a
                                                                      EagerLearningPolicy)))
(forall (a) (if (ClassificationRuleInductionAlgorithm a) (has-quality a
                                                                      HandlesCategoricalFeatures)))
(forall (a) (if (ClassificationRuleInductionAlgorithm a) (has-quality a
                                                                      HighVarianceProfile)))
(forall (a) (if (ClassificationRuleInductionAlgorithm a) (has-quality a
                                                                      ToleratesHighDimensionality)))
(forall (a) (if (ClassificationRuleInductionAlgorithm a) (has-quality a
                                                                      ToleratesIrrelevantFeatures)))
(forall (a) (if (ClassificationRuleInductionAlgorithm a) (and (exists (b) (and (RuleInductionStrategy b)
                                                                               (has-quality a
                                                                                            b)))
                                                              (exists (b
                                                                       c) (if (and (has-quality a
                                                                                                b)
                                                                                   (has-quality a
                                                                                                c)
                                                                                   (RuleInductionStrategy b)) (= b c))))))
(forall (a) (if (ClassificationRuleInductionAlgorithm a) (and (exists (b) (and (SampleHandlingForRuleInduction b)
                                                                               (has-quality a
                                                                                            b)))
                                                              (exists (b
                                                                       c) (if (and (has-quality a
                                                                                                b)
                                                                                   (has-quality a
                                                                                                c)
                                                                                   (SampleHandlingForRuleInduction b)) (= b c))))))
(forall (a) (if (ClassificationTask a) (PredictionTask a)))
(forall (a) (if (ClassificationTask a) (exists (b) (and (specifiesInputClass a
                                                                             b)
                                                        (ClassificationModelClass b)))))
(forall (a) (if (ClassificationTask a) (specifiesOutputClass a
                                                             CategoricalLabeledDataSet)))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (ClassificationModelingAlgorithm a)))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (exists (b) (and (hasFeatureTestEvaluator a
                                                                                                   b)
                                                                          (FeatureWeightingAlgorithm b)))))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (exists (b) (and (hasLeafPredictor a
                                                                                            b)
                                                                          (ClassificationModel b)))))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (exists (b) (and (specifiesOutputClass a
                                                                                                b)
                                                                          (DecisionTreeModelClass b)))))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (forall (b) (if (hasParameter a
                                                                                       b) (TreeInductionParameter b)))))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (forall (b) (if (hasPostprocessor a
                                                                                           b) (or (TreePruningAlgorithm b)
                                                                                                  (= b None))))))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (has-quality a
                                                                      EagerLearningPolicy)))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (has-quality a
                                                                      HandlesCategoricalFeatures)))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (has-quality a
                                                                      ToleratesHighDimensionality)))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (has-quality a
                                                                      ToleratesIrrelevantFeatures)))
(forall (a) (if (ClassificationTreeInductionAlgorithm a) (and (exists (b) (and (TreeBranchingFactor b)
                                                                               (has-quality a
                                                                                            b)))
                                                              (exists (b
                                                                       c) (if (and (has-quality a
                                                                                                b)
                                                                                   (has-quality a
                                                                                                c)
                                                                                   (TreeBranchingFactor b)) (= b c))))))
(forall (a) (if (ClusteringAlgorithmCharacteristic a) (AlgorithmCharacteristic a)))
(forall (a) (if (ClusteringBasedModelParameter a) (ModelParameter a)))
(forall (a) (if (ClusteringModel a) (DescriptiveModel a)))
(forall (a) (if (ClusteringModelClass a) (DescriptiveModelClass a)))
(forall (a) (if (ClusteringModelEvalFunction a) (DescriptiveModelEvalFunction a)))
(forall (a) (if (ClusteringModelingOperator a) (DM-Operator a)))
(forall (a) (if (ClusteringModelingTask a) (DescriptiveModelingTask a)))
(forall (a) (if (ClusteringModelingTask a) (exists (b) (and (specifiesOutputClass a
                                                                                  b)
                                                            (ClusteringModelClass b)))))
(forall (a) (if (ClusteringProblem a) (abstract-region a)))
(forall (a) (if (ClusteringProblemType a) (AlgorithmCharacteristic a)))
(forall (a) (if (ClusteringProblemType a) (exists (b) (and (inherent-in a
                                                                        b)
                                                           (ClusteringModelingAlgorithm b)))))
(forall (a) (if (ClusteringProblemType a) (forall (b) (if (inherent-in a
                                                                       b) (ClusteringModelingAlgorithm b)))))
(forall (a) (if (ClusteringProblemType a) (and (exists (b) (and (ClusteringProblem b)
                                                                (has-quale a
                                                                           b)))
                                               (exists (b
                                                        c) (if (and (has-quale a
                                                                               b)
                                                                    (has-quale a
                                                                               c)
                                                                    (ClusteringProblem b)) (= b c))))))
(forall (a) (if (ClusteringTask a) (DescriptionTask a)))
(forall (a) (if (CombinationFunction a) (MathematicalFunction a)))
(forall (a) (if (ComplementClassCondProbMatrix a) (Feature-BasedModelParameter a)))
(forall (a) (if (ComplementNaiveBayesModel a) (NaiveBayesModel a)))
(forall (a) (if (ComplementNaiveBayesModel a) (forall (b) (if (hasParameter a
                                                                            b) (or (ClassPriorVector b)
                                                                                   (ComplementClassCondProbMatrix b))))))
(forall (a) (if (ComplementNaiveBayesModel a) (and (exists (b) (and (ComplementClassCondProbMatrix b)
                                                                    (hasParameter a
                                                                                  b)))
                                                   (exists (b
                                                            c) (if (and (hasParameter a
                                                                                      b)
                                                                        (hasParameter a
                                                                                      c)
                                                                        (ComplementClassCondProbMatrix b)) (= b c))))))
(forall (a) (if (CompleteLinkModel a) (HierarchicalClusteringModel a)))
(forall (a) (if (ComputationalComplexityFunction a) (MathematicalFunction a)))
(forall (a) (if (ComputationalComplexityMeasure a) (Measure a)))
(forall (a) (if (Constraint a) (MathematicalExpression a)))
(forall (a) (if (ContinuousFeature a) (QuantitativeFeature a)))
(forall (a) (if (ContinuousFeature a) (and (exists (b) (and (FeatureCorrelation b)
                                                            (has-quality a b)))
                                           (exists (b c) (if (and (has-quality a
                                                                               b)
                                                                  (has-quality a
                                                                               c)
                                                                  (FeatureCorrelation b)) (= b c))))))
(forall (a) (if (ContinuousFeature a) (and (exists (b) (and (FeatureHOutlier b)
                                                            (has-quality a b)))
                                           (exists (b c) (if (and (has-quality a
                                                                               b)
                                                                  (has-quality a
                                                                               c)
                                                                  (FeatureHOutlier b)) (= b c))))))
(forall (a) (if (ContinuousFeature a) (and (exists (b) (and (FeatureMaximumValue b)
                                                            (has-quality a b)))
                                           (exists (b c) (if (and (has-quality a
                                                                               b)
                                                                  (has-quality a
                                                                               c)
                                                                  (FeatureMaximumValue b)) (= b c))))))
(forall (a) (if (ContinuousFeature a) (and (exists (b) (and (FeatureMeanValue b)
                                                            (has-quality a b)))
                                           (exists (b c) (if (and (has-quality a
                                                                               b)
                                                                  (has-quality a
                                                                               c)
                                                                  (FeatureMeanValue b)) (= b c))))))
(forall (a) (if (ContinuousFeature a) (and (exists (b) (and (FeatureMinimumValue b)
                                                            (has-quality a b)))
                                           (exists (b c) (if (and (has-quality a
                                                                               b)
                                                                  (has-quality a
                                                                               c)
                                                                  (FeatureMinimumValue b)) (= b c))))))
(forall (a) (if (ContinuousFeature a) (and (exists (b) (and (FeatureStandardDeviation b)
                                                            (has-quality a b)))
                                           (exists (b c) (if (and (has-quality a
                                                                               b)
                                                                  (has-quality a
                                                                               c)
                                                                  (FeatureStandardDeviation b)) (= b c))))))
(forall (a) (if (ContinuousFeatureValue a) (FeatureValue a)))
(forall (a) (if (ContinuousOptimizationProblem a) (OptimizationProblem a)))
(forall (a) (if (ContinuousOptimizationStrategy a) (OptimizationStrategy a)))
(forall (a) (if (ContinuousParametricDensityEstimation a) (ParametricDensityEstimation a)))
(forall (a) (if (ContinuousParametricDensityEstimation a) (requiresDataType a
                                                                            Real)))
(forall (a) (if (ContinuousTargetRelatedAssumption a) (TargetRelatedAssumption a)))
(forall (a) (if (ContinuousUniformDensityEstimation a) (ContinuousParametricDensityEstimation a)))
(forall (a) (if (ConvexOptimizationProblem a) (ContinuousOptimizationProblem a)))
(forall (a) (if (CoordinateSystem a) (AlgorithmCharacteristic a)))
(forall (a) (if (CoordinateSystem a) (exists (b) (and (inherent-in a
                                                                   b)
                                                      (FeatureExtractionAlgorithm b)))))
(forall (a) (if (CoordinateSystem a) (and (exists (b) (and (Orthogonal-NonOrthogonal b)
                                                           (has-quale a b)))
                                          (exists (b c) (if (and (has-quale a b)
                                                                 (has-quale a c)
                                                                 (Orthogonal-NonOrthogonal b)) (= b c))))))
(forall (a) (if (CoreDM-Task a) (DM-Task a)))
(forall (a) (if (CrossValidation a) (ModelEvaluationAlgorithm a)))
(forall (a) (if (DM-Algorithm a) (non-physical-endurant a)))
(forall (a) (if (DM-Algorithm a) (exists (b) (and (addresses a b)
                                                  (DM-Task b)))))
(forall (a) (if (DM-Algorithm a) (forall (b) (if (hasParameter a
                                                               b) (AlgorithmParameter b)))))
(forall (a) (if (DM-Algorithm a) (forall (b) (if (has-quality a
                                                              b) (AlgorithmCharacteristic b)))))
(forall (a) (if (DM-Data a) (non-physical-endurant a)))
(forall (a) (if (DM-Data a) (forall (b) (if (has-quality a
                                                         b) (DataCharacteristic b)))))
(forall (a) (if (DM-DataClass a) (IO-Class a)))
(forall (a) (if (DM-Experiment a) (DM-Process a)))
(forall (a) (if (DM-Hypothesis a) (non-physical-endurant a)))
(forall (a) (if (DM-Hypothesis a) (exists (b) (and (hasHypothesisStructure a
                                                                           b)
                                                   (HypothesisStructure b)))))
(forall (a) (if (DM-Hypothesis a) (and (exists (b) (and (Interpretability b)
                                                        (has-quality a b)))
                                       (exists (b c) (if (and (has-quality a b)
                                                              (has-quality a c)
                                                              (Interpretability b)) (= b c))))))
(forall (a) (if (DM-HypothesisClass a) (IO-Class a)))
(forall (a) (if (DM-Model a) (DM-Hypothesis a)))
(forall (a) (if (DM-Model a) (forall (b) (if (hasHypothesisStructure a
                                                                     b) (ModelStructure b)))))
(forall (a) (if (DM-Model a) (forall (b) (if (hasModelComplexityMeasure a
                                                                        b) (ModelComplexityMeasure b)))))
(forall (a) (if (DM-Model a) (forall (b) (if (hasParameter a
                                                           b) (ModelParameter b)))))
(forall (a) (if (DM-ModelClass a) (DM-HypothesisClass a)))
(forall (a) (if (DM-Operation a) (DM-Process a)))
(forall (a) (if (DM-Operation a) (exists (b) (and (achieves a b)
                                                  (DM-Task b)))))
(forall (a) (if (DM-Operation a) (exists (b) (and (executes a b)
                                                  (DM-Operator b)))))
(forall (a) (if (DM-Operation a) (exists (b) (and (hasInput a b)
                                                  (or (DM-Data b)
                                                      (DM-Model b))))))
(forall (a) (if (DM-Operation a) (exists (b) (and (hasOutput a b)
                                                  (or (DM-Data b)
                                                      (DM-Hypothesis b))))))
(forall (a) (if (DM-Operation a) (forall (b) (if (hasParameterSetting a
                                                                      b) (OpParameterSetting b)))))
(forall (a) (if (DM-Operator a) (non-physical-endurant a)))
(forall (a) (if (DM-Operator a) (exists (b) (and (implements a b)
                                                 (DM-Algorithm b)))))
(forall (a) (if (DM-Operator a) (exists (b) (and (isPartOf a b)
                                                 (DM-Software b)))))
(forall (a) (if (DM-Operator a) (forall (b) (if (hasParameter a
                                                              b) (OperatorParameter b)))))
(forall (a) (if (DM-Operator a) (exists (b) (and (boolean b)
                                                 (isMultiAlgorithmOperator a
                                                                           b)))))
(forall (a) (if (DM-PatternSet a) (DM-Hypothesis a)))
(forall (a) (if (DM-PatternSet a) (forall (b) (if (hasHypothesisStructure a
                                                                          b) (PatternStructure b)))))
(forall (a) (if (DM-PatternSetClass a) (DM-HypothesisClass a)))
(forall (a) (if (DM-Process a) (process a)))
(forall (a) (if (DM-Process a) (exists (b) (and (executes a b)
                                                (DM-Workflow b)))))
(forall (a) (if (DM-Process a) (exists (b) (and (hasInput a b)
                                                (IO-Object b)))))
(forall (a) (if (DM-Process a) (exists (b) (and (hasOutput a b)
                                                (IO-Object b)))))
(forall (a) (if (DM-Process a) (forall (b) (if (hasSubprocess a
                                                              b) (DM-Process b)))))
(forall (a) (if (DM-Software a) (non-physical-endurant a)))
(forall (a) (if (DM-Task a) (non-physical-endurant a)))
(forall (a) (if (DM-Task a) (exists (b) (and (specifiesInputClass a
                                                                  b)
                                             (IO-Class b)))))
(forall (a) (if (DM-Task a) (exists (b) (and (specifiesOutputClass a
                                                                   b)
                                             (IO-Class b)))))
(forall (a) (if (DM-Workflow a) (Workflow a)))
(forall (a) (if (DataAbstractionAlgorithm a) (DataProcessingAlgorithm a)))
(forall (a) (if (DataAbstractionTask a) (DataProcessingTask a)))
(forall (a) (if (DataCleaningTask a) (DataProcessingTask a)))
(forall (a) (if (DataFormat a) (abstract a)))
(forall (a) (if (DataProcessingAlgorithm a) (and (exists (b) (and (HandlingOfCategoricalFeatures b)
                                                                  (has-quality a
                                                                               b)))
                                                 (exists (b
                                                          c) (if (and (has-quality a
                                                                                   b)
                                                                      (has-quality a
                                                                                   c)
                                                                      (HandlingOfCategoricalFeatures b)) (= b c))))))
(forall (a) (if (DataProcessingAlgorithm a) (and (exists (b) (and (HandlingOfContinuousFeatures b)
                                                                  (has-quality a
                                                                               b)))
                                                 (exists (b
                                                          c) (if (and (has-quality a
                                                                                   b)
                                                                      (has-quality a
                                                                                   c)
                                                                      (HandlingOfContinuousFeatures b)) (= b c))))))
(forall (a) (if (DataProcessingTask a) (CoreDM-Task a)))
(forall (a) (if (DataProcessingTask a) (exists (b) (and (specifiesInputClass a
                                                                             b)
                                                        (DM-DataClass b)))))
(forall (a) (if (DataProcessingTask a) (exists (b) (and (specifiesOutputClass a
                                                                              b)
                                                        (DM-DataClass b)))))
(forall (a) (if (DataReductionTask a) (DataProcessingTask a)))
(forall (a) (if (DataRetrievalTask a) (UtilityTask a)))
(forall (a) (if (DataSet a) (DM-Data a)))
(forall (a) (if (DataSet a) (exists (b) (and (hasMainTable a b)
                                             (DataTable b)))))
(forall (a) (if (DataSet a) (forall (b) (if (has-quality a
                                                         b) (DataSetCharacteristic b)))))
(forall (a) (if (DataSet a) (and (exists (b) (and (AverageAbsoluteFeatureCorrelation b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (AverageAbsoluteFeatureCorrelation b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (AverageCategoricalFeaturePairsMutualInformation b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (AverageCategoricalFeaturePairsMutualInformation b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (AverageFeatureEntropy b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (AverageFeatureEntropy b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (BetweenGroupsSumSquaresCrossProducts b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (BetweenGroupsSumSquaresCrossProducts b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (EigenValuesLinearDiscriminantFunctions b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (EigenValuesLinearDiscriminantFunctions b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (NoiseSignalRatio b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (NoiseSignalRatio b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (NumberOfCategoricalFeatures b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (NumberOfCategoricalFeatures b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (NumberOfContinuousFeatures b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (NumberOfContinuousFeatures b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (NumberOfFeatures b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (NumberOfFeatures b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (NumberOfHOutliers b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (NumberOfHOutliers b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (NumberOfInstances b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (NumberOfInstances b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (NumberOfInstancesPerFeature b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (NumberOfInstancesPerFeature b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (ProportionOfCategoricalFeatures b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (ProportionOfCategoricalFeatures b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (ProportionOfHOutliers b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (ProportionOfHOutliers b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (TotalSumSquaresCrossProducts b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (TotalSumSquaresCrossProducts b)) (= b c))))))
(forall (a) (if (DataSet a) (and (exists (b) (and (WithinGroupsSumSquaresCrossProducts b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (WithinGroupsSumSquaresCrossProducts b)) (= b c))))))
(forall (a) (if (DataSetClass a) (DM-DataClass a)))
(forall (a) (if (DataTable a) (DM-Data a)))
(forall (a) (if (DataTable a) (exists (b) (and (hasFeature a b)
                                               (Feature b)))))
(forall (a) (if (DataTable a) (exists (b) (and (hasInstance a b)
                                               (Instance b)))))
(forall (a) (if (DataTable a) (and (exists (b) (and (TableFormat b)
                                                    (hasTableFormat a b)))
                                   (exists (b c) (if (and (hasTableFormat a b)
                                                          (hasTableFormat a c)
                                                          (TableFormat b)) (= b c))))))
(forall (a) (if (DataTableClass a) (DM-DataClass a)))
(forall (a) (if (DataTransformationTask a) (DataProcessingTask a)))
(forall (a) (if (DataType a) (abstract a)))
(forall (a) (if (DecisionBoundary a) (abstract a)))
(forall (a) (if (DecisionCriterion a) (abstract-region a)))
(forall (a) (if (DecisionRule a) (DecisionStrategy a)))
(forall (a) (if (DecisionRule a) (exists (b) (and (hasDecisionCriterion a
                                                                        b)
                                                  (DecisionCriterion b)))))
(forall (a) (if (DecisionRule a) (exists (b) (and (hasRelationalOperator a
                                                                         b)
                                                  (RelOp b)))))
(forall (a) (if (DecisionRule a) (forall (b) (and (float b)
                                                  (hasFixedThreshold a b)))))
(forall (a) (if (DecisionStrategy a) (Strategy a)))
(forall (a) (if (DecisionStrategy a) (exists (b) (and (hasDecisionTarget a
                                                                         b)
                                                      (DecisionTarget b)))))
(forall (a) (if (DecisionTarget a) (abstract-region a)))
(forall (a) (if (DecisionTree a) (PropositionalLogicStructure a)))
(forall (a) (if (DecisionTreeModelClass a) (LogicalModelClass a)))
(forall (a) (if (DependencyModel a) (DescriptiveModel a)))
(forall (a) (if (DependencyModelClass a) (DescriptiveModelClass a)))
(forall (a) (if (DependencyModelingAlgorithm a) (ModelingAlgorithm a)))
(forall (a) (if (DependencyModelingTask a) (DescriptiveModelingTask a)))
(forall (a) (if (DependencyModelingTask a) (exists (b) (and (specifiesOutputClass a
                                                                                  b)
                                                            (DependencyModelClass b)))))
(forall (a) (if (DescriptionTask a) (ModelApplicationTask a)))
(forall (a) (if (DescriptiveModel a) (DM-Model a)))
(forall (a) (if (DescriptiveModelClass a) (DM-ModelClass a)))
(forall (a) (if (DescriptiveModelEvalFunction a) (ModelEvaluationFunction a)))
(forall (a) (if (DescriptiveModelingTask a) (ModelingTask a)))
(forall (a) (if (DescriptiveModelingTask a) (exists (b) (and (specifiesInputClass a
                                                                                  b)
                                                             (UnlabeledDataSetClass b)))))
(forall (a) (if (DescriptiveModelingTask a) (exists (b) (and (specifiesOutputClass a
                                                                                   b)
                                                             (DescriptiveModelClass b)))))
(forall (a) (if (Deterministic-Stochastic a) (abstract-region a)))
(forall (a) (if (DeviationDescription a) (DM-PatternSet a)))
(forall (a) (if (DeviationDetectionTask a) (PatternDiscoveryTask a)))
(forall (a) (if (DeviationDetectionTask a) (specifiesOutputClass a
                                                                 DeviationDescription)))
(forall (a) (if (DimensionalityReductionTask a) (DataReductionTask a)))
(forall (a) (if (DimensionalityReductionTask a) (exists (b) (and (specifiesInputClass a
                                                                                      b)
                                                                 (DataSetClass b)))))
(forall (a) (if (DimensionalityReductionTask a) (exists (b) (and (specifiesOutputClass a
                                                                                       b)
                                                                 (DataSetClass b)))))
(forall (a) (if (DiscreteFeature a) (QuantitativeFeature a)))
(forall (a) (if (DiscreteFeatureCharacteristic a) (FeatureCharacteristic a)))
(forall (a) (if (DiscreteFeatureValue a) (FeatureValue a)))
(forall (a) (if (DiscreteOptimizationProblem a) (OptimizationProblem a)))
(forall (a) (if (DiscreteOptimizationStrategy a) (OptimizationStrategy a)))
(forall (a) (if (DiscreteOptimizationStrategy a) (and (exists (b) (and (DecisionStrategy b)
                                                                       (hasDecisionStrategy a
                                                                                            b)))
                                                      (exists (b
                                                               c) (if (and (hasDecisionStrategy a
                                                                                                b)
                                                                           (hasDecisionStrategy a
                                                                                                c)
                                                                           (DecisionStrategy b)) (= b c))))))
(forall (a) (if (DiscreteParametricDensityEstimation a) (ParametricDensityEstimation a)))
(forall (a) (if (DiscreteParametricDensityEstimation a) (requiresDataType a
                                                                          Categorical)))
(forall (a) (if (DiscreteUniformDensityEstimation a) (DiscreteParametricDensityEstimation a)))
(forall (a) (if (DiscretizationBasedDensityEstimation a) (NonparametricDensityEstimation a)))
(forall (a) (if (DiscriminantAnalysisAlgorithm a) (ClassificationModelingAlgorithm a)))
(forall (a) (if (DiscriminantAnalysisAlgorithm a) (assumes a
                                                           MultinomialClassPriorAssumption)))
(forall (a) (if (DiscriminantAnalysisAlgorithm a) (assumes a
                                                           NormalClassCondProbabilityAssumption)))
(forall (a) (if (DiscriminantAnalysisAlgorithm a) (hasDecisionRule a
                                                                   MaxAPosteriori)))
(forall (a) (if (DiscriminantAnalysisAlgorithm a) (hasOptimizationStrategy a
                                                                           ClosedFormOptimization)))
(forall (a) (if (DiscriminantAnalysisAlgorithm a) (specifiesOutputClass a
                                                                        DiscriminantModel)))
(forall (a) (if (DiscriminantAnalysisAlgorithm a) (has-quality a
                                                               EagerLearningPolicy)))
(forall (a) (if (DiscriminantAnalysisAlgorithm a) (has-quality a
                                                               HandlesContinuousFeatures)))
(forall (a) (if (DiscriminantAnalysisAlgorithm a) (has-quality a
                                                               HandlesNoCategoricalFeatures)))
(forall (a) (if (DiscriminantFunctionModel a) (ClassificationModel a)))
(forall (a) (if (DiscriminantFunctionModel a) (exists (b) (and (hasHypothesisStructure a
                                                                                       b)
                                                               (NonProbabilisticModelStructure b)))))
(forall (a) (if (DiscriminantFunctionModelClass a) (ClassificationModelClass a)))
(forall (a) (if (DiscriminantModel a) (GenerativeModel a)))
(forall (a) (if (DiscriminantModelClass a) (GenerativeModelClass a)))
(forall (a) (if (DiscriminativeModel a) (ClassificationModel a)))
(forall (a) (if (DiscriminativeModel a) (hasHypothesisStructure a
                                                                PosteriorProbabilityDistribution)))
(forall (a) (if (DiscriminativeModelClass a) (ClassificationModelClass a)))
(forall (a) (if (DissociationDiscoveryTask a) (PatternDiscoveryTask a)))
(forall (a) (if (DissociationDiscoveryTask a) (exists (b) (and (specifiesInputClass a
                                                                                    b)
                                                               (UnlabeledDataSetClass b)))))
(forall (a) (if (DissociationDiscoveryTask a) (exists (b) (and (specifiesOutputClass a
                                                                                     b)
                                                               (DissociationPatternSetClass b)))))
(forall (a) (if (DissociationPatternSet a) (DM-PatternSet a)))
(forall (a) (if (DissociationPatternSetClass a) (DM-PatternSetClass a)))
(forall (a) (if (DistanceFunction a) (DistanceOrSimilarityFunction a)))
(forall (a) (if (DistanceOrSimilarityFunction a) (MathematicalFunction a)))
(forall (a) (if (DistributionParameter a) (Parameter a)))
(forall (a) (if (Eager-Lazy a) (abstract-region a)))
(forall (a) (if (EarlyStoppingStrategy a) (HypothesisComplexityControlStrategy a)))
(forall (a) (if (EntropyBasedFWAlgorithm a) (UnivariateFWAlgorithm a)))
(forall (a) (if (EntropyBasedFWAlgorithm a) (hasTargetLearner a
                                                              None)))
(forall (a) (if (EvaluationFunction a) (MathematicalFunction a)))
(forall (a) (if (ExactContinuousOptimizationStrategy a) (ContinuousOptimizationStrategy a)))
(forall (a) (if (Exhaustive-NonExhaustive a) (abstract-region a)))
(forall (a) (if (ExploratoryDataAnalysisTask a) (UtilityTask a)))
(forall (a) (if (Exponential-lambda a) (DistributionParameter a)))
(forall (a) (if (ExternalValidityModelFunction a) (ClusteringModelEvalFunction a)))
(forall (a) (if (Feature a) (DM-Data a)))
(forall (a) (if (Feature a) (exists (b) (and (hasDataType a b)
                                             (DataType b)))))
(forall (a) (if (Feature a) (forall (b) (if (has-quality a
                                                         b) (FeatureCharacteristic b)))))
(forall (a) (if (Feature a) (and (exists (b) (and (NumberOfMissingValues b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (NumberOfMissingValues b)) (= b c))))))
(forall (a) (if (Feature a) (and (exists (b) (and (ProportionOfMissingValues b)
                                                  (has-quality a b)))
                                 (exists (b c) (if (and (has-quality a b)
                                                        (has-quality a c)
                                                        (ProportionOfMissingValues b)) (= b c))))))
(forall (a) (if (Feature-BasedModelParameter a) (ModelParameter a)))
(forall (a) (if (FeatureClass a) (DM-DataClass a)))
(forall (a) (if (FeatureClassMutualInformation a) (CategoricalFeatureCharacteristic a)))
(forall (a) (if (FeatureDiscretizationTask a) (DataTransformationTask a)))
(forall (a) (if (FeatureDiscretizationTask a) (specifiesInputClass a
                                                                   CategoricalFeature)))
(forall (a) (if (FeatureDiscretizationTask a) (specifiesInputClass a
                                                                   ContinuousFeature)))
(forall (a) (if (FeatureEvaluationContext a) (AlgorithmCharacteristic a)))
(forall (a) (if (FeatureEvaluationContext a) (exists (b) (and (inherent-in a
                                                                           b)
                                                              (FeatureWeightingAlgorithm b)))))
(forall (a) (if (FeatureEvaluationContext a) (and (exists (b) (and (Univariate-Multivariate b)
                                                                   (has-quale a
                                                                              b)))
                                                  (exists (b
                                                           c) (if (and (has-quale a
                                                                                  b)
                                                                       (has-quale a
                                                                                  c)
                                                                       (Univariate-Multivariate b)) (= b c))))))
(forall (a) (if (FeatureEvaluationFunction a) (EvaluationFunction a)))
(forall (a) (if (FeatureEvaluationTarget a) (AlgorithmCharacteristic a)))
(forall (a) (if (FeatureEvaluationTarget a) (exists (b) (and (inherent-in a
                                                                          b)
                                                             (FeatureWeightingAlgorithm b)))))
(forall (a) (if (FeatureEvaluationTarget a) (and (exists (b) (and (SingleFeature-FeatureSubset b)
                                                                  (has-quale a
                                                                             b)))
                                                 (exists (b
                                                          c) (if (and (has-quale a
                                                                                 b)
                                                                      (has-quale a
                                                                                 c)
                                                                      (SingleFeature-FeatureSubset b)) (= b c))))))
(forall (a) (if (FeatureExtractionAlgorithm a) (and (exists (b) (and (CoordinateSystem b)
                                                                     (has-quality a
                                                                                  b)))
                                                    (exists (b
                                                             c) (if (and (has-quality a
                                                                                      b)
                                                                         (has-quality a
                                                                                      c)
                                                                         (CoordinateSystem b)) (= b c))))))
(forall (a) (if (FeatureExtractionAlgorithm a) (and (exists (b) (and (TransformationFunction b)
                                                                     (has-quality a
                                                                                  b)))
                                                    (exists (b
                                                             c) (if (and (has-quality a
                                                                                      b)
                                                                         (has-quality a
                                                                                      c)
                                                                         (TransformationFunction b)) (= b c))))))
(forall (a) (if (FeatureExtractionAlgorithm a) (and (exists (b) (and (UniquenessOfSolution b)
                                                                     (has-quality a
                                                                                  b)))
                                                    (exists (b
                                                             c) (if (and (has-quality a
                                                                                      b)
                                                                         (has-quality a
                                                                                      c)
                                                                         (UniquenessOfSolution b)) (= b c))))))
(forall (a) (if (FeatureExtractionAlgorithm a) (exists (b
                                                        c) (if (and (has-quality a
                                                                                 b)
                                                                    (has-quality a
                                                                                 c)
                                                                    (RangeOfNeighborhood b)) (= b c)))))
(forall (a) (if (FeatureExtractionTask a) (DataTransformationTask a)))
(forall (a) (if (FeatureExtractionTask a) (exists (b) (and (specifiesInputClass a
                                                                                b)
                                                           (DataSetClass b)))))
(forall (a) (if (FeatureExtractionTask a) (exists (b) (and (specifiesOutputClass a
                                                                                 b)
                                                           (DataSetClass b)))))
(forall (a) (if (FeatureLinearTransformAlgorithm a) (FeatureTransformationAlgorithm a)))
(forall (a) (if (FeatureLogTransformAlgorithm a) (FeatureTransformationAlgorithm a)))
(forall (a) (if (FeatureNormalizationAlgorithm a) (FeatureTransformationAlgorithm a)))
(forall (a) (if (FeatureRankingAlgorithm a) (exists (b) (and (step1 a
                                                                    b)
                                                             (FeatureWeightingAlgorithm b)))))
(forall (a) (if (FeatureRankingTask a) (DataTransformationTask a)))
(forall (a) (if (FeatureRankingTask a) (exists (b) (and (specifiesInputClass a
                                                                             b)
                                                        (DataSetClass b)))))
(forall (a) (if (FeatureRankingTask a) (exists (b) (and (specifiesOutputClass a
                                                                              b)
                                                        (DataSetClass b)))))
(forall (a) (if (FeatureRelatedAssumption a) (AlgorithmAssumption a)))
(forall (a) (if (FeatureSelectionAlgorithm a) (exists (b) (and (interactsWithLearnerAs a
                                                                                       b)
                                                               (Filter-Wrapper-Embedded b)))))
(forall (a) (if (FeatureSelectionAlgorithm a) (and (exists (b) (and (FeatureWeightingAlgorithm b)
                                                                    (hasFeatureEvaluator a
                                                                                         b)))
                                                   (exists (b
                                                            c) (if (and (hasFeatureEvaluator a
                                                                                             b)
                                                                        (hasFeatureEvaluator a
                                                                                             c)
                                                                        (FeatureWeightingAlgorithm b)) (= b c))))))
(forall (a) (if (FeatureSelectionAlgorithm a) (and (exists (b) (and (DiscreteOptimizationStrategy b)
                                                                    (hasOptimizationStrategy a
                                                                                             b)))
                                                   (exists (b
                                                            c) (if (and (hasOptimizationStrategy a
                                                                                                 b)
                                                                        (hasOptimizationStrategy a
                                                                                                 c)
                                                                        (DiscreteOptimizationStrategy b)) (= b c))))))
(forall (a) (if (FeatureSelectionTask a) (DimensionalityReductionTask a)))
(forall (a) (if (FeatureSelectionTask a) (exists (b) (and (specifiesInputClass a
                                                                               b)
                                                          (DataSetClass b)))))
(forall (a) (if (FeatureSelectionTask a) (exists (b) (and (specifiesOutputClass a
                                                                                b)
                                                          (DataSetClass b)))))
(forall (a) (if (FeatureSetEvaluationFunction a) (FeatureEvaluationFunction a)))
(forall (a) (if (FeatureSqrtTansformAlgorithm a) (FeatureTransformationAlgorithm a)))
(forall (a) (if (FeatureSquashToIntervalAlgorithm a) (FeatureTransformationAlgorithm a)))
(forall (a) (if (FeatureStandardizationAlgorithm a) (FeatureTransformationAlgorithm a)))
(forall (a) (if (FeatureSubsetWeightingAlgorithm a) (has-quality a
                                                                 MultivariateFeatureEvaluationContext)))
(forall (a) (if (FeatureTransformationTask a) (DataTransformationTask a)))
(forall (a) (if (FeatureTransformationTask a) (exists (b) (and (specifiesInputClass a
                                                                                    b)
                                                               (FeatureClass b)))))
(forall (a) (if (FeatureTransformationTask a) (exists (b) (and (specifiesOutputClass a
                                                                                     b)
                                                               (FeatureClass b)))))
(forall (a) (if (FeatureValue a) (DM-Data a)))
(forall (a) (if (FeatureWeightingAlgorithm a) (exists (b) (and (hasEvaluationFunction a
                                                                                      b)
                                                               (EvaluationFunction b)))))
(forall (a) (if (FeatureWeightingAlgorithm a) (and (exists (b) (and (FeatureEvaluationContext b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (FeatureEvaluationContext b)) (= b c))))))
(forall (a) (if (FeatureWeightingAlgorithm a) (and (exists (b) (and (FeatureEvaluationTarget b)
                                                                    (has-quality a
                                                                                 b)))
                                                   (exists (b
                                                            c) (if (and (has-quality a
                                                                                     b)
                                                                        (has-quality a
                                                                                     c)
                                                                        (FeatureEvaluationTarget b)) (= b c))))))
(forall (a) (if (FeatureWeightingTask a) (DataTransformationTask a)))
(forall (a) (if (FeatureWeightingTask a) (exists (b) (and (specifiesInputClass a
                                                                               b)
                                                          (DataSetClass b)))))
(forall (a) (if (FeatureWeightingTask a) (exists (b) (and (specifiesOutputClass a
                                                                                b)
                                                          (DataSetClass b)))))
(forall (a) (if (FeedforwardLayeredNNModelClass a) (NeuralNetworkModelClass a)))
(forall (a) (if (FeedforwardNNAlgorithm a) (NeuralNetworkAlgorithm a)))
(forall (a) (if (FeedfowardLayeredNNModel a) (NeuralNetworkModel a)))
(forall (a) (if (FeedfowardLayeredNNModel a) (hasHypothesisStructure a
                                                                     CompositionOfLinearCombinationsOfFeatures)))
(forall (a) (if (FeedfowardLayeredNNModel a) (and (exists (b) (and (SetOfWeightVectors b)
                                                                   (hasParameter a
                                                                                 b)))
                                                  (exists (b
                                                           c) (if (and (hasParameter a
                                                                                     b)
                                                                       (hasParameter a
                                                                                     c)
                                                                       (SetOfWeightVectors b)) (= b c))))))
(forall (a) (if (Filter-Wrapper-Embedded a) (abstract-region a)))
(forall (a) (if (FirstOrderLogicStructure a) (LogicalStructure a)))
(forall (a) (if (FishersLinearDiscriminantModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (FishersLinearDiscriminantModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                                               b)
                                                                    (or (NumberOfWeights b)
                                                                        (SumOfWeights b))))))
(forall (a) (if (FishersLinearDiscriminantModel a) (hasDecisionBoundary a
                                                                        ArbitraryLinearBoundary)))
(forall (a) (if (FishersLinearDiscriminantModel a) (hasHypothesisStructure a
                                                                           LinearCombinationOfFeatures)))
(forall (a) (if (FormalExpression a) (non-physical-endurant a)))
(forall (a) (if (ForwardWrapperFSAlgorithm a) (WrapperFSAlgorithm a)))
(forall (a) (if (FunctionParameter a) (Parameter a)))
(forall (a) (if (GAwithFSSEvaluatorFSAlgorithm a) (GeneticFSAlgorithm a)))
(forall (a) (if (GAwithFSSEvaluatorFSAlgorithm a) (and (exists (b) (and (FeatureSubsetWeightingAlgorithm b)
                                                                        (hasFeatureEvaluator a
                                                                                             b)))
                                                       (exists (b
                                                                c) (if (and (hasFeatureEvaluator a
                                                                                                 b)
                                                                            (hasFeatureEvaluator a
                                                                                                 c)
                                                                            (FeatureSubsetWeightingAlgorithm b)) (= b c))))))
(forall (a) (if (GAwithWrappedLearnerFSAlgorithm a) (GeneticFSAlgorithm a)))
(forall (a) (if (GAwithWrappedLearnerFSAlgorithm a) (interactsWithLearnerAs a
                                                                            Filter)))
(forall (a) (if (GAwithWrappedLearnerFSAlgorithm a) (and (exists (b) (and (WrapperFWAlgorithm b)
                                                                          (hasFeatureEvaluator a
                                                                                               b)))
                                                         (exists (b
                                                                  c) (if (and (hasFeatureEvaluator a
                                                                                                   b)
                                                                              (hasFeatureEvaluator a
                                                                                                   c)
                                                                              (WrapperFWAlgorithm b)) (= b c))))))
(forall (a) (if (Gauss-CovarianceMatrix a) (DistributionParameter a)))
(forall (a) (if (Gauss-MeanVector a) (DistributionParameter a)))
(forall (a) (if (GaussianKernelBasedDensityEstimation a) (NonparametricDensityEstimation a)))
(forall (a) (if (GaussianKernelSVCModel a) (NonlinearSVCModel a)))
(forall (a) (if (GenToSpec-SpecToGen a) (abstract-region a)))
(forall (a) (if (GeneralizedAdditiveModel a) (MathematicalStructure a)))
(forall (a) (if (GenerateAndSelectStrategy a) (HypothesisComplexityControlStrategy a)))
(forall (a) (if (GenerativeModel a) (ClassificationModel a)))
(forall (a) (if (GenerativeModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                                b)
                                                     (NumberOfProbabilities b)))))
(forall (a) (if (GenerativeModel a) (exists (b) (and (hasParameter a
                                                                   b)
                                                     (Feature-BasedModelParameter b)))))
(forall (a) (if (GenerativeModel a) (hasHypothesisStructure a
                                                            JointProbabilityDistribution)))
(forall (a) (if (GenerativeModelClass a) (ClassificationModelClass a)))
(forall (a) (if (GeneticFSAlgorithm a) (FeatureSelectionAlgorithm a)))
(forall (a) (if (GeneticFSAlgorithm a) (interactsWithLearnerAs a
                                                               Filter)))
(forall (a) (if (GeneticFSAlgorithm a) (and (exists (b) (and (ValueSearchStopRule b)
                                                             (hasDecisionStrategy a
                                                                                  b)))
                                            (exists (b
                                                     c) (if (and (hasDecisionStrategy a
                                                                                      b)
                                                                 (hasDecisionStrategy a
                                                                                      c)
                                                                 (ValueSearchStopRule b)) (= b c))))))
(forall (a) (if (GeneticFSAlgorithm a) (and (exists (b) (and (FeatureSubsetWeightingAlgorithm b)
                                                             (hasFeatureEvaluator a
                                                                                  b)))
                                            (exists (b
                                                     c) (if (and (hasFeatureEvaluator a
                                                                                      b)
                                                                 (hasFeatureEvaluator a
                                                                                      c)
                                                                 (FeatureSubsetWeightingAlgorithm b)) (= b c))))))
(forall (a) (if (GeneticFSAlgorithm a) (and (exists (b) (and (GeneticSearch b)
                                                             (hasOptimizationStrategy a
                                                                                      b)))
                                            (exists (b
                                                     c) (if (and (hasOptimizationStrategy a
                                                                                          b)
                                                                 (hasOptimizationStrategy a
                                                                                          c)
                                                                 (GeneticSearch b)) (= b c))))))
(forall (a) (if (GeneticSearch a) (IterativeImprovementSearch a)))
(forall (a) (if (GeneticSearch a) (hasUncertaintyLevel a
                                                       Stochastic)))
(forall (a) (if (Graph a) (StructuredType a)))
(forall (a) (if (GraphTheoreticClusteringAlgorithm a) (ClusteringModelingAlgorithm a)))
(forall (a) (if (GraphicalModel a) (ProbabilityEstimationModel a)))
(forall (a) (if (GreedySearch a) (and (isAdmissible a b)
                                      (= false b) (boolean b))))
(forall (a) (if (HandlingOfCategoricalFeatures a) (AlgorithmCharacteristic a)))
(forall (a) (if (HandlingOfCategoricalFeatures a) (and (exists (b) (and (Yes-No-Unknown b)
                                                                        (has-quale a
                                                                                   b)))
                                                       (exists (b
                                                                c) (if (and (has-quale a
                                                                                       b)
                                                                            (has-quale a
                                                                                       c)
                                                                            (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (HandlingOfClassificationCosts a) (AlgorithmCharacteristic a)))
(forall (a) (if (HandlingOfClassificationCosts a) (exists (b) (and (inherent-in a
                                                                                b)
                                                                   (ClassificationModelingAlgorithm b)))))
(forall (a) (if (HandlingOfClassificationCosts a) (forall (b) (if (inherent-in a
                                                                               b) (ClassificationModelingAlgorithm b)))))
(forall (a) (if (HandlingOfClassificationCosts a) (and (exists (b) (and (Yes-No-Unknown b)
                                                                        (has-quale a
                                                                                   b)))
                                                       (exists (b
                                                                c) (if (and (has-quale a
                                                                                       b)
                                                                            (has-quale a
                                                                                       c)
                                                                            (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (HandlingOfContinuousFeatures a) (AlgorithmCharacteristic a)))
(forall (a) (if (HandlingOfContinuousFeatures a) (and (exists (b) (and (Yes-No-Unknown b)
                                                                       (has-quale a
                                                                                  b)))
                                                      (exists (b
                                                               c) (if (and (has-quale a
                                                                                      b)
                                                                           (has-quale a
                                                                                      c)
                                                                           (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (HandlingOfInstanceWeights a) (AlgorithmCharacteristic a)))
(forall (a) (if (HandlingOfInstanceWeights a) (exists (b) (and (inherent-in a
                                                                            b)
                                                               (InductionAlgorithm b)))))
(forall (a) (if (HandlingOfInstanceWeights a) (and (exists (b) (and (Yes-No-Unknown b)
                                                                    (has-quale a
                                                                               b)))
                                                   (exists (b
                                                            c) (if (and (has-quale a
                                                                                   b)
                                                                        (has-quale a
                                                                                   c)
                                                                        (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (HardMarginSVC-Algorithm a) (SVC-Algorithm a)))
(forall (a) (if (HardMarginSVC-Algorithm a) (hasOptimizationProblem a
                                                                    HardMarginSVCOptimizationProblem)))
(forall (a) (if (HardMarginSVC-Algorithm a) (has-quality a
                                                         HandlesBinaryClassification)))
(forall (a) (if (HardMarginSVC-Algorithm a) (has-quality a
                                                         ToleratesNoNoise)))
(forall (a) (if (HeuristicBestFirstSearch a) (PathBasedSearch a)))
(forall (a) (if (HeuristicBestFirstSearch a) (hasSearchGuidance a
                                                                Informed)))
(forall (a) (if (HeuristicBestFirstSearch a) (hasUncertaintyLevel a
                                                                  Deterministic)))
(forall (a) (if (HeuristicBestFirstSearch a) (and (isComplete a b)
                                                  (= false b) (boolean b))))
(forall (a) (if (HeuristicContinuousOptimizationStrategy a) (ContinuousOptimizationStrategy a)))
(forall (a) (if (HierarchicalClusteringAlgorithm a) (ClusteringModelingAlgorithm a)))
(forall (a) (if (HierarchicalClusteringModel a) (ClusteringModel a)))
(forall (a) (if (HierarchicalClusteringModel a) (exists (b) (and (hasParameter a
                                                                               b)
                                                                 (HierarchicalClusteringModelParameter b)))))
(forall (a) (if (HierarchicalClusteringModel a) (hasHypothesisStructure a
                                                                        Dendrogram)))
(forall (a) (if (HierarchicalClusteringModelClass a) (ClusteringModelClass a)))
(forall (a) (if (HierarchicalClusteringModelParameter a) (ClusteringBasedModelParameter a)))
(forall (a) (if (HighBias-HighVariance a) (abstract-region a)))
(forall (a) (if (HillClimbing a) (IterativeImprovementSearch a)))
(forall (a) (if (HillClimbing a) (hasRecoveryOfPursuit a
                                                       Irrevocable)))
(forall (a) (if (HillClimbing a) (hasScopeOfSelection a Local)))
(forall (a) (if (HingeLoss a) (ClassificationModelEvalFunction a)))
(forall (a) (if (HypothesisApplicationAlgorithm a) (DM-Algorithm a)))
(forall (a) (if (HypothesisApplicationTask a) (CoreDM-Task a)))
(forall (a) (if (HypothesisApplicationTask a) (exists (b) (and (specifiesInputClass a
                                                                                    b)
                                                               (DM-HypothesisClass b)))))
(forall (a) (if (HypothesisApplicationTask a) (exists (b) (and (specifiesInputClass a
                                                                                    b)
                                                               (DataSetClass b)))))
(forall (a) (if (HypothesisApplicationTask a) (exists (b) (and (specifiesOutputClass a
                                                                                     b)
                                                               (DM-DataClass b)))))
(forall (a) (if (HypothesisCharacteristic a) (Characteristic a)))
(forall (a) (if (HypothesisComplexityControlStrategy a) (Strategy a)))
(forall (a) (if (HypothesisEvaluationFunction a) (EvaluationFunction a)))
(forall (a) (if (HypothesisEvaluationMeasure a) (Measure a)))
(forall (a) (if (HypothesisEvaluationTask a) (CoreDM-Task a)))
(forall (a) (if (HypothesisEvaluationTask a) (exists (b) (and (specifiesInputClass a
                                                                                   b)
                                                              (DM-HypothesisClass b)))))
(forall (a) (if (HypothesisEvaluationTask a) (exists (b) (and (specifiesInputClass a
                                                                                   b)
                                                              (DataSetClass b)))))
(forall (a) (if (HypothesisEvaluationTask a) (specifiesOutputClass a
                                                                   HypothesisEvaluationMeasure)))
(forall (a) (if (HypothesisProcessingTask a) (CoreDM-Task a)))
(forall (a) (if (HypothesisProcessingTask a) (exists (b) (and (specifiesInputClass a
                                                                                   b)
                                                              (DM-HypothesisClass b)))))
(forall (a) (if (HypothesisProcessingTask a) (exists (b) (and (specifiesOutputClass a
                                                                                    b)
                                                              (DM-HypothesisClass b)))))
(forall (a) (if (HypothesisStructure a) (non-physical-endurant a)))
(forall (a) (if (HypothesisTestBasedFSAlgorithm a) (FeatureSelectionAlgorithm a)))
(forall (a) (if (HypothesisTestBasedFSAlgorithm a) (exists (b) (and (hasFeatureEvaluator a
                                                                                         b)
                                                                    (StatisticBasedFWAlgorithm b)))))
(forall (a) (if (HypothesisTestBasedFSAlgorithm a) (exists (b) (and (hasOptimizationStrategy a
                                                                                             b)
                                                                    (RelaxationStrategy b)))))
(forall (a) (if (HypothesisTestBasedFSAlgorithm a) (interactsWithLearnerAs a
                                                                           Filter)))
(forall (a) (if (HypothesisTestBasedFSAlgorithm a) (and (exists (b) (and (StatisticalTest b)
                                                                         (hasDecisionStrategy a
                                                                                              b)))
                                                        (exists (b
                                                                 c) (if (and (hasDecisionStrategy a
                                                                                                  b)
                                                                             (hasDecisionStrategy a
                                                                                                  c)
                                                                             (StatisticalTest b)) (= b c))))))
(forall (a) (if (ICA-OptimizationProblem a) (ConvexOptimizationProblem a)))
(forall (a) (if (ID3Model a) (DiscriminantFunctionModel a)))
(forall (a) (if (ID3Model a) (exists (b) (and (hasModelComplexityMeasure a
                                                                         b)
                                              (NumberOfLeaves b)))))
(forall (a) (if (ID3Model a) (hasDecisionBoundary a
                                                  PiecewiseAxisParallelLinearBoundary)))
(forall (a) (if (ID3Model a) (hasHypothesisStructure a
                                                     UnivariateDecisionTree)))
(forall (a) (if (IO-Class a) (non-physical-endurant a)))
(forall (a) (if (IncrementalClusteringAlgorithm a) (ClusteringModelingAlgorithm a)))
(forall (a) (if (IncrementalReducedErrorPruningAlgorithm a) (RulePruningAlgorithm a)))
(forall (a) (if (IncrementalReducedErrorPruningAlgorithm a) (hasStopCriterion a
                                                                              RuleAccuracy)))
(forall (a) (if (InductionAlgorithm a) (exists (b) (and (hasOptimizationProblem a
                                                                                b)
                                                        (and (OptimizationProblem b)
                                                             (exists (c) (and (hasObjectiveFunction b
                                                                                                    c)
                                                                              (EvaluationFunction c))))))))
(forall (a) (if (InductionAlgorithm a) (and (exists (b) (and (HandlingOfCategoricalFeatures b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (HandlingOfCategoricalFeatures b)) (= b c))))))
(forall (a) (if (InductionAlgorithm a) (and (exists (b) (and (HandlingOfContinuousFeatures b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (HandlingOfContinuousFeatures b)) (= b c))))))
(forall (a) (if (InductionAlgorithm a) (and (exists (b) (and (HandlingOfInstanceWeights b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (HandlingOfInstanceWeights b)) (= b c))))))
(forall (a) (if (InductionAlgorithm a) (and (exists (b) (and (ToleranceToCorrelatedFeatures b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (ToleranceToCorrelatedFeatures b)) (= b c))))))
(forall (a) (if (InductionAlgorithm a) (and (exists (b) (and (ToleranceToHighDimensionality b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (ToleranceToHighDimensionality b)) (= b c))))))
(forall (a) (if (InductionAlgorithm a) (and (exists (b) (and (ToleranceToIrrelevantFeatures b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (ToleranceToIrrelevantFeatures b)) (= b c))))))
(forall (a) (if (InductionAlgorithm a) (and (exists (b) (and (ToleranceToMissingValues b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (ToleranceToMissingValues b)) (= b c))))))
(forall (a) (if (InductionAlgorithm a) (and (exists (b) (and (ToleranceToNoise b)
                                                             (has-quality a b)))
                                            (exists (b
                                                     c) (if (and (has-quality a
                                                                              b)
                                                                 (has-quality a
                                                                              c)
                                                                 (ToleranceToNoise b)) (= b c))))))
(forall (a) (if (InductionTask a) (CoreDM-Task a)))
(forall (a) (if (InductionTask a) (exists (b) (and (specifiesInputClass a
                                                                        b)
                                                   (DataSetClass b)))))
(forall (a) (if (InductionTask a) (exists (b) (and (specifiesOutputClass a
                                                                         b)
                                                   (DM-HypothesisClass b)))))
(forall (a) (if (Instance a) (DM-Data a)))
(forall (a) (if (Instance-BasedModelParameter a) (ModelParameter a)))
(forall (a) (if (InstanceRelatedAssumption a) (AlgorithmAssumption a)))
(forall (a) (if (InstanceWeightVector a) (Instance-BasedModelParameter a)))
(forall (a) (if (InstanceWeightVector a) (hasDataType a Vector)))
(forall (a) (if (InternalValidityModelFunction a) (ClusteringModelEvalFunction a)))
(forall (a) (if (Interpretability a) (HypothesisCharacteristic a)))
(forall (a) (if (IntervalFeature a) (QuantitativeFeature a)))
(forall (a) (if (IntervalFeatureCharacteristic a) (FeatureCharacteristic a)))
(forall (a) (if (IntervalFeatureValue a) (FeatureValue a)))
(forall (a) (if (ItemReassignmentToCluster a) (InternalValidityModelFunction a)))
(forall (a) (if (ItemSequenceTableFormat a) (TableFormat a)))
(forall (a) (if (ItemSetTableFormat a) (TableFormat a)))
(forall (a) (if (IterativeImprovementSearch a) (SearchStrategy a)))
(forall (a) (if (K-Means-Parameter a) (AlgorithmParameter a)))
(forall (a) (if (K-MeansAlgorithm a) (PartitionalClusteringAlgorithm a)))
(forall (a) (if (K-MeansAlgorithm a) (exists (b) (and (hasDistanceOrSimilarityFunction a
                                                                                       b)
                                                      (DistanceOrSimilarityFunction b)))))
(forall (a) (if (K-MeansAlgorithm a) (exists (b) (and (hasEvaluationFunction a
                                                                             b)
                                                      (or (ItemReassignmentToCluster b)
                                                          (SquaredError b))))))
(forall (a) (if (K-MeansAlgorithm a) (exists (b) (and (hasOptimizationProblem a
                                                                              b)
                                                      (OptimizationProblem b)))))
(forall (a) (if (K-MeansAlgorithm a) (exists (b) (and (hasParameter a
                                                                    b)
                                                      (K-Means-Parameter b)))))
(forall (a) (if (K-MeansAlgorithm a) (has-quality a
                                                  HandlesHardClustering)))
(forall (a) (if (K-MeansAlgorithm a) (has-quality a
                                                  HasRandomComponent)))
(forall (a) (if (K-MeansModel a) (PartitionalClusteringModel a)))
(forall (a) (if (K-MeansModelClass a) (PartitionalClusteringModelClass a)))
(forall (a) (if (KNN-Parameter a) (AlgorithmParameter a)))
(forall (a) (if (KNearestNeighborAlgorithm a) (ModelingAlgorithm a)))
(forall (a) (if (KNearestNeighborAlgorithm a) (exists (b) (and (addresses a
                                                                          b)
                                                               (ClassificationModelingTask b)))))
(forall (a) (if (KNearestNeighborAlgorithm a) (exists (b) (and (specifiesOutputClass a
                                                                                     b)
                                                               (KNearestNeighborModelClass b)))))
(forall (a) (if (KNearestNeighborAlgorithm a) (assumes a
                                                       FeatureIndependenceAssumption)))
(forall (a) (if (KNearestNeighborAlgorithm a) (hasParameter a
                                                            NumNearestNeighbors)))
(forall (a) (if (KNearestNeighborAlgorithm a) (hasParameter a
                                                            WeightNeighborVotes)))
(forall (a) (if (KNearestNeighborAlgorithm a) (has-quality a
                                                           EagerLearningPolicy)))
(forall (a) (if (KNearestNeighborAlgorithm a) (has-quality a
                                                           HandlesMulticlassClassification)))
(forall (a) (if (KNearestNeighborAlgorithm a) (has-quality a
                                                           HighBiasProfile)))
(forall (a) (if (KNearestNeighborAlgorithm a) (has-quality a
                                                           ToleratesNoIrrelevantFeatures)))
(forall (a) (if (KNearestNeighborModel a) (DiscriminativeModel a)))
(forall (a) (if (KNearestNeighborModel a) (hasHypothesisStructure a
                                                                  TrainingDataAsDistribution)))
(forall (a) (if (KNearestNeighborModelClass a) (DiscriminativeModelClass a)))
(forall (a) (if (KernelEuclideanDistance a) (DistanceFunction a)))
(forall (a) (if (KernelFunction a) (SimilarityFunction a)))
(forall (a) (if (KernelTypeParameter a) (SVC-Parameter a)))
(forall (a) (if (KernelWeightVector a) (Feature-BasedModelParameter a)))
(forall (a) (if (KernelWeightVector a) (hasDataType a Vector)))
(forall (a) (if (LabeledDataSet a) (forall (b) (if (has-quality a
                                                                b) (LabeledDataSetCharacteristic b)))))
(forall (a) (if (LabeledDataSet a) (and (exists (b) (and (AverageSVMFeatureWeight b)
                                                         (has-quality a b)))
                                        (exists (b c) (if (and (has-quality a b)
                                                               (has-quality a c)
                                                               (AverageSVMFeatureWeight b)) (= b c))))))
(forall (a) (if (LabeledDataSetClass a) (DataSetClass a)))
(forall (a) (if (LabeledDataTable a) (DataTable a)))
(forall (a) (if (LabeledDataTable a) (exists (b) (and (hasTargetFeature a
                                                                        b)
                                                      (Feature b)))))
(forall (a) (if (LeafSizeParameter a) (TreeInductionParameter a)))
(forall (a) (if (LearningPolicy a) (AlgorithmCharacteristic a)))
(forall (a) (if (LearningPolicy a) (exists (b) (and (inherent-in a
                                                                 b)
                                                    (InductionAlgorithm b)))))
(forall (a) (if (LearningPolicy a) (forall (b) (if (inherent-in a
                                                                b) (InductionAlgorithm b)))))
(forall (a) (if (LearningPolicy a) (and (exists (b) (and (Eager-Lazy b)
                                                         (has-quale a b)))
                                        (exists (b c) (if (and (has-quale a b)
                                                               (has-quale a c)
                                                               (Eager-Lazy b)) (= b c))))))
(forall (a) (if (Linear-NonLinear a) (abstract-region a)))
(forall (a) (if (LinearBoundary a) (DecisionBoundary a)))
(forall (a) (if (LinearCombination a) (GeneralizedAdditiveModel a)))
(forall (a) (if (LinearConstraint a) (Constraint a)))
(forall (a) (if (LinearDiscriminantModel a) (DiscriminantModel a)))
(forall (a) (if (LinearDiscriminantModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                                        b)
                                                             (NumberOfProbabilities b)))))
(forall (a) (if (LinearDiscriminantModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                                        b)
                                                             (NumberOfWeights b)))))
(forall (a) (if (LinearDiscriminantModel a) (hasDecisionBoundary a
                                                                 ArbitraryLinearBoundary)))
(forall (a) (if (LinearDiscriminantModel a) (hasHypothesisStructure a
                                                                    JointProbabilityDistribution)))
(forall (a) (if (LinearDiscriminantModel a) (and (exists (b) (and (ClassCondMeanMatrix b)
                                                                  (hasParameter a
                                                                                b)))
                                                 (exists (b
                                                          c) (if (and (hasParameter a
                                                                                    b)
                                                                      (hasParameter a
                                                                                    c)
                                                                      (ClassCondMeanMatrix b)) (= b c))))))
(forall (a) (if (LinearDiscriminantModel a) (and (exists (b) (and (SharedCovarianceMatrix b)
                                                                  (hasParameter a
                                                                                b)))
                                                 (exists (b
                                                          c) (if (and (hasParameter a
                                                                                    b)
                                                                      (hasParameter a
                                                                                    c)
                                                                      (SharedCovarianceMatrix b)) (= b c))))))
(forall (a) (if (LinearEqualityConstraint a) (LinearConstraint a)))
(forall (a) (if (LinearInequalityConstraint a) (LinearConstraint a)))
(forall (a) (if (LinearRegressionModel a) (RegressionModel a)))
(forall (a) (if (LinearSVCModel a) (SVCModel a)))
(forall (a) (if (LinearSVCModel a) (hasDecisionBoundary a
                                                        ArbitraryLinearBoundary)))
(forall (a) (if (LinearSVCModel a) (hasHypothesisStructure a
                                                           LinearCombinationOfFeatures)))
(forall (a) (if (List a) (StructuredType a)))
(forall (a) (if (LocalBeamSearch a) (IterativeImprovementSearch a)))
(forall (a) (if (LocalDelimitationStrategy a) (HypothesisComplexityControlStrategy a)))
(forall (a) (if (LocalPiecewiseModelStructure a) (NonlinearCombination a)))
(forall (a) (if (LogLikelihood a) (ClassificationModelEvalFunction a)))
(forall (a) (if (LogicalExpression a) (FormalExpression a)))
(forall (a) (if (LogicalModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (LogicalModelClass a) (DiscriminantFunctionModelClass a)))
(forall (a) (if (LogicalStructure a) (NonProbabilisticModelStructure a)))
(forall (a) (if (LogisticRegressionModel a) (DiscriminativeModel a)))
(forall (a) (if (LogisticRegressionModel a) (hasDecisionBoundary a
                                                                 ArbitraryLinearBoundary)))
(forall (a) (if (LogisticRegressionModel a) (hasHypothesisStructure a
                                                                    PosteriorProbabilityDistribution)))
(forall (a) (if (Low-Medium-High a) (abstract-region a)))
(forall (a) (if (ManifoldFeatureExtractionAlgorithm a) (UnsupervisedFeatureExtractionAlgorithm a)))
(forall (a) (if (ManifoldFeatureExtractionAlgorithm a) (exists (b) (and (hasDistanceOrSimilarityFunction a
                                                                                                         b)
                                                                        (or (DistanceFunction b)
                                                                            (SimilarityFunction b))))))
(forall (a) (if (MarkovNetwork a) (GraphicalModel a)))
(forall (a) (if (MathematicalExpression a) (FormalExpression a)))
(forall (a) (if (MathematicalFunction a) (MathematicalExpression a)))
(forall (a) (if (MathematicalModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (MathematicalStructure a) (NonProbabilisticModelStructure a)))
(forall (a) (if (MaxRule a) (TopKRule a)))
(forall (a) (if (MaxRule a) (and (hasFixedThreshold a b) (= 1.0 b)
                                 (float b))))
(forall (a) (if (MeanValueRegressor a) (BaselineRegressor a)))
(forall (a) (if (Measure a) (abstract-region a)))
(forall (a) (if (MeasureClass a) (DM-DataClass a)))
(forall (a) (if (MedianValueRegressor a) (BaselineRegressor a)))
(forall (a) (if (MetricLearningApproach a) (SupervisedFeatureExtractionAlgorithm a)))
(forall (a) (if (MinRule a) (BottomKRule a)))
(forall (a) (if (MinRule a) (and (hasFixedThreshold a b) (= 1.0 b)
                                 (float b))))
(forall (a) (if (Minimize-Maximize a) (abstract-region a)))
(forall (a) (if (Minimum-VarianceModel a) (HierarchicalClusteringModel a)))
(forall (a) (if (MissingValueImputationAlgorithm a) (DataProcessingAlgorithm a)))
(forall (a) (if (MissingValueImputationTask a) (DataCleaningTask a)))
(forall (a) (if (MissingValueImputationTask a) (exists (b) (and (specifiesInputClass a
                                                                                     b)
                                                                (DataSetClass b)))))
(forall (a) (if (MissingValueImputationTask a) (exists (b) (and (specifiesOutputClass a
                                                                                      b)
                                                                (DataSetClass b)))))
(forall (a) (if (MixtureModel a) (ProbabilityEstimationModel a)))
(forall (a) (if (ModelAggregationTask a) (ModelProcessingTask a)))
(forall (a) (if (ModelApplicationTask a) (HypothesisApplicationTask a)))
(forall (a) (if (ModelApplicationTask a) (exists (b) (and (specifiesInputClass a
                                                                               b)
                                                          (DM-ModelClass b)))))
(forall (a) (if (ModelCharacteristic a) (HypothesisCharacteristic a)))
(forall (a) (if (ModelComplexity a) (ModelCharacteristic a)))
(forall (a) (if (ModelComplexity a) (exists (b) (and (has-quale a
                                                                b)
                                                     (ModelComplexityMeasure b)))))
(forall (a) (if (ModelComplexityFunction a) (MathematicalFunction a)))
(forall (a) (if (ModelComplexityMeasure a) (Measure a)))
(forall (a) (if (ModelEvaluationFunction a) (HypothesisEvaluationFunction a)))
(forall (a) (if (ModelEvaluationMeasure a) (HypothesisEvaluationMeasure a)))
(forall (a) (if (ModelEvaluationTask a) (HypothesisEvaluationTask a)))
(forall (a) (if (ModelEvaluationTask a) (exists (b) (and (specifiesInputClass a
                                                                              b)
                                                         (DM-ModelClass b)))))
(forall (a) (if (ModelEvaluationTask a) (specifiesOutputClass a
                                                              ModelEvaluationMeasure)))
(forall (a) (if (ModelParameter a) (Parameter a)))
(forall (a) (if (ModelParameterCount a) (ModelComplexityMeasure a)))
(forall (a) (if (ModelParameterCount a) (and (exists (b) (and (nonNegativeInteger b)
                                                              (hasDataValue a
                                                                            b)))
                                             (exists (b
                                                      c) (if (and (hasDataValue a
                                                                                b)
                                                                  (hasDataValue a
                                                                                c)
                                                                  (nonNegativeInteger b)) (= b c))))))
(forall (a) (if (ModelParameterMagnitude a) (ModelComplexityMeasure a)))
(forall (a) (if (ModelParameterMagnitude a) (and (exists (b) (and (float b)
                                                                  (hasDataValue a
                                                                                b)))
                                                 (exists (b
                                                          c) (if (and (hasDataValue a
                                                                                    b)
                                                                      (hasDataValue a
                                                                                    c)
                                                                      (float b)) (= b c))))))
(forall (a) (if (ModelPerformance a) (ModelCharacteristic a)))
(forall (a) (if (ModelPerformance a) (exists (b) (and (has-quale a
                                                                 b)
                                                      (ModelEvaluationMeasure b)))))
(forall (a) (if (ModelProcessingTask a) (HypothesisProcessingTask a)))
(forall (a) (if (ModelProcessingTask a) (exists (b) (and (specifiesInputClass a
                                                                              b)
                                                         (DM-ModelClass b)))))
(forall (a) (if (ModelProcessingTask a) (exists (b) (and (specifiesOutputClass a
                                                                               b)
                                                         (DM-ModelClass b)))))
(forall (a) (if (ModelPruningAlgorithm a) (exists (b) (and (hasStopCriterion a
                                                                             b)
                                                           (ModelEvaluationFunction b)))))
(forall (a) (if (ModelPruningTask a) (ModelProcessingTask a)))
(forall (a) (if (ModelStructure a) (HypothesisStructure a)))
(forall (a) (if (ModelingAlgorithm a) (exists (b) (and (assumes a
                                                                b)
                                                       (AlgorithmAssumption b)))))
(forall (a) (if (ModelingAlgorithm a) (exists (b) (and (hasOptimizationProblem a
                                                                               b)
                                                       (and (OptimizationProblem b)
                                                            (exists (c) (and (hasObjectiveFunction b
                                                                                                   c)
                                                                             (ModelEvaluationFunction c))))))))
(forall (a) (if (ModelingAlgorithm a) (forall (b) (if (hasPostprocessor a
                                                                        b) (ModelProcessingAlgorithm b)))))
(forall (a) (if (ModelingAlgorithm a) (forall (b) (if (hasPreprocessor a
                                                                       b) (DataProcessingAlgorithm b)))))
(forall (a) (if (ModelingAlgorithm a) (and (exists (b) (and (LearningPolicy b)
                                                            (has-quality a b)))
                                           (exists (b c) (if (and (has-quality a
                                                                               b)
                                                                  (has-quality a
                                                                               c)
                                                                  (LearningPolicy b)) (= b c))))))
(forall (a) (if (ModelingTask a) (InductionTask a)))
(forall (a) (if (ModelingTask a) (exists (b) (and (specifiesOutputClass a
                                                                        b)
                                                  (DM-ModelClass b)))))
(forall (a) (if (MultilayerPerceptronAlgorithm a) (FeedforwardNNAlgorithm a)))
(forall (a) (if (MultilayerPerceptronAlgorithm a) (hasParameter a
                                                                LearningRate)))
(forall (a) (if (MultilayerPerceptronAlgorithm a) (hasParameter a
                                                                NumHiddenLayers)))
(forall (a) (if (MultilayerPerceptronAlgorithm a) (hasParameter a
                                                                NumHiddenUnits)))
(forall (a) (if (Multinomial-N a) (DistributionParameter a)))
(forall (a) (if (Multinomial-N a) (hasDataType a Integer)))
(forall (a) (if (Multinomial-Pvector a) (DistributionParameter a)))
(forall (a) (if (Multinomial-Pvector a) (hasDataType a Vector)))
(forall (a) (if (MultinomialDensityEstimation a) (DiscreteParametricDensityEstimation a)))
(forall (a) (if (MultinomialDensityEstimation a) (exists (b) (and (hasDistributionParameter a
                                                                                            b)
                                                                  (Multinomial-N b)))))
(forall (a) (if (MultinomialDensityEstimation a) (exists (b) (and (hasDistributionParameter a
                                                                                            b)
                                                                  (Multinomial-Pvector b)))))
(forall (a) (if (MultivariateNormalDensityEstimation a) (ContinuousParametricDensityEstimation a)))
(forall (a) (if (MultivariateTreeInductionAlgorithm a) (ClassificationTreeInductionAlgorithm a)))
(forall (a) (if (MultivariateTreeInductionAlgorithm a) (has-quality a
                                                                    HandlesMulticlassClassification)))
(forall (a) (if (NBTreeModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (NBTreeModel a) (hasHypothesisStructure a
                                                        UnivariateDecisionTree)))
(forall (a) (if (NBTreeModel a) (and (exists (b) (and (NumberOfLeaves b)
                                                      (hasModelComplexityMeasure a
                                                                                 b)))
                                     (exists (b
                                              c) (if (and (hasModelComplexityMeasure a
                                                                                     b)
                                                          (hasModelComplexityMeasure a
                                                                                     c)
                                                          (NumberOfLeaves b)) (= b c))))))
(forall (a) (if (NNParameter a) (AlgorithmParameter a)))
(forall (a) (if (NaiveBayesAlgorithm a) (BayesianAlgorithm a)))
(forall (a) (if (NaiveBayesAlgorithm a) (exists (b) (and (specifiesOutputClass a
                                                                               b)
                                                         (NaiveBayesModel b)))))
(forall (a) (if (NaiveBayesAlgorithm a) (assumes a
                                                 ConditionalFeatureIndependenceAssumption)))
(forall (a) (if (NaiveBayesAlgorithm a) (has-quality a
                                                     HandlesCategoricalFeatures)))
(forall (a) (if (NaiveBayesAlgorithm a) (has-quality a
                                                     HandlesMulticlassClassification)))
(forall (a) (if (NaiveBayesAlgorithm a) (has-quality a
                                                     HighBiasProfile)))
(forall (a) (if (NaiveBayesAlgorithm a) (has-quality a
                                                     ToleratesIrrelevantFeatures)))
(forall (a) (if (NaiveBayesAlgorithm a) (has-quality a
                                                     ToleratesMissingValues)))
(forall (a) (if (NaiveBayesDiscreteModel a) (NaiveBayesModel a)))
(forall (a) (if (NaiveBayesDiscreteModel a) (forall (b) (if (hasParameter a
                                                                          b) (or (ClassCondProbMatrix b)
                                                                                 (ClassPriorVector b))))))
(forall (a) (if (NaiveBayesDiscreteModel a) (and (exists (b) (and (ClassCondProbMatrix b)
                                                                  (hasParameter a
                                                                                b)))
                                                 (exists (b
                                                          c) (if (and (hasParameter a
                                                                                    b)
                                                                      (hasParameter a
                                                                                    c)
                                                                      (ClassCondProbMatrix b)) (= b c))))))
(forall (a) (if (NaiveBayesKernelModel a) (NaiveBayesModel a)))
(forall (a) (if (NaiveBayesKernelModel a) (forall (b) (if (hasParameter a
                                                                        b) (or (ClassCondProbMatrix b)
                                                                               (ClassPriorVector b))))))
(forall (a) (if (NaiveBayesKernelModel a) (exists (b
                                                   c) (if (and (hasParameter a
                                                                             b)
                                                               (hasParameter a
                                                                             c)
                                                               (ClassCondProbMatrix b)) (= b c)))))
(forall (a) (if (NaiveBayesModel a) (BayesianModel a)))
(forall (a) (if (NaiveBayesModel a) (hasHypothesisStructure a
                                                            JointProbabilityDistribution)))
(forall (a) (if (NaiveBayesModel a) (and (exists (b) (and (ClassPriorVector b)
                                                          (hasParameter a b)))
                                         (exists (b c) (if (and (hasParameter a
                                                                              b)
                                                                (hasParameter a
                                                                              c)
                                                                (ClassPriorVector b)) (= b c))))))
(forall (a) (if (NaiveBayesModelClass a) (BayesianModelClass a)))
(forall (a) (if (NaiveBayesMultinomialModel a) (NaiveBayesModel a)))
(forall (a) (if (NaiveBayesMultinomialModel a) (forall (b) (if (hasParameter a
                                                                             b) (or (ClassCondProbMatrix b)
                                                                                    (ClassPriorVector b))))))
(forall (a) (if (NaiveBayesMultinomialModel a) (and (exists (b) (and (ClassCondProbMatrix b)
                                                                     (hasParameter a
                                                                                   b)))
                                                    (exists (b
                                                             c) (if (and (hasParameter a
                                                                                       b)
                                                                         (hasParameter a
                                                                                       c)
                                                                         (ClassCondProbMatrix b)) (= b c))))))
(forall (a) (if (NaiveBayesNormalModel a) (NaiveBayesModel a)))
(forall (a) (if (NaiveBayesNormalModel a) (forall (b) (if (hasParameter a
                                                                        b) (or (ClassCondMeanMatrix b)
                                                                               (ClassCondProbMatrix b)
                                                                               (ClassCondVarianceMatrix b)
                                                                               (ClassPriorVector b))))))
(forall (a) (if (NaiveBayesNormalModel a) (hasDecisionBoundary a
                                                               ArbitraryLinearBoundary)))
(forall (a) (if (NaiveBayesNormalModel a) (exists (b
                                                   c) (if (and (hasParameter a
                                                                             b)
                                                               (hasParameter a
                                                                             c)
                                                               (ClassCondMeanMatrix b)) (= b c)))))
(forall (a) (if (NaiveBayesNormalModel a) (exists (b
                                                   c) (if (and (hasParameter a
                                                                             b)
                                                               (hasParameter a
                                                                             c)
                                                               (ClassCondProbMatrix b)) (= b c)))))
(forall (a) (if (NaiveBayesNormalModel a) (exists (b
                                                   c) (if (and (hasParameter a
                                                                             b)
                                                               (hasParameter a
                                                                             c)
                                                               (ClassCondVarianceMatrix b)) (= b c)))))
(forall (a) (if (NeighborhoodRange a) (abstract-region a)))
(forall (a) (if (NeuralNetworkAlgorithm a) (ModelingAlgorithm a)))
(forall (a) (if (NeuralNetworkAlgorithm a) (exists (b) (and (addresses a
                                                                       b)
                                                            (ClassificationModelingTask b)))))
(forall (a) (if (NeuralNetworkAlgorithm a) (exists (b) (and (addresses a
                                                                       b)
                                                            (RegressionModelingTask b)))))
(forall (a) (if (NeuralNetworkAlgorithm a) (exists (b) (and (hasOptimizationProblem a
                                                                                    b)
                                                            (and (NonConvexOptimizationProblem b)
                                                                 (exists (c) (and (hasObjectiveFunction b
                                                                                                        c)
                                                                                  (ClassificationModelEvalFunction c))))))))
(forall (a) (if (NeuralNetworkAlgorithm a) (exists (b) (and (specifiesOutputClass a
                                                                                  b)
                                                            (NeuralNetworkModelClass b)))))
(forall (a) (if (NeuralNetworkAlgorithm a) (forall (b) (if (hasSelfTunedHyperParameter a
                                                                                       b) (NNParameter b)))))
(forall (a) (if (NeuralNetworkAlgorithm a) (has-quality a
                                                        EagerLearningPolicy)))
(forall (a) (if (NeuralNetworkAlgorithm a) (has-quality a
                                                        HandlesContinuousFeatures)))
(forall (a) (if (NeuralNetworkAlgorithm a) (has-quality a
                                                        HandlesMulticlassClassification)))
(forall (a) (if (NeuralNetworkAlgorithm a) (has-quality a
                                                        HandlesNoCategoricalFeatures)))
(forall (a) (if (NeuralNetworkAlgorithm a) (has-quality a
                                                        ToleratesNoMissingValues)))
(forall (a) (if (NeuralNetworkModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (NeuralNetworkModelClass a) (DiscriminantFunctionModelClass a)))
(forall (a) (if (NoiseReductionTask a) (DataCleaningTask a)))
(forall (a) (if (Non-IncrementalClusteringAlgorithm a) (ClusteringModelingAlgorithm a)))
(forall (a) (if (NonConvexOptimizationProblem a) (ContinuousOptimizationProblem a)))
(forall (a) (if (NonLinearRegressionModel a) (RegressionModel a)))
(forall (a) (if (NonParametricModel a) (ProbabilityEstimationModel a)))
(forall (a) (if (NonParametricTest a) (StatisticalTest a)))
(forall (a) (if (NonParametricTestBasedFSAlgorithm a) (HypothesisTestBasedFSAlgorithm a)))
(forall (a) (if (NonParametricTestBasedFSAlgorithm a) (and (exists (b) (and (NonParametricTest b)
                                                                            (hasDecisionStrategy a
                                                                                                 b)))
                                                           (exists (b
                                                                    c) (if (and (hasDecisionStrategy a
                                                                                                     b)
                                                                                (hasDecisionStrategy a
                                                                                                     c)
                                                                                (NonParametricTest b)) (= b c))))))
(forall (a) (if (NonProbabilisticModelStructure a) (ModelStructure a)))
(forall (a) (if (NonlinearBoundary a) (DecisionBoundary a)))
(forall (a) (if (NonlinearCombination a) (MathematicalStructure a)))
(forall (a) (if (NonlinearPolynomialKernel a) (NonlinearPositiveSemidefiniteKernel a)))
(forall (a) (if (NonlinearPositiveSemidefiniteKernel a) (PositiveSemidefiniteKernel a)))
(forall (a) (if (NonlinearSVCModel a) (SVCModel a)))
(forall (a) (if (NonlinearSVCModel a) (exists (b) (and (hasDecisionBoundary a
                                                                            b)
                                                       (NonlinearBoundary b)))))
(forall (a) (if (NonlinearSVCModel a) (hasHypothesisStructure a
                                                              LinearCombinationOfKernels)))
(forall (a) (if (NonlinearSVCModelClass a) (SVCModelClass a)))
(forall (a) (if (NonparametricDensityEstimation a) (ProbabilityDensityEstimation a)))
(forall (a) (if (NonpositiveSemidefiniteKernel a) (KernelFunction a)))
(forall (a) (if (NuSVC-Algorithm a) (SVC-Algorithm a)))
(forall (a) (if (NuSVC-Algorithm a) (has-quality a
                                                 HandlesBinaryClassification)))
(forall (a) (if (NumberOfInternalNodes a) (ModelParameterCount a)))
(forall (a) (if (NumberOfLeaves a) (ModelParameterCount a)))
(forall (a) (if (NumberOfProbabilities a) (ModelParameterCount a)))
(forall (a) (if (NumberOfRules a) (ModelParameterCount a)))
(forall (a) (if (NumberOfSupportVectors a) (ModelParameterCount a)))
(forall (a) (if (NumberOfWeights a) (ModelParameterCount a)))
(forall (a) (if (OneClassSVC-Algorithm a) (SVC-Algorithm a)))
(forall (a) (if (OneClassSVC-Algorithm a) (has-quality a
                                                       HandlesOneClassClassification)))
(forall (a) (if (OpParameterSetting a) (abstract-region a)))
(forall (a) (if (OpParameterSetting a) (and (exists (b) (and (OperatorParameter b)
                                                             (setsValueOf a b)))
                                            (exists (b
                                                     c) (if (and (setsValueOf a
                                                                              b)
                                                                 (setsValueOf a
                                                                              c)
                                                                 (OperatorParameter b)) (= b c))))))
(forall (a) (if (OperatorParameter a) (Parameter a)))
(forall (a) (if (OperatorParameter a) (forall (b) (if (implements a
                                                                  b) (AlgorithmParameter b)))))
(forall (a) (if (OperatorParameter a) (and (exists (b) (and (string b)
                                                            (hasParameterKey a
                                                                             b)))
                                           (exists (b
                                                    c) (if (and (hasParameterKey a
                                                                                 b)
                                                                (hasParameterKey a
                                                                                 c)
                                                                (string b)) (= b c))))))
(forall (a) (if (Optimal-Suboptimal a) (abstract-region a)))
(forall (a) (if (OptimizationProblem a) (non-physical-endurant a)))
(forall (a) (if (OptimizationProblem a) (exists (b) (and (hasObjectiveFunction a
                                                                               b)
                                                         (MathematicalFunction b)))))
(forall (a) (if (OptimizationProblem a) (exists (b) (and (hasOptimizationGoal a
                                                                              b)
                                                         (Minimize-Maximize b)))))
(forall (a) (if (OptimizationProblem a) (forall (b) (if (hasConstraint a
                                                                       b) (Constraint b)))))
(forall (a) (if (OptimizationStrategy a) (Strategy a)))
(forall (a) (if (OrderDependency a) (AlgorithmCharacteristic a)))
(forall (a) (if (OrdinalFeature a) (QualitativeFeature a)))
(forall (a) (if (OrdinalFeatureCharacteristic a) (FeatureCharacteristic a)))
(forall (a) (if (OrdinalFeatureValue a) (FeatureValue a)))
(forall (a) (if (Orthogonal-NonOrthogonal a) (abstract-region a)))
(forall (a) (if (PARTModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (PARTModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                          b)
                                               (NumberOfRules b)))))
(forall (a) (if (PARTModel a) (hasDecisionBoundary a
                                                   PiecewiseAxisParallelLinearBoundary)))
(forall (a) (if (PARTModel a) (hasHypothesisStructure a
                                                      DecisionList)))
(forall (a) (if (PRISMModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (PRISMModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                           b)
                                                (NumberOfRules b)))))
(forall (a) (if (PRISMModel a) (hasDecisionBoundary a
                                                    PiecewiseAxisParallelLinearBoundary)))
(forall (a) (if (PRISMModel a) (hasHypothesisStructure a
                                                       UnweightedRuleSet)))
(forall (a) (if (Parameter a) (abstract-quality a)))
(forall (a) (if (Parameter a) (exists (b c) (if (and (hasDataType a
                                                                  b)
                                                     (hasDataType a c)
                                                     (DataType b)) (= b c)))))
(forall (a) (if (Parameter a) (exists (b
                                       c) (if (and (hasDefaultValue a b)
                                                   (hasDefaultValue a
                                                                    c)) (= b c)))))
(forall (a) (if (ParametricDensityEstimation a) (ProbabilityDensityEstimation a)))
(forall (a) (if (ParametricDensityEstimation a) (exists (b) (and (hasDistributionParameter a
                                                                                           b)
                                                                 (DistributionParameter b)))))
(forall (a) (if (ParametricDensityEstimation a) (and (exists (b) (and (DataType b)
                                                                      (requiresDataType a
                                                                                        b)))
                                                     (exists (b
                                                              c) (if (and (requiresDataType a
                                                                                            b)
                                                                          (requiresDataType a
                                                                                            c)
                                                                          (DataType b)) (= b c))))))
(forall (a) (if (ParametricModel a) (ProbabilityEstimationModel a)))
(forall (a) (if (ParametricTest a) (StatisticalTest a)))
(forall (a) (if (ParametricTestBasedFSAlgorithm a) (HypothesisTestBasedFSAlgorithm a)))
(forall (a) (if (ParametricTestBasedFSAlgorithm a) (and (exists (b) (and (ParametricTest b)
                                                                         (hasDecisionStrategy a
                                                                                              b)))
                                                        (exists (b
                                                                 c) (if (and (hasDecisionStrategy a
                                                                                                  b)
                                                                             (hasDecisionStrategy a
                                                                                                  c)
                                                                             (ParametricTest b)) (= b c))))))
(forall (a) (if (PartitionalClusteringAlgorithm a) (ClusteringModelingAlgorithm a)))
(forall (a) (if (PartitionalClusteringModel a) (ClusteringModel a)))
(forall (a) (if (PartitionalClusteringModelClass a) (ClusteringModelClass a)))
(forall (a) (if (PartitionalClusteringModelParameter a) (ClusteringBasedModelParameter a)))
(forall (a) (if (PathBasedSearch a) (SearchStrategy a)))
(forall (a) (if (PatternDiscoveryAlgorithm a) (exists (b) (and (hasOptimizationProblem a
                                                                                       b)
                                                               (and (OptimizationProblem b)
                                                                    (exists (c) (and (hasObjectiveFunction b
                                                                                                           c)
                                                                                     (PatternEvaluationFunction c))))))))
(forall (a) (if (PatternDiscoveryTask a) (InductionTask a)))
(forall (a) (if (PatternDiscoveryTask a) (exists (b) (and (specifiesOutputClass a
                                                                                b)
                                                          (DM-PatternSetClass b)))))
(forall (a) (if (PatternEvaluationFunction a) (HypothesisEvaluationFunction a)))
(forall (a) (if (PatternPruningAlgorithm a) (PatternProcessingAlgorithm a)))
(forall (a) (if (PatternPruningTask a) (PatternSetProcessingTask a)))
(forall (a) (if (PatternSetApplicationTask a) (HypothesisApplicationTask a)))
(forall (a) (if (PatternSetApplicationTask a) (exists (b) (and (specifiesInputClass a
                                                                                    b)
                                                               (DM-PatternSetClass b)))))
(forall (a) (if (PatternSetBasedClassifModelingAlgorithm a) (ClassificationModelingAlgorithm a)))
(forall (a) (if (PatternSetBasedModelStructure a) (NonProbabilisticModelStructure a)))
(forall (a) (if (PatternSetCharacteristic a) (HypothesisCharacteristic a)))
(forall (a) (if (PatternSetEvaluationMeasure a) (HypothesisEvaluationMeasure a)))
(forall (a) (if (PatternSetEvaluationTask a) (HypothesisEvaluationTask a)))
(forall (a) (if (PatternSetEvaluationTask a) (exists (b) (and (specifiesInputClass a
                                                                                   b)
                                                              (DM-PatternSetClass b)))))
(forall (a) (if (PatternSetProcessingTask a) (HypothesisProcessingTask a)))
(forall (a) (if (PatternSetProcessingTask a) (exists (b) (and (specifiesInputClass a
                                                                                   b)
                                                              (DM-PatternSetClass b)))))
(forall (a) (if (PatternSetProcessingTask a) (exists (b) (and (specifiesOutputClass a
                                                                                    b)
                                                              (DM-PatternSetClass b)))))
(forall (a) (if (PatternStructure a) (HypothesisStructure a)))
(forall (a) (if (PerceptronModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (PerceptronModel a) (hasDecisionBoundary a
                                                         ArbitraryLinearBoundary)))
(forall (a) (if (PerceptronModel a) (hasHypothesisStructure a
                                                            LinearCombinationOfFeatures)))
(forall (a) (if (PerceptronModel a) (and (exists (b) (and (SetOfWeightVectors b)
                                                          (hasParameter a b)))
                                         (exists (b c) (if (and (hasParameter a
                                                                              b)
                                                                (hasParameter a
                                                                              c)
                                                                (SetOfWeightVectors b)) (= b c))))))
(forall (a) (if (PerformanceBoundsAnalysis a) (ModelEvaluationAlgorithm a)))
(forall (a) (if (PiecewiseLinearBoundary a) (NonlinearBoundary a)))
(forall (a) (if (PolynomialKernelSVCModel a) (NonlinearSVCModel a)))
(forall (a) (if (PositiveSemidefiniteKernel a) (KernelFunction a)))
(forall (a) (if (PositiveSemidefiniteKernel a) (and (exists (b) (and (boolean b)
                                                                     (hasExplicitFeatureSpace a
                                                                                              b)))
                                                    (exists (b
                                                             c) (if (and (hasExplicitFeatureSpace a
                                                                                                  b)
                                                                         (hasExplicitFeatureSpace a
                                                                                                  c)
                                                                         (boolean b)) (= b c))))))
(forall (a) (if (PosteriorProbabilityAssumption a) (ProbabilityDistributionRelatedAssumption a)))
(forall (a) (if (PredictionTask a) (ModelApplicationTask a)))
(forall (a) (if (PredictionTask a) (exists (b) (and (specifiesInputClass a
                                                                         b)
                                                    (PredictiveModelClass b)))))
(forall (a) (if (PredictionTask a) (exists (b) (and (specifiesInputClass a
                                                                         b)
                                                    (UnlabeledDataSetClass b)))))
(forall (a) (if (PredictionTask a) (exists (b) (and (specifiesOutputClass a
                                                                          b)
                                                    (LabeledDataSetClass b)))))
(forall (a) (if (PredictiveModel a) (DM-Model a)))
(forall (a) (if (PredictiveModelClass a) (DM-ModelClass a)))
(forall (a) (if (PredictiveModelEvalFunction a) (ModelEvaluationFunction a)))
(forall (a) (if (PredictiveModelingTask a) (ModelingTask a)))
(forall (a) (if (PredictiveModelingTask a) (exists (b) (and (specifiesInputClass a
                                                                                 b)
                                                            (LabeledDataSetClass b)))))
(forall (a) (if (PredictiveModelingTask a) (exists (b) (and (specifiesOutputClass a
                                                                                  b)
                                                            (PredictiveModelClass b)))))
(forall (a) (if (PrimitiveType a) (DataType a)))
(forall (a) (if (ProbabilisticClusteringAlgorithm a) (ClusteringModelingAlgorithm a)))
(forall (a) (if (ProbabilisticModelClass a) (DescriptiveModelClass a)))
(forall (a) (if (ProbabilisticModelStructure a) (ModelStructure a)))
(forall (a) (if (ProbabilityDensityEstimation a) (non-physical-endurant a)))
(forall (a) (if (ProbabilityDistributionRelatedAssumption a) (AlgorithmAssumption a)))
(forall (a) (if (ProbabilityEstimationAlgorithm a) (ModelingAlgorithm a)))
(forall (a) (if (ProbabilityEstimationModel a) (DescriptiveModel a)))
(forall (a) (if (ProbabilityEstimationTask a) (DescriptiveModelingTask a)))
(forall (a) (if (ProbabilityEstimationTask a) (exists (b) (and (specifiesOutputClass a
                                                                                     b)
                                                               (ProbabilisticModelClass b)))))
(forall (a) (if (ProjectiveFeatureExtractionAlgorithm a) (UnsupervisedFeatureExtractionAlgorithm a)))
(forall (a) (if (PropositionalLogicStructure a) (LogicalStructure a)))
(forall (a) (if (PropositionalRuleSet a) (PropositionalLogicStructure a)))
(forall (a) (if (PruningStrategy a) (HypothesisComplexityControlStrategy a)))
(forall (a) (if (QuadraticConstraint a) (Constraint a)))
(forall (a) (if (QuadraticDiscriminantModel a) (DiscriminantModel a)))
(forall (a) (if (QuadraticDiscriminantModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                                           b)
                                                                (NumberOfProbabilities b)))))
(forall (a) (if (QuadraticDiscriminantModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                                           b)
                                                                (NumberOfWeights b)))))
(forall (a) (if (QuadraticDiscriminantModel a) (hasDecisionBoundary a
                                                                    QuadraticBoundary)))
(forall (a) (if (QuadraticDiscriminantModel a) (hasHypothesisStructure a
                                                                       JointProbabilityDistribution)))
(forall (a) (if (QuadraticDiscriminantModel a) (and (exists (b) (and (ClassCondMeanMatrix b)
                                                                     (hasParameter a
                                                                                   b)))
                                                    (exists (b
                                                             c) (if (and (hasParameter a
                                                                                       b)
                                                                         (hasParameter a
                                                                                       c)
                                                                         (ClassCondMeanMatrix b)) (= b c))))))
(forall (a) (if (QuadraticDiscriminantModel a) (and (exists (b) (and (SetOfClassCondCovarianceMatrices b)
                                                                     (hasParameter a
                                                                                   b)))
                                                    (exists (b
                                                             c) (if (and (hasParameter a
                                                                                       b)
                                                                         (hasParameter a
                                                                                       c)
                                                                         (SetOfClassCondCovarianceMatrices b)) (= b c))))))
(forall (a) (if (QuadraticEqualityConstraint a) (QuadraticConstraint a)))
(forall (a) (if (QuadraticInequalityConstraint a) (QuadraticConstraint a)))
(forall (a) (if (QuadraticProgramming a) (ExactContinuousOptimizationStrategy a)))
(forall (a) (if (QualitativeFeature a) (Feature a)))
(forall (a) (if (QuantitativeFeature a) (Feature a)))
(forall (a) (if (RM-OperatorParameter a) (OperatorParameter a)))
(forall (a) (if (ROperator a) (DM-Operator a)))
(forall (a) (if (RadialBasisFunctionNetworkAlgorithm a) (FeedforwardNNAlgorithm a)))
(forall (a) (if (RadialBasisFunctionNetworkAlgorithm a) (hasParameter a
                                                                      NumHiddenUnits)))
(forall (a) (if (RandomComponent a) (AlgorithmCharacteristic a)))
(forall (a) (if (RandomTreeModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (RandomTreeModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                                b)
                                                     (NumberOfLeaves b)))))
(forall (a) (if (RandomTreeModel a) (hasDecisionBoundary a
                                                         PiecewiseAxisParallelLinearBoundary)))
(forall (a) (if (RandomTreeModel a) (hasHypothesisStructure a
                                                            UnivariateDecisionTree)))
(forall (a) (if (RangeOfNeighborhood a) (AlgorithmCharacteristic a)))
(forall (a) (if (RangeOfNeighborhood a) (exists (b) (and (inherent-in a
                                                                      b)
                                                         (FeatureExtractionAlgorithm b)))))
(forall (a) (if (RangeOfNeighborhood a) (and (exists (b) (and (NeighborhoodRange b)
                                                              (has-quale a b)))
                                             (exists (b c) (if (and (has-quale a
                                                                               b)
                                                                    (has-quale a
                                                                               c)
                                                                    (NeighborhoodRange b)) (= b c))))))
(forall (a) (if (RapidMinerOperator a) (DM-Operator a)))
(forall (a) (if (RecoveryOfPursuit a) (abstract-region a)))
(forall (a) (if (RecurrentNNAlgorithm a) (NeuralNetworkAlgorithm a)))
(forall (a) (if (RegressionModel a) (PredictiveModel a)))
(forall (a) (if (RegressionModelClass a) (PredictiveModelClass a)))
(forall (a) (if (RegressionModelEvalFunction a) (PredictiveModelEvalFunction a)))
(forall (a) (if (RegressionModelingTask a) (PredictiveModelingTask a)))
(forall (a) (if (RegressionModelingTask a) (exists (b) (and (specifiesOutputClass a
                                                                                  b)
                                                            (RegressionModelClass b)))))
(forall (a) (if (RegressionModelingTask a) (specifiesInputClass a
                                                                ContinuousLabeledDataSet)))
(forall (a) (if (RegressionTask a) (PredictionTask a)))
(forall (a) (if (RegressionTask a) (exists (b) (and (specifiesInputClass a
                                                                         b)
                                                    (RegressionModelClass b)))))
(forall (a) (if (RegressionTask a) (specifiesOutputClass a
                                                         ContinuousLabeledDataSet)))
(forall (a) (if (RegressionTreeInductionAlgorithm a) (RegressionModelingAlgorithm a)))
(forall (a) (if (RegularizationParameter a) (Parameter a)))
(forall (a) (if (RegularizationParameter a) (hasDataType a Real)))
(forall (a) (if (RegularizationStrategy a) (HypothesisComplexityControlStrategy a)))
(forall (a) (if (RegularizedClassificationModelEvalFunction a) (ClassificationModelEvalFunction a)))
(forall (a) (if (RegularizedClassificationModelEvalFunction a) (exists (b) (and (hasCombinationFunction a
                                                                                                        b)
                                                                                (CombinationFunction b)))))
(forall (a) (if (RegularizedClassificationModelEvalFunction a) (exists (b) (and (hasComplexityComponent a
                                                                                                        b)
                                                                                (ModelComplexityFunction b)))))
(forall (a) (if (RegularizedClassificationModelEvalFunction a) (exists (b) (and (hasPerformanceComponent a
                                                                                                         b)
                                                                                (ClassificationModelEvalFunction b)))))
(forall (a) (if (RegularizedClassificationModelEvalFunction a) (forall (b) (if (hasParameter a
                                                                                             b) (RegularizationParameter b)))))
(forall (a) (if (RegularizedDiscriminantModel a) (DiscriminantModel a)))
(forall (a) (if (RelOp a) (abstract-region a)))
(forall (a) (if (RelativeValidityModelFunction a) (ClusteringModelEvalFunction a)))
(forall (a) (if (RelaxationStrategy a) (DiscreteOptimizationStrategy a)))
(forall (a) (if (RipperModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (RipperModel a) (exists (b) (and (hasModelComplexityMeasure a
                                                                            b)
                                                 (NumberOfRules b)))))
(forall (a) (if (RipperModel a) (hasDecisionBoundary a
                                                     PiecewiseAxisParallelLinearBoundary)))
(forall (a) (if (RipperModel a) (hasHypothesisStructure a
                                                        UnweightedRuleSet)))
(forall (a) (if (Rule a) (PatternStructure a)))
(forall (a) (if (RuleEnsembleInductionAlgorithm a) (ClassificationRuleInductionAlgorithm a)))
(forall (a) (if (RuleInductionStrategy a) (AlgorithmCharacteristic a)))
(forall (a) (if (RuleInductionStrategy a) (exists (b) (and (inherent-in a
                                                                        b)
                                                           (ClassificationRuleInductionAlgorithm b)))))
(forall (a) (if (RuleInductionStrategy a) (and (exists (b) (and (GenToSpec-SpecToGen b)
                                                                (has-quale a
                                                                           b)))
                                               (exists (b
                                                        c) (if (and (has-quale a
                                                                               b)
                                                                    (has-quale a
                                                                               c)
                                                                    (GenToSpec-SpecToGen b)) (= b c))))))
(forall (a) (if (RulePruningAlgorithm a) (PatternPruningAlgorithm a)))
(forall (a) (if (RuleSetModelClass a) (LogicalModelClass a)))
(forall (a) (if (RulesetPruningAlgorithm a) (ModelPruningAlgorithm a)))
(forall (a) (if (SVC-Algorithm a) (ClassificationModelingAlgorithm a)))
(forall (a) (if (SVC-Algorithm a) (exists (b) (and (hasOptimizationProblem a
                                                                           b)
                                                   (and (ConvexOptimizationProblem b)
                                                        (exists (c) (and (hasObjectiveFunction b
                                                                                               c)
                                                                         (ClassificationModelEvalFunction c))))))))
(forall (a) (if (SVC-Algorithm a) (exists (b) (and (specifiesOutputClass a
                                                                         b)
                                                   (SVCModelClass b)))))
(forall (a) (if (SVC-Algorithm a) (forall (b) (if (hasParameter a
                                                                b) (SVC-Parameter b)))))
(forall (a) (if (SVC-Algorithm a) (hasDecisionRule a SignRule)))
(forall (a) (if (SVC-Algorithm a) (hasHypothesisComplexityControlStrategy a
                                                                          PenalizedMagnitudeOfModelParameters)))
(forall (a) (if (SVC-Algorithm a) (has-quality a
                                               EagerLearningPolicy)))
(forall (a) (if (SVC-Algorithm a) (has-quality a
                                               HandlesContinuousFeatures)))
(forall (a) (if (SVC-Algorithm a) (has-quality a
                                               HandlesNoCategoricalFeatures)))
(forall (a) (if (SVC-Algorithm a) (has-quality a
                                               ToleratesClassImbalance)))
(forall (a) (if (SVC-Algorithm a) (has-quality a
                                               ToleratesCorrelatedFeatures)))
(forall (a) (if (SVC-Algorithm a) (has-quality a
                                               ToleratesHighDimensionality)))
(forall (a) (if (SVC-Algorithm a) (has-quality a
                                               ToleratesIrrelevantFeatures)))
(forall (a) (if (SVC-Algorithm a) (has-quality a
                                               ToleratesNoMissingValues)))
(forall (a) (if (SVC-Algorithm a) (and (exists (b) (and (KernelFunction b)
                                                        (hasKernelFunction a
                                                                           b)))
                                       (exists (b
                                                c) (if (and (hasKernelFunction a
                                                                               b)
                                                            (hasKernelFunction a
                                                                               c)
                                                            (KernelFunction b)) (= b c))))))
(forall (a) (if (SVC-Parameter a) (AlgorithmParameter a)))
(forall (a) (if (SVCModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (SVCModel a) (exists (b) (and (hasHypothesisStructure a
                                                                      b)
                                              (LinearCombination b)))))
(forall (a) (if (SVCModel a) (exists (b) (and (hasParameter a b)
                                              (InstanceWeightVector b)))))
(forall (a) (if (SVCModel a) (exists (b) (and (hasParameter a b)
                                              (KernelWeightVector b)))))
(forall (a) (if (SVCModel a) (and (exists (b) (and (NumberOfSupportVectors b)
                                                   (hasModelComplexityMeasure a
                                                                              b)))
                                  (exists (b
                                           c) (if (and (hasModelComplexityMeasure a
                                                                                  b)
                                                       (hasModelComplexityMeasure a
                                                                                  c)
                                                       (NumberOfSupportVectors b)) (= b c))))))
(forall (a) (if (SVCModel a) (and (exists (b) (and (SumOfSquaredWeights b)
                                                   (hasModelComplexityMeasure a
                                                                              b)))
                                  (exists (b
                                           c) (if (and (hasModelComplexityMeasure a
                                                                                  b)
                                                       (hasModelComplexityMeasure a
                                                                                  c)
                                                       (SumOfSquaredWeights b)) (= b c))))))
(forall (a) (if (SVCModelClass a) (DiscriminantFunctionModelClass a)))
(forall (a) (if (SampleHandlingForRuleInduction a) (AlgorithmCharacteristic a)))
(forall (a) (if (SampleHandlingForRuleInduction a) (exists (b) (and (has-quale a
                                                                               b)
                                                                    (SampleHandlingStrategy b)))))
(forall (a) (if (SampleHandlingForRuleInduction a) (exists (b) (and (inherent-in a
                                                                                 b)
                                                                    (ClassificationRuleInductionAlgorithm b)))))
(forall (a) (if (SampleHandlingStrategy a) (abstract-region a)))
(forall (a) (if (ScopeOfSelection a) (abstract-region a)))
(forall (a) (if (SearchDirection a) (abstract-region a)))
(forall (a) (if (SearchStrategy a) (DiscreteOptimizationStrategy a)))
(forall (a) (if (SearchStrategy a) (exists (b) (and (hasSearchGuidance a
                                                                       b)
                                                    (Blind-Informed b)))))
(forall (a) (if (SearchStrategy a) (exists (b) (and (hasUncertaintyLevel a
                                                                         b)
                                                    (Deterministic-Stochastic b)))))
(forall (a) (if (SearchStrategy a) (forall (b) (if (hasSearchDirection a
                                                                       b) (SearchDirection b)))))
(forall (a) (if (SearchStrategy a) (and (exists (b) (and (RecoveryOfPursuit b)
                                                         (hasRecoveryOfPursuit a
                                                                               b)))
                                        (exists (b
                                                 c) (if (and (hasRecoveryOfPursuit a
                                                                                   b)
                                                             (hasRecoveryOfPursuit a
                                                                                   c)
                                                             (RecoveryOfPursuit b)) (= b c))))))
(forall (a) (if (SearchStrategy a) (and (exists (b) (and (ScopeOfSelection b)
                                                         (hasScopeOfSelection a
                                                                              b)))
                                        (exists (b
                                                 c) (if (and (hasScopeOfSelection a
                                                                                  b)
                                                             (hasScopeOfSelection a
                                                                                  c)
                                                             (ScopeOfSelection b)) (= b c))))))
(forall (a) (if (SearchStrategy a) (exists (b) (and (boolean b)
                                                    (isAdmissible a b)))))
(forall (a) (if (SearchStrategy a) (exists (b) (and (boolean b)
                                                    (isComplete a b)))))
(forall (a) (if (SegmentationModel a) (DescriptiveModel a)))
(forall (a) (if (SelfConfiguringNNAlgorithm a) (NeuralNetworkAlgorithm a)))
(forall (a) (if (SetOfClassCondCovarianceMatrices a) (Feature-BasedModelParameter a)))
(forall (a) (if (SetOfSplitThresholds a) (Feature-BasedModelParameter a)))
(forall (a) (if (SetOfWeightVectors a) (Feature-BasedModelParameter a)))
(forall (a) (if (SetOrBag a) (StructuredType a)))
(forall (a) (if (SharedCovarianceMatrix a) (Feature-BasedModelParameter a)))
(forall (a) (if (SharedCovarianceMatrix a) (hasDataType a Matrix)))
(forall (a) (if (SigmoidKernel a) (NonpositiveSemidefiniteKernel a)))
(forall (a) (if (SimilarityBasedModelStructure a) (NonProbabilisticModelStructure a)))
(forall (a) (if (SimilarityFunction a) (DistanceOrSimilarityFunction a)))
(forall (a) (if (SimulatedAnnealing a) (IterativeImprovementSearch a)))
(forall (a) (if (SimulatedAnnealing a) (hasScopeOfSelection a
                                                            Local)))
(forall (a) (if (SimulatedAnnealing a) (hasUncertaintyLevel a
                                                            Stochastic)))
(forall (a) (if (SingleConditionModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (SingleConditionModel a) (hasDecisionBoundary a
                                                              AxisParallelLinearBoundary)))
(forall (a) (if (SingleConditionModel a) (hasHypothesisStructure a
                                                                 UnivariateTest)))
(forall (a) (if (SingleFeature-FeatureSubset a) (abstract-region a)))
(forall (a) (if (SingleFeatureEvaluationFunction a) (FeatureEvaluationFunction a)))
(forall (a) (if (SingleFeatureWeightingAlgorithm a) (exists (b) (and (hasEvaluationFunction a
                                                                                            b)
                                                                     (SingleFeatureEvaluationFunction b)))))
(forall (a) (if (SingleLinkModel a) (HierarchicalClusteringModel a)))
(forall (a) (if (SlipperModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (SlipperModel a) (hasHypothesisStructure a
                                                         WeightedRuleSet)))
(forall (a) (if (SplineModel a) (NonLinearRegressionModel a)))
(forall (a) (if (SplitEvalFunctionParameter a) (TreeInductionParameter a)))
(forall (a) (if (SplitTypeParameter a) (TreeInductionParameter a)))
(forall (a) (if (SquaredError a) (InternalValidityModelFunction a)))
(forall (a) (if (StatisticBasedFWAlgorithm a) (UnivariateFWAlgorithm a)))
(forall (a) (if (StatisticBasedFWAlgorithm a) (hasTargetLearner a
                                                                None)))
(forall (a) (if (StatisticBasedFWAlgorithm a) (has-quality a
                                                           SingleFeatureEvaluationTarget)))
(forall (a) (if (StatisticBasedFWAlgorithm a) (has-quality a
                                                           UnivariateFeatureEvaluationContext)))
(forall (a) (if (StatisticalTest a) (DecisionStrategy a)))
(forall (a) (if (Strategy a) (non-physical-endurant a)))
(forall (a) (if (StructuredFeature a) (Feature a)))
(forall (a) (if (StructuredFeature a) (exists (b) (and (hasDataType a
                                                                    b)
                                                       (StructuredType b)))))
(forall (a) (if (StructuredFeatureCharacteristic a) (FeatureCharacteristic a)))
(forall (a) (if (StructuredFeatureValue a) (FeatureValue a)))
(forall (a) (if (StructuredKernel a) (NonlinearPositiveSemidefiniteKernel a)))
(forall (a) (if (StructuredKernelSVCModel a) (NonlinearSVCModel a)))
(forall (a) (if (StructuredPredictionModel a) (PredictiveModel a)))
(forall (a) (if (StructuredPredictionModelClass a) (PredictiveModelClass a)))
(forall (a) (if (StructuredPredictionModelingTask a) (PredictiveModelingTask a)))
(forall (a) (if (StructuredPredictionModelingTask a) (exists (b) (and (specifiesOutputClass a
                                                                                            b)
                                                                      (StructuredPredictionModelClass b)))))
(forall (a) (if (StructuredPredictionModelingTask a) (specifiesInputClass a
                                                                          StructuredLabeledDataSet)))
(forall (a) (if (StructuredPredictionTask a) (PredictionTask a)))
(forall (a) (if (StructuredPredictionTask a) (exists (b) (and (specifiesInputClass a
                                                                                   b)
                                                              (StructuredPredictionModelClass b)))))
(forall (a) (if (StructuredPredictionTask a) (specifiesOutputClass a
                                                                   StructuredLabeledDataSet)))
(forall (a) (if (StructuredType a) (DataType a)))
(forall (a) (if (SubgroupDescription a) (DM-PatternSet a)))
(forall (a) (if (SubgroupDiscoveryTask a) (PatternDiscoveryTask a)))
(forall (a) (if (SubgroupDiscoveryTask a) (specifiesInputClass a
                                                               CategoricalLabeledDataSet)))
(forall (a) (if (SubgroupDiscoveryTask a) (specifiesOutputClass a
                                                                SubgroupDescription)))
(forall (a) (if (SubsamplingTask a) (CardinalityReductionTask a)))
(forall (a) (if (SumOfSquaredWeights a) (ModelParameterMagnitude a)))
(forall (a) (if (SumOfWeights a) (ModelParameterMagnitude a)))
(forall (a) (if (SupervisedDiscretizationAlgorithm a) (FeatureDiscretizationAlgorithm a)))
(forall (a) (if (SupervisedFeatureExtractionAlgorithm a) (FeatureExtractionAlgorithm a)))
(forall (a) (if (SupervisedFeatureExtractionAlgorithm a) (specifiesInputClass a
                                                                              LabeledDataSet)))
(forall (a) (if (TableFormat a) (DataFormat a)))
(forall (a) (if (TargetRelatedAssumption a) (AlgorithmAssumption a)))
(forall (a) (if (TimeSeriesTableFormat a) (TableFormat a)))
(forall (a) (if (ToleranceToClassImbalance a) (AlgorithmCharacteristic a)))
(forall (a) (if (ToleranceToClassImbalance a) (exists (b) (and (inherent-in a
                                                                            b)
                                                               (ClassificationModelingAlgorithm b)))))
(forall (a) (if (ToleranceToClassImbalance a) (forall (b) (if (inherent-in a
                                                                           b) (ClassificationModelingAlgorithm b)))))
(forall (a) (if (ToleranceToClassImbalance a) (and (exists (b) (and (Yes-No-Unknown b)
                                                                    (has-quale a
                                                                               b)))
                                                   (exists (b
                                                            c) (if (and (has-quale a
                                                                                   b)
                                                                        (has-quale a
                                                                                   c)
                                                                        (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (ToleranceToCorrelatedFeatures a) (AlgorithmCharacteristic a)))
(forall (a) (if (ToleranceToCorrelatedFeatures a) (exists (b) (and (inherent-in a
                                                                                b)
                                                                   (InductionAlgorithm b)))))
(forall (a) (if (ToleranceToCorrelatedFeatures a) (forall (b) (if (inherent-in a
                                                                               b) (InductionAlgorithm b)))))
(forall (a) (if (ToleranceToCorrelatedFeatures a) (and (exists (b) (and (Yes-No-Unknown b)
                                                                        (has-quale a
                                                                                   b)))
                                                       (exists (b
                                                                c) (if (and (has-quale a
                                                                                       b)
                                                                            (has-quale a
                                                                                       c)
                                                                            (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (ToleranceToHighDimensionality a) (AlgorithmCharacteristic a)))
(forall (a) (if (ToleranceToHighDimensionality a) (exists (b) (and (inherent-in a
                                                                                b)
                                                                   (InductionAlgorithm b)))))
(forall (a) (if (ToleranceToHighDimensionality a) (forall (b) (if (inherent-in a
                                                                               b) (InductionAlgorithm b)))))
(forall (a) (if (ToleranceToHighDimensionality a) (and (exists (b) (and (Yes-No-Unknown b)
                                                                        (has-quale a
                                                                                   b)))
                                                       (exists (b
                                                                c) (if (and (has-quale a
                                                                                       b)
                                                                            (has-quale a
                                                                                       c)
                                                                            (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (ToleranceToIrrelevantFeatures a) (AlgorithmCharacteristic a)))
(forall (a) (if (ToleranceToIrrelevantFeatures a) (exists (b) (and (inherent-in a
                                                                                b)
                                                                   (InductionAlgorithm b)))))
(forall (a) (if (ToleranceToIrrelevantFeatures a) (forall (b) (if (inherent-in a
                                                                               b) (InductionAlgorithm b)))))
(forall (a) (if (ToleranceToIrrelevantFeatures a) (and (exists (b) (and (Yes-No-Unknown b)
                                                                        (has-quale a
                                                                                   b)))
                                                       (exists (b
                                                                c) (if (and (has-quale a
                                                                                       b)
                                                                            (has-quale a
                                                                                       c)
                                                                            (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (ToleranceToMissingValues a) (AlgorithmCharacteristic a)))
(forall (a) (if (ToleranceToMissingValues a) (exists (b) (and (inherent-in a
                                                                           b)
                                                              (InductionAlgorithm b)))))
(forall (a) (if (ToleranceToMissingValues a) (forall (b) (if (inherent-in a
                                                                          b) (InductionAlgorithm b)))))
(forall (a) (if (ToleranceToMissingValues a) (and (exists (b) (and (Yes-No-Unknown b)
                                                                   (has-quale a
                                                                              b)))
                                                  (exists (b
                                                           c) (if (and (has-quale a
                                                                                  b)
                                                                       (has-quale a
                                                                                  c)
                                                                       (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (ToleranceToNoise a) (AlgorithmCharacteristic a)))
(forall (a) (if (ToleranceToNoise a) (exists (b) (and (inherent-in a
                                                                   b)
                                                      (InductionAlgorithm b)))))
(forall (a) (if (ToleranceToNoise a) (and (exists (b) (and (Yes-No-Unknown b)
                                                           (has-quale a b)))
                                          (exists (b c) (if (and (has-quale a b)
                                                                 (has-quale a c)
                                                                 (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (ToleranceToWideDataSets a) (AlgorithmCharacteristic a)))
(forall (a) (if (ToleranceToWideDataSets a) (exists (b) (and (inherent-in a
                                                                          b)
                                                             (ClassificationModelingAlgorithm b)))))
(forall (a) (if (ToleranceToWideDataSets a) (forall (b) (if (inherent-in a
                                                                         b) (ClassificationModelingAlgorithm b)))))
(forall (a) (if (ToleranceToWideDataSets a) (and (exists (b) (and (Yes-No-Unknown b)
                                                                  (has-quale a
                                                                             b)))
                                                 (exists (b
                                                          c) (if (and (has-quale a
                                                                                 b)
                                                                      (has-quale a
                                                                                 c)
                                                                      (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (Top-DownClusteringAlgorithm a) (ClusteringModelingAlgorithm a)))
(forall (a) (if (TopKPctRule a) (DecisionRule a)))
(forall (a) (if (TopKPctRule a) (hasDecisionCriterion a
                                                      TopPercent)))
(forall (a) (if (TopKPctRule a) (hasRelationalOperator a
                                                       GeqRelOp)))
(forall (a) (if (TopKRule a) (DecisionRule a)))
(forall (a) (if (TopKRule a) (hasDecisionCriterion a TopRank)))
(forall (a) (if (TopKRule a) (hasRelationalOperator a GeqRelOp)))
(forall (a) (if (TrainingSet a) (Instance-BasedModelParameter a)))
(forall (a) (if (TransformationFunction a) (AlgorithmCharacteristic a)))
(forall (a) (if (TransformationFunction a) (exists (b) (and (inherent-in a
                                                                         b)
                                                            (FeatureExtractionAlgorithm b)))))
(forall (a) (if (TransformationFunction a) (and (exists (b) (and (Linear-NonLinear b)
                                                                 (has-quale a
                                                                            b)))
                                                (exists (b
                                                         c) (if (and (has-quale a
                                                                                b)
                                                                     (has-quale a
                                                                                c)
                                                                     (Linear-NonLinear b)) (= b c))))))
(forall (a) (if (Tree a) (StructuredType a)))
(forall (a) (if (TreeBranchingFactor a) (AlgorithmCharacteristic a)))
(forall (a) (if (TreeBranchingFactor a) (exists (b) (and (inherent-in a
                                                                      b)
                                                         (ClassificationTreeInductionAlgorithm b)))))
(forall (a) (if (TreeBranchingFactor a) (forall (b) (if (inherent-in a
                                                                     b) (ClassificationTreeInductionAlgorithm b)))))
(forall (a) (if (TreeBranchingFactor a) (and (exists (b) (and (BinarySplit-MultiwaySplit b)
                                                              (has-quale a b)))
                                             (exists (b c) (if (and (has-quale a
                                                                               b)
                                                                    (has-quale a
                                                                               c)
                                                                    (BinarySplit-MultiwaySplit b)) (= b c))))))
(forall (a) (if (TreeDepth a) (ModelParameterCount a)))
(forall (a) (if (TreeInductionParameter a) (AlgorithmParameter a)))
(forall (a) (if (TreePruningAlgorithm a) (ModelPruningAlgorithm a)))
(forall (a) (if (TreePruningParameter a) (TreeInductionParameter a)))
(forall (a) (if (Tuple a) (StructuredType a)))
(forall (a) (if (Uniform-K a) (DistributionParameter a)))
(forall (a) (if (Uniform-K a) (hasDataType a Integer)))
(forall (a) (if (UniquenessOfSolution a) (AlgorithmCharacteristic a)))
(forall (a) (if (UniquenessOfSolution a) (exists (b) (and (inherent-in a
                                                                       b)
                                                          (FeatureExtractionAlgorithm b)))))
(forall (a) (if (UniquenessOfSolution a) (and (exists (b) (and (Yes-No-Unknown b)
                                                               (has-quale a b)))
                                              (exists (b
                                                       c) (if (and (has-quale a
                                                                              b)
                                                                   (has-quale a
                                                                              c)
                                                                   (Yes-No-Unknown b)) (= b c))))))
(forall (a) (if (Univariate-Multivariate a) (abstract-region a)))
(forall (a) (if (UnivariateFWAlgorithm a) (has-quality a
                                                       SingleFeatureEvaluationTarget)))
(forall (a) (if (UnivariateNormalDensityEstimation a) (ContinuousParametricDensityEstimation a)))
(forall (a) (if (UnivariateNormalDensityEstimation a) (exists (b) (and (hasDistributionParameter a
                                                                                                 b)
                                                                       (Gauss-CovarianceMatrix b)))))
(forall (a) (if (UnivariateNormalDensityEstimation a) (exists (b) (and (hasDistributionParameter a
                                                                                                 b)
                                                                       (Gauss-MeanVector b)))))
(forall (a) (if (UnivariateTreeInductionAlgorithm a) (ClassificationTreeInductionAlgorithm a)))
(forall (a) (if (UnlabeledDataSet a) (DataSet a)))
(forall (a) (if (UnlabeledDataSet a) (not (exists (b) (and (hasTargetFeature a
                                                                             b)
                                                           (Feature b))))))
(forall (a) (if (UnlabeledDataSetClass a) (DataSetClass a)))
(forall (a) (if (UnlabeledDataTable a) (DataTable a)))
(forall (a) (if (UnlabeledDataTable a) (not (exists (b) (and (hasTargetFeature a
                                                                               b)
                                                             (Feature b))))))
(forall (a) (if (UnsupervisedDiscretizationAlgorithm a) (FeatureDiscretizationAlgorithm a)))
(forall (a) (if (UnsupervisedFeatureExtractionAlgorithm a) (FeatureExtractionAlgorithm a)))
(forall (a) (if (UnsupervisedFeatureExtractionAlgorithm a) (specifiesInputClass a
                                                                                UnlabeledDataSet)))
(forall (a) (if (UtilityAlgorithm a) (DM-Algorithm a)))
(forall (a) (if (UtilityOperator a) (DM-Operator a)))
(forall (a) (if (UtilityTask a) (DM-Task a)))
(forall (a) (if (ValueSearchStopRule a) (DecisionRule a)))
(forall (a) (if (ValueSearchStopRule a) (and (exists (b) (and (or (= b LastEvaluationImprovement)
                                                                  (= b NumCyclesWithoutImprovement))
                                                              (hasDecisionCriterion a
                                                                                    b)))
                                             (exists (b
                                                      c) (if (and (hasDecisionCriterion a
                                                                                        b)
                                                                  (hasDecisionCriterion a
                                                                                        c)
                                                                  (or (= b LastEvaluationImprovement)
                                                                      (= b NumCyclesWithoutImprovement))) (= b c))))))
(forall (a) (if (ValueThresholdRule a) (DecisionRule a)))
(forall (a) (if (ValueThresholdRule a) (forall (b) (if (hasValueDomain a
                                                                       b) (MathematicalFunction b)))))
(forall (a) (if (ValueThresholdRule a) (hasDecisionCriterion a
                                                             ObservedValue)))
(forall (a) (if (VotedPerceptronModel a) (DiscriminantFunctionModel a)))
(forall (a) (if (VotedPerceptronModel a) (hasHypothesisStructure a
                                                                 LinearCombinationOfFeatures)))
(forall (a) (if (VotedPerceptronModel a) (and (exists (b) (and (SetOfWeightVectors b)
                                                               (hasParameter a
                                                                             b)))
                                              (exists (b
                                                       c) (if (and (hasParameter a
                                                                                 b)
                                                                   (hasParameter a
                                                                                 c)
                                                                   (SetOfWeightVectors b)) (= b c))))))
(forall (a) (if (Weka-OperatorParameter a) (OperatorParameter a)))
(forall (a) (if (WekaOperator a) (DM-Operator a)))
(forall (a) (if (Workflow a) (WorkflowEntity a)))
(forall (a) (if (WorkflowEntity a) (plan a)))
(forall (a) (if (WorkflowTemplate a) (WorkflowEntity a)))
(forall (a) (if (WorkflowVariable a) (WorkflowEntity a)))
(forall (a) (if (WrapperFSAlgorithm a) (exists (b) (and (hasOptimizationStrategy a
                                                                                 b)
                                                        (SearchStrategy b)))))
(forall (a) (if (WrapperFSAlgorithm a) (and (exists (b) (and (WrapperFWAlgorithm b)
                                                             (hasFeatureEvaluator a
                                                                                  b)))
                                            (exists (b
                                                     c) (if (and (hasFeatureEvaluator a
                                                                                      b)
                                                                 (hasFeatureEvaluator a
                                                                                      c)
                                                                 (WrapperFWAlgorithm b)) (= b c))))))
(forall (a) (if (WrapperFWAlgorithm a) (FeatureWeightingAlgorithm a)))
(forall (a) (if (WrapperFWAlgorithm a) (has-quality a
                                                    FeatureSubsetEvaluationTarget)))
(forall (a) (if (WrapperFWAlgorithm a) (has-quality a
                                                    MultivariateFeatureEvaluationContext)))
(forall (a) (if (WrapperFWAlgorithm a) (and (exists (b) (and (SupervisedInductionAlgorithm b)
                                                             (hasTargetLearner a
                                                                               b)))
                                            (exists (b
                                                     c) (if (and (hasTargetLearner a
                                                                                   b)
                                                                 (hasTargetLearner a
                                                                                   c)
                                                                 (SupervisedInductionAlgorithm b)) (= b c))))))
(forall (a) (if (Yes-No-Unknown a) (abstract-region a)))
(forall (a) (if (AssociationRuleGenerationAlgorithm a) (PatternProcessingAlgorithm a)))
(forall (a) (if (SubgroupDiscoveryAlgorithm a) (exists (b) (and (hasOptimizationStrategy a
                                                                                         b)
                                                                (OptimizationStrategy b)))))
(forall (a) (if (SubgroupDiscoveryAlgorithm a) (assumes a
                                                        IID-Assumption)))
(forall (a) (if (SubgroupDiscoveryAlgorithm a) (has-quality a
                                                            EagerLearningPolicy)))
(forall (a) (if (abstract a) (particular a)))
(forall (a) (if (abstract-quality a) (quality a)))
(forall (a) (if (abstract-quality a) (forall (b) (if (q-location a
                                                                 b) (abstract-region b)))))
(forall (a) (if (abstract-region a) (region a)))
(forall (a) (if (abstract-region a) (forall (b) (if (part a
                                                          b) (abstract-region b)))))
(forall (a) (if (abstract-region a) (forall (b) (if (q-location-of a
                                                                   b) (abstract-quality b)))))
(forall (a) (if (abstract-region a) (exists (b
                                             c) (if (and (hasDataValue a b)
                                                         (hasDataValue a c)
                                                         (anyType b)) (= b c)))))
(forall (a) (if (accomplishment a) (event a)))
(forall (a) (if (achievement a) (event a)))
(forall (a) (if (endurant a) (spatio-temporal-particular a)))
(forall (a) (if (event a) (perdurant a)))
(forall (a) (if (non-physical-endurant a) (endurant a)))
(forall (a) (if (non-physical-object a) (non-physical-endurant a)))
(forall (a) (if (non-physical-object a) (forall (b) (if (part a
                                                              b) (non-physical-object b)))))
(forall (a) (if (perdurant a) (spatio-temporal-particular a)))
(forall (a) (if (process a) (stative a)))
(forall (a) (if (quality a) (spatio-temporal-particular a)))
(forall (a) (if (quality a) (exists (b) (and (inherent-in a b)
                                             (particular b)))))
(forall (a) (if (region a) (abstract a)))
(forall (a) (if (region a) (forall (b) (if (part a
                                                 b) (region b)))))
(forall (a) (if (state a) (stative a)))
(forall (a) (if (stative a) (perdurant a)))
(forall (a) (if (action a) (accomplishment a)))
(forall (a) (if (action a) (exists (b) (and (generically-dependent-on a
                                                                      b)
                                            (cognitive-state b)))))
(forall (a) (if (cognitive-state a) (state a)))
(forall (a) (if (collection a) (forall (b) (if (part a
                                                     b) (collection b)))))
(forall (a) (if (collection a) (forall (b) (if (refined-by a
                                                           b) (collection b)))))
(forall (a) (if (collection a) (forall (b) (if (specialized-by a
                                                               b) (collection b)))))
(forall (a) (if (communication-event a) (accomplishment a)))
(forall (a) (if (concept a) (non-agentive-social-object a)))
(forall (a) (if (concept a) (exists (b) (and (defined-by a b)
                                             (description b)))))
(forall (a) (if (concept a) (forall (b) (if (part a
                                                  b) (concept b)))))
(forall (a) (if (concept a) (forall (b) (if (refined-by a
                                                        b) (concept b)))))
(forall (a) (if (concept a) (forall (b) (if (specialized-by a
                                                            b) (concept b)))))
(forall (a) (if (course a) (concept a)))
(forall (a) (if (course a) (exists (b) (and (defined-by a b)
                                            (description b)))))
(forall (a) (if (course a) (exists (b) (and (specialized-by a b)
                                            (course b)))))
(forall (a) (if (course a) (forall (b) (if (part a
                                                 b) (course b)))))
(forall (a) (if (description a) (non-agentive-social-object a)))
(forall (a) (if (description a) (exists (b) (and (expressed-by a b)
                                                 (information-object b)))))
(forall (a) (if (description a) (forall (b) (if (refined-by a
                                                            b) (description b)))))
(forall (a) (if (description a) (forall (b) (if (specialized-by a
                                                                b) (description b)))))
(forall (a) (if (indicator a) (parameter a)))
(forall (a) (if (information-encoding-system a) (description a)))
(forall (a) (if (information-object a) (non-agentive-social-object a)))
(forall (a) (if (information-object a) (exists (b) (and (ordered-by a
                                                                    b)
                                                        (description b)))))
(forall (a) (if (information-object a) (forall (b) (if (part a
                                                             b) (information-object b)))))
(forall (a) (if (information-object a) (forall (b) (if (refined-by a
                                                                   b) (information-object b)))))
(forall (a) (if (logical-role a) (description-role a)))
(forall (a) (if (method a) (description a)))
(forall (a) (if (non-agentive-social-object a) (social-object a)))
(forall (a) (if (parameter a) (concept a)))
(forall (a) (if (parameter a) (exists (b) (and (defined-by a b)
                                               (description b)))))
(forall (a) (if (parameter a) (exists (b) (and (valued-by a b)
                                               (region b)))))
(forall (a) (if (parameter a) (forall (b) (if (specialized-by a
                                                              b) (parameter b)))))
(forall (a) (if (path a) (course a)))
(forall (a) (if (physical-realization a) (perdurant a)))
(forall (a) (if (plan a) (method a)))
(forall (a) (if (plan a) (exists (b) (and (d-uses a b) (role b)))))
(forall (a) (if (plan a) (exists (b) (and (d-uses a b) (task b)))))
(forall (a) (if (project a) (method a)))
(forall (a) (if (role a) (concept a)))
(forall (a) (if (role a) (exists (b) (and (defined-by a b)
                                          (description b)))))
(forall (a) (if (role a) (forall (b) (if (specialized-by a
                                                         b) (role b)))))
(forall (a) (if (social-object a) (non-physical-object a)))
(forall (a) (if (social-object a) (exists (b) (and (generically-dependent-on a
                                                                             b)
                                                   (communication-event b)))))
(forall (a) (if (task a) (course a)))
(forall (a) (if (task a) (exists (b) (and (defined-by a b)
                                          (method b)))))
(forall (a) (if (task a) (exists (b) (and (specialized-by a b)
                                          (task b)))))
(forall (a) (if (technique a) (method a)))
(forall (a) (not (and (AlgorithmAssumption a) (DM-Algorithm a))))
(forall (a) (not (and (AlgorithmAssumption a) (DM-Data a))))
(forall (a) (not (and (AlgorithmAssumption a) (DM-Hypothesis a))))
(forall (a) (not (and (AlgorithmAssumption a) (DM-Operator a))))
(forall (a) (not (and (AlgorithmAssumption a) (DM-Software a))))
(forall (a) (not (and (AlgorithmAssumption a) (DM-Task a))))
(forall (a) (not (and (AlgorithmAssumption a)
                      (FormalExpression a))))
(forall (a) (not (and (AlgorithmAssumption a)
                      (HypothesisStructure a))))
(forall (a) (not (and (AlgorithmAssumption a) (IO-Class a))))
(forall (a) (not (and (AlgorithmAssumption a) (IO-Object a))))
(forall (a) (not (and (AlgorithmAssumption a)
                      (OptimizationProblem a))))
(forall (a) (not (and (AlgorithmAssumption a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (AlgorithmAssumption a) (Strategy a))))
(forall (a) (not (and (ContinuousParametricDensityEstimation a)
                      (DiscreteParametricDensityEstimation a))))
(forall (a) (not (and (DM-Algorithm a) (DM-Data a))))
(forall (a) (not (and (DM-Algorithm a) (DM-Hypothesis a))))
(forall (a) (not (and (DM-Algorithm a) (DM-Operator a))))
(forall (a) (not (and (DM-Algorithm a) (DM-Task a))))
(forall (a) (not (and (DM-Algorithm a) (FormalExpression a))))
(forall (a) (not (and (DM-Algorithm a) (HypothesisStructure a))))
(forall (a) (not (and (DM-Algorithm a) (IO-Class a))))
(forall (a) (not (and (DM-Algorithm a) (IO-Object a))))
(forall (a) (not (and (DM-Algorithm a) (OptimizationProblem a))))
(forall (a) (not (and (DM-Algorithm a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (DM-Algorithm a) (Strategy a))))
(forall (a) (not (and (DM-Data a) (DM-Hypothesis a))))
(forall (a) (not (and (DM-Data a) (DM-Operator a))))
(forall (a) (not (and (DM-Data a) (DM-Software a))))
(forall (a) (not (and (DM-Data a) (DM-Task a))))
(forall (a) (not (and (DM-Data a) (FormalExpression a))))
(forall (a) (not (and (DM-Data a) (HypothesisStructure a))))
(forall (a) (not (and (DM-Data a) (OptimizationProblem a))))
(forall (a) (not (and (DM-Data a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (DM-Data a) (Strategy a))))
(forall (a) (not (and (DM-Hypothesis a) (DM-Operator a))))
(forall (a) (not (and (DM-Hypothesis a) (DM-Software a))))
(forall (a) (not (and (DM-Hypothesis a) (DM-Task a))))
(forall (a) (not (and (DM-Hypothesis a) (FormalExpression a))))
(forall (a) (not (and (DM-Hypothesis a) (HypothesisStructure a))))
(forall (a) (not (and (DM-Hypothesis a) (OptimizationProblem a))))
(forall (a) (not (and (DM-Hypothesis a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (DM-Hypothesis a) (Strategy a))))
(forall (a) (not (and (DM-Operator a) (DM-Software a))))
(forall (a) (not (and (DM-Operator a) (DM-Task a))))
(forall (a) (not (and (DM-Operator a) (FormalExpression a))))
(forall (a) (not (and (DM-Operator a) (HypothesisStructure a))))
(forall (a) (not (and (DM-Operator a) (IO-Class a))))
(forall (a) (not (and (DM-Operator a) (IO-Object a))))
(forall (a) (not (and (DM-Operator a) (OptimizationProblem a))))
(forall (a) (not (and (DM-Operator a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (DM-Operator a) (Strategy a))))
(forall (a) (not (and (DM-Software a) (DM-Task a))))
(forall (a) (not (and (DM-Software a) (FormalExpression a))))
(forall (a) (not (and (DM-Software a) (HypothesisStructure a))))
(forall (a) (not (and (DM-Software a) (IO-Class a))))
(forall (a) (not (and (DM-Software a) (IO-Object a))))
(forall (a) (not (and (DM-Software a) (OptimizationProblem a))))
(forall (a) (not (and (DM-Software a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (DM-Software a) (Strategy a))))
(forall (a) (not (and (DM-Task a) (HypothesisStructure a))))
(forall (a) (not (and (DM-Task a) (IO-Class a))))
(forall (a) (not (and (DM-Task a) (IO-Object a))))
(forall (a) (not (and (DM-Task a) (OptimizationProblem a))))
(forall (a) (not (and (DM-Task a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (DM-Task a) (Strategy a))))
(forall (a) (not (and (DataFormat a) (DataType a))))
(forall (a) (not (and (DataFormat a) (DecisionBoundary a))))
(forall (a) (not (and (DataType a) (DecisionBoundary a))))
(forall (a) (not (and (FormalExpression a)
                      (HypothesisStructure a))))
(forall (a) (not (and (FormalExpression a) (IO-Class a))))
(forall (a) (not (and (FormalExpression a) (IO-Object a))))
(forall (a) (not (and (FormalExpression a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (FormalExpression a) (Strategy a))))
(forall (a) (not (and (Graph a) (List a))))
(forall (a) (not (and (Graph a) (SetOrBag a))))
(forall (a) (not (and (Graph a) (Tree a))))
(forall (a) (not (and (Graph a) (Tuple a))))
(forall (a) (not (and (HypothesisStructure a) (IO-Object a))))
(forall (a) (not (and (HypothesisStructure a)
                      (OptimizationProblem a))))
(forall (a) (not (and (HypothesisStructure a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (HypothesisStructure a) (Strategy a))))
(forall (a) (not (and (IO-Class a) (OptimizationProblem a))))
(forall (a) (not (and (IO-Class a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (IO-Class a) (Strategy a))))
(forall (a) (not (and (IO-Object a) (OptimizationProblem a))))
(forall (a) (not (and (IO-Object a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (IO-Object a) (Strategy a))))
(forall (a) (not (and (LinearBoundary a) (NonlinearBoundary a))))
(forall (a) (not (and (List a) (SetOrBag a))))
(forall (a) (not (and (List a) (Tree a))))
(forall (a) (not (and (List a) (Tuple a))))
(forall (a) (not (and (NonProbabilisticModelStructure a)
                      (ProbabilisticModelStructure a))))
(forall (a) (not (and (NonparametricDensityEstimation a)
                      (ParametricDensityEstimation a))))
(forall (a) (not (and (NonpositiveSemidefiniteKernel a)
                      (PositiveSemidefiniteKernel a))))
(forall (a) (not (and (OptimizationProblem a)
                      (ProbabilityDensityEstimation a))))
(forall (a) (not (and (OptimizationProblem a) (Strategy a))))
(forall (a) (not (and (PrimitiveType a) (StructuredType a))))
(forall (a) (not (and (ProbabilityDensityEstimation a)
                      (Strategy a))))
(forall (a) (not (and (SetOrBag a) (Tree a))))
(forall (a) (not (and (SetOrBag a) (Tuple a))))
(forall (a) (not (and (Tree a) (Tuple a))))
(forall (a) (not (and (endurant a) (perdurant a))))
(forall (a) (not (and (endurant a) (quality a))))
(forall (a) (not (and (perdurant a) (quality a))))
(forall (a) (not (and (collection a) (concept a))))
(forall (a) (not (and (collection a) (description a))))
(forall (a) (not (and (collection a) (information-object a))))
(forall (a) (not (and (concept a) (description a))))
(forall (a) (not (and (concept a) (information-object a))))
(forall (a) (not (and (course a) (parameter a))))
(forall (a) (not (and (course a) (role a))))
(forall (a) (not (and (description a) (information-object a))))
(forall (a) (not (and (parameter a) (role a))))
(ModelEvaluationFunction ExpectedHypothesisValue)
(SingleFeatureEvaluationFunction F-RatioStatistic)
(ModelEvaluationFunction LikelihoodHypothesis)
(ModelEvaluationFunction LogLikelihoodHypothesis)
(DiscreteOptimizationProblem MaxExpectedHypothesisValueOptimizationProblem)
(DiscreteOptimizationProblem MaxLikelihoodHypotheisOptimizationProblem)
(DiscreteOptimizationProblem MaxLikelihoodLogHypotheisOptimizationProblem)
(DistanceCharacterizationBetweenClusters MaxOfPairwiseDistances)
(DistanceCharacterizationBetweenClusters MinOfPairwiseDistances)
(SingleFeatureEvaluationFunction PearsonsRho)
(ClassificationModelEvalFunction AUC)
(ClassificationModelEvalFunction Accuracy)
(SimilarityFunction AffineSimilarity)
(LinearBoundary ArbitraryLinearBoundary)
(Thing ArbitraryLinearBoundary)
(LinearBoundary AxisParallelLinearBoundary)
(Thing AxisParallelLinearBoundary)
(SearchDirection Backward)
(IO-Class BaselineClassifier)
(NNParameter BasisFunctionRadius)
(HeuristicBestFirstSearch BeamSearch)
(HeuristicBestFirstSearch BestFirst)
(SearchDirection Bidirectional)
(ClassificationProblem BinaryClassification)
(Thing BinaryClassification)
(BinarySplit-MultiwaySplit BinarySplit)
(Thing BinarySplit)
(TreeBranchingFactor BinaryTreeBranchingFactor)
(Blind-Informed Blind)
(PrimitiveType Boolean)
(Thing Boolean)
(SampleHandlingStrategy BoostedWeighting)
(DecisionCriterion BottomPercent)
(DecisionCriterion BottomRank)
(PathBasedSearch BreadthFirstSearch)
(IO-Class C4.5CrispTreeModel)
(IO-Class C4.5ProbTreeModel)
(IO-Class C4.5RuleModel)
(IO-Class CARTClassificationModel)
(IO-Class CHAIDModel)
(IO-Class CN2Model)
(DistanceFunction CanberraDistance)
(PrimitiveType Categorical)
(FeatureClass CategoricalFeature)
(IO-Class CategoricalFeature)
(IO-Class CategoricalLabeledDataSet)
(LabeledDataSetClass CategoricalLabeledDataSet)
(DistanceFunction ChebychevDistance)
(SingleFeatureEvaluationFunction Chi2Statistic)
(ClassificationModelEvalFunction ClassEntropyGivenFeatureValue)
(ClassificationModelEvalFunction ClassPredictorChi2AssociationMeasure)
(Thing ClassPredictorChi2AssociationMeasure)
(FeatureRelatedAssumption ClassSpecificCovarianceAssumption)
(Thing ClassSpecificCovarianceAssumption)
(ExactContinuousOptimizationStrategy ClosedFormOptimization)
(Thing ClosedFormOptimization)
(IO-Class ClusteringModel)
(FeatureRelatedAssumption CommonCovarianceAssumption)
(Thing CommonCovarianceAssumption)
(IO-Class ComplementNaiveBayesModel)
(NonlinearCombination CompositionOfLinearCombinationsOfFeatures)
(Thing CompositionOfLinearCombinationsOfFeatures)
(IO-Class ComputationalComplexityMeasure)
(ClassificationModelEvalFunction ConditionalClassEntropy)
(Thing ConditionalClassEntropy)
(FeatureRelatedAssumption ConditionalFeatureIndependenceAssumption)
(Thing ConditionalFeatureIndependenceAssumption)
(FeatureRelatedAssumption ConditionalIndependenceAssumption)
(Thing ConditionalIndependenceAssumption)
(FeatureClass ContinuousFeature)
(IO-Class ContinuousFeature)
(IO-Class ContinuousLabeledDataSet)
(LabeledDataSetClass ContinuousLabeledDataSet)
(SimilarityFunction CorrelationSimilarity)
(SimilarityFunction CosineSimilarity)
(Thing CrossvalidatedNaiveBayesError)
(UtilityOperator D-TrainFinalModel)
(EarlyStoppingStrategy DataBasedEarlyStopping)
(Thing DataBasedEarlyStopping)
(Tuple DataFrame)
(Thing DataFrame)
(PropositionalRuleSet DecisionList)
(Thing DecisionList)
(IO-Class DecisionTreeModel)
(SimilarityBasedModelStructure Dendrogram)
(HierarchicalClusteringModelParameter DendrogramDistanceValue)
(IO-Class DependencyModel)
(PathBasedSearch DepthFirstSearch)
(Deterministic-Stochastic Deterministic)
(HillClimbing DeterministicHillClimbing)
(LocalBeamSearch DeterministicLocalBeamSearch)
(DM-PatternSetClass DeviationDescription)
(IO-Class DeviationDescription)
(SimilarityFunction DiceSimilarity)
(Graph DirectedGraph)
(Thing DirectedGraph)
(FeatureClass DiscreteFeature)
(IO-Class DiscreteFeature)
(K-Means-Parameter DistanceThreshold)
(SimilarityFunction DotProduct)
(ClassificationModelEvalFunction DualFormHardMarginAndL1SVC)
(Thing DualFormHardMarginAndL1SVC)
(LinearEqualityConstraint DualFormHardMarginConstraint)
(Thing DualFormHardMarginConstraint)
(ConvexOptimizationProblem DualFormHardMarginSVCOptimizationProblem)
(Thing DualFormHardMarginSVCOptimizationProblem)
(LinearEqualityConstraint DualFormL1SVCConstraint)
(Thing DualFormL1SVCConstraint)
(ConvexOptimizationProblem DualFormL2LossSVCOptimizationProblem)
(Thing DualFormL2LossSVCOptimizationProblem)
(LinearEqualityConstraint DualFormL2SVCConstraint)
(Thing DualFormL2SVCConstraint)
(ClassificationModelEvalFunction DualFormL2SVCCostFunction)
(Thing DualFormL2SVCCostFunction)
(ConvexOptimizationProblem DualFormSoftMarginSVCOptimizationProblem)
(Thing DualFormSoftMarginSVCOptimizationProblem)
(DistanceFunction DynamicTimeWarpingDistance)
(Eager-Lazy Eager)
(LearningPolicy EagerLearningPolicy)
(Filter-Wrapper-Embedded Embedded)
(RelOp EqRelOp)
(NNParameter ErrorEpsilon)
(DistanceFunction EuclideanDistance)
(ItemReassignmentToCluster ExactItemReassignmentToCluster)
(Exhaustive-NonExhaustive Exhaustive)
(FirstOrderLogicStructure FOLDecisionTree)
(FirstOrderLogicStructure FOLRuleSet)
(DecisionTarget FeatureBasedModelPerformance)
(FeatureRelatedAssumption FeatureIndependenceAssumption)
(Thing FeatureIndependenceAssumption)
(SingleFeature-FeatureSubset FeatureSubset)
(FeatureEvaluationTarget FeatureSubsetEvaluationTarget)
(DecisionTarget FeatureSubsetRank)
(DecisionTarget FeatureSubsetWeight)
(IO-Class FeedforwardLayeredNNModel)
(Filter-Wrapper-Embedded Filter)
(UniquenessOfSolution FindsMultipleSolutions)
(UniquenessOfSolution FindsUniqueSolution)
(IO-Class FishersLinearDiscriminantModel)
(SearchDirection Forward)
(NeighborhoodRange FullSample)
(RangeOfNeighborhood FullSampleNeighborhood)
(ClusteringProblem FuzzyClustering)
(NonlinearPositiveSemidefiniteKernel GaussianKernel)
(Thing GaussianKernel)
(IO-Class GaussianKernelSVCModel)
(RuleInductionStrategy GenToSpecRuleInduction)
(GenToSpec-SpecToGen GeneralToSpecific)
(DistanceFunction GeodesicDistance)
(RelOp GeqRelOp)
(ClassificationModelEvalFunction GiniIndex)
(SingleFeatureEvaluationFunction GiniIndex)
(Thing GiniIndex)
(ScopeOfSelection Global)
(HeuristicBestFirstSearch Greedy)
(HeuristicBestFirstSearch GreedyBestFirst)
(RelOp GtRelOp)
(ClassificationProblemType HandlesBinaryClassification)
(HandlingOfCategoricalFeatures HandlesCategoricalFeatures)
(HandlingOfClassificationCosts HandlesClassificationCosts)
(HandlingOfContinuousFeatures HandlesContinuousFeatures)
(ClusteringProblemType HandlesFuzzyClustering)
(ClusteringProblemType HandlesHardClustering)
(HandlingOfInstanceWeights HandlesInstanceWeights)
(ClassificationProblemType HandlesMulticlassClassification)
(HandlingOfCategoricalFeatures HandlesNoCategoricalFeatures)
(HandlingOfClassificationCosts HandlesNoClassificationCosts)
(HandlingOfContinuousFeatures HandlesNoContinuousFeatures)
(HandlingOfInstanceWeights HandlesNoInstanceWeights)
(ClassificationProblemType HandlesOneClassClassification)
(ClusteringProblem HardClustering)
(LinearInequalityConstraint HardMarginConstraint)
(Thing HardMarginConstraint)
(ConvexOptimizationProblem HardMarginSVCOptimizationProblem)
(Thing HardMarginSVCOptimizationProblem)
(RandomComponent HasNoRandomComponent)
(RandomComponent HasRandomComponent)
(DistanceFunction HausdorffDistance)
(KernelFunction HeatKernel)
(Low-Medium-High High)
(Thing High)
(HighBias-HighVariance HighBias)
(Thing HighBias)
(BiasVarianceProfile HighBiasProfile)
(HighBias-HighVariance HighVariance)
(Thing HighVariance)
(BiasVarianceProfile HighVarianceProfile)
(IO-Class HypothesisEvaluationMeasure)
(MeasureClass HypothesisEvaluationMeasure)
(IO-Class IBLModel)
(ConvexOptimizationProblem ICA-MaxNegentropyOptimizationProblem)
(ConvexOptimizationProblem ICA-MinMutualInformationOptimizationProblem)
(IO-Class ID3Model)
(InstanceRelatedAssumption IID-Assumption)
(Thing IID-Assumption)
(SingleFeatureEvaluationFunction InformationGain)
(Thing InformationGain)
(SingleFeatureEvaluationFunction InformationGainRatio)
(Thing InformationGainRatio)
(Blind-Informed Informed)
(KernelEuclideanDistance InnerProductSimilarity)
(SimilarityFunction InnerProductSimilarity)
(PrimitiveType Integer)
(Thing Integer)
(Interpretability Interpretable)
(FeatureClass IntervalFeature)
(IO-Class IntervalFeature)
(RecoveryOfPursuit Irrevocable)
(HeuristicContinuousOptimizationStrategy IterativelyReweightedLeastSquares)
(Thing IterativelyReweightedLeastSquares)
(SimilarityFunction JaccardSimilarity)
(ProbabilisticModelStructure JointProbabilityDistribution)
(K-MeansModelClass K-MeansModel)
(NeighborhoodRange KNearest)
(IO-Class KNearestNeighborModel)
(RangeOfNeighborhood KNearestNeighborhood)
(ConvexOptimizationProblem KPCA-OptimizationProblem)
(SimilarityFunction KulczynskiSimilarity)
(HingeLoss L1HingeLoss)
(Thing L1HingeLoss)
(RegularizedClassificationModelEvalFunction L1HingeLossPlusL2WeightsCostFunction)
(Thing L1HingeLossPlusL2WeightsCostFunction)
(HingeLoss L2HingeLoss)
(Thing L2HingeLoss)
(RegularizedClassificationModelEvalFunction L2HingeLossPlusL2WeightsCostFunction)
(Thing L2HingeLossPlusL2WeightsCostFunction)
(ModelComplexityFunction L2Weights)
(Thing L2Weights)
(ConvexOptimizationProblem LDAOptimizationProblem)
(Thing LDAOptimizationProblem)
(DataTableClass LabeledDataTable)
(IO-Class LabeledDataTable)
(ClassificationModelEvalFunction LaplaceAccuracy)
(DecisionCriterion LastEvaluationImprovement)
(Eager-Lazy Lazy)
(LearningPolicy LazyLearningPolicy)
(NNParameter LearningRate)
(NNParameter LearningRateDecay)
(RelOp LeqRelOp)
(Linear-NonLinear Linear)
(LinearCombination LinearCombinationOfFeatures)
(Thing LinearCombinationOfFeatures)
(LinearCombination LinearCombinationOfFunctions)
(Thing LinearCombinationOfFunctions)
(LinearCombination LinearCombinationOfKernels)
(Thing LinearCombinationOfKernels)
(IO-Class LinearDiscriminantModel)
(PositiveSemidefiniteKernel LinearKernel)
(Thing LinearKernel)
(IO-Class LinearModel)
(IO-Class LinearRegressionModel)
(IO-Class LinearSVCModel)
(InstanceRelatedAssumption LinearSeparabilityAssumption)
(Thing LinearSeparabilityAssumption)
(TransformationFunction LinearTransformationFunction)
(ScopeOfSelection Local)
(LocalDelimitationStrategy LocalBandwithTuning)
(Thing LocalBandwithTuning)
(LogLikelihood LogLikelihoodOfClassPosteriors)
(Thing LogLikelihoodOfClassPosteriors)
(LogLikelihood LogLikelihoodOfMultivarNormalClassCondProbsClassSpecificCovariance)
(Thing LogLikelihoodOfMultivarNormalClassCondProbsClassSpecificCovariance)
(LogLikelihood LogLikelihoodOfMultivarNormalClassCondProbsSharedCovariance)
(Thing LogLikelihoodOfMultivarNormalClassCondProbsSharedCovariance)
(LogLikelihood LogLikelihoodOfNaiveClassCondProbs)
(Thing LogLikelihoodOfNaiveClassCondProbs)
(IO-Class LogicalModel)
(CategoricalTargetRelatedAssumption LogisticPosteriorAssumption)
(PosteriorProbabilityAssumption LogisticPosteriorAssumption)
(Thing LogisticPosteriorAssumption)
(IO-Class LogisticRegressionModel)
(ConvexOptimizationProblem LogisticRegressionOptimizationProblem)
(Thing LogisticRegressionOptimizationProblem)
(Low-Medium-High Low)
(Thing Low)
(RelOp LtRelOp)
(DistanceFunction MahalanobisDistance)
(IO-Class MajorityVoteClassifier)
(Thing MajorityVoteClassifier)
(MaxRule MajorityVoteRule)
(DistanceFunction ManhattanDistance)
(IO-Class MathematicalModel)
(Tuple Matrix)
(Thing Matrix)
(MaxRule MaxAPosteriori)
(DiscreteOptimizationProblem MaxClassPredictorChi2OptimizationProblem)
(Thing MaxClassPredictorChi2OptimizationProblem)
(MaxRule MaxFeatureBasedModelPerformance)
(MaxRule MaxFeatureWeight)
(DiscreteOptimizationProblem MaxLaplaceAccuracyOptimizationProblem)
(SimilarityFunction MaxProductSimilarity)
(Minimize-Maximize Maximize)
(Thing Maximize)
(IO-Class Measure)
(Low-Medium-High Medium)
(Thing Medium)
(DiscreteOptimizationProblem MinClassEntropyGivenFeatureValueOptimizationProblem)
(DiscreteOptimizationProblem MinConditionalClassEntropyOptimizationProblem)
(Thing MinConditionalClassEntropyOptimizationProblem)
(MinRule MinFeatureWeight)
(DiscreteOptimizationProblem MinGiniIndexOptimizationProblem)
(Thing MinGiniIndexOptimizationProblem)
(DiscreteOptimizationProblem MinItemReassignmentToClusterOptimizationProblem)
(DiscreteOptimizationProblem MinNaiveBayesXvalErrorOptimizationProblem)
(Thing MinNaiveBayesXvalErrorOptimizationProblem)
(DiscreteOptimizationProblem MinSquaredErrorOptimizationProblem)
(Minimize-Maximize Minimize)
(Thing Minimize)
(ItemReassignmentToCluster MinimumItemReassignmentToCluster)
(DistanceFunction MinkowskiMetric)
(DistanceFunction MixedDistanceFunction)
(DistanceFunction MixedEuclideanDistance)
(EarlyStoppingStrategy ModelBasedEarlyStopping)
(Thing ModelBasedEarlyStopping)
(IO-Class ModelComplexityMeasure)
(IO-Class ModelEvaluationMeasure)
(IO-Class ModelParameterCount)
(IO-Class ModelParameterMagnitude)
(NNParameter Momentum)
(ClassificationProblem MultiClassClassification)
(Thing MultiClassClassification)
(ClassCondProbabilityAssumption MultinomialClassCondProbabilityAssumption)
(Thing MultinomialClassCondProbabilityAssumption)
(CategoricalTargetRelatedAssumption MultinomialClassPriorAssumption)
(ClassPriorProbabilityAssumption MultinomialClassPriorAssumption)
(Thing MultinomialClassPriorAssumption)
(SetOrBag Multiset)
(Thing Multiset)
(Univariate-Multivariate Multivariate)
(Thing Multivariate)
(DecisionTree MultivariateDecisionTree)
(FeatureEvaluationContext MultivariateFeatureEvaluationContext)
(List MultivariateSeries)
(Thing MultivariateSeries)
(BinarySplit-MultiwaySplit MultiwaySplit)
(Thing MultiwaySplit)
(TreeBranchingFactor MultiwayTreeBranchingFactor)
(DistanceFunction MutualNeighborDistance)
(IO-Class NBTreeModel)
(ComputationalComplexityFunction NLogN)
(ComputationalComplexityFunction NLogNSquare)
(IO-Class NaiveBayesDiscreteModel)
(IO-Class NaiveBayesKernelModel)
(IO-Class NaiveBayesMultinomialModel)
(IO-Class NaiveBayesNormalModel)
(FeatureSetEvaluationFunction Negentropy)
(IO-Class NeuralNetworkModel)
(Yes-No-Unknown No)
(DistanceFunction NominalDistance)
(Exhaustive-NonExhaustive NonExhaustive)
(Linear-NonLinear NonLinear)
(NonlinearCombination NonLinearCombinationOfFeatures)
(NonlinearCombination NonLinearCombinationOfFunctions)
(TransformationFunction NonLinearTransformationFunction)
(Orthogonal-NonOrthogonal NonOrthogonal)
(CoordinateSystem NonOrthogonalCoordinateSystem)
(Thing None)
(IO-Class NonlinearSVCModel)
(ClassCondProbabilityAssumption NormalClassCondProbabilityAssumption)
(Thing NormalClassCondProbabilityAssumption)
(Interpretability NotInterpretable)
(K-Means-Parameter NumCluster)
(DecisionCriterion NumCyclesWithoutImprovement)
(NNParameter NumHiddenLayers)
(NNParameter NumHiddenUnits)
(LocalDelimitationStrategy NumNNeighborTuning)
(Thing NumNNeighborTuning)
(KNN-Parameter NumNearestNeighbors)
(NNParameter NumOutputUnits)
(NNParameter NumTrainingCycles)
(IO-Class NumberOfInternalNodes)
(IO-Class NumberOfLeaves)
(IO-Class NumberOfProbabilities)
(IO-Class NumberOfRules)
(IO-Class NumberOfSupportVectors)
(IO-Class NumberOfWeights)
(DecisionCriterion ObservedValue)
(ClassificationProblem OneClassClassification)
(Thing OneClassClassification)
(Optimal-Suboptimal Optimal)
(OrderDependency OrderDependent)
(OrderDependency OrderIndependent)
(Tree OrderedTree)
(Thing OrderedTree)
(PrimitiveType Ordinal)
(Thing Ordinal)
(FeatureClass OrdinalFeature)
(IO-Class OrdinalFeature)
(Orthogonal-NonOrthogonal Orthogonal)
(CoordinateSystem OrthogonalCoordinateSystem)
(Constraint OrthogonalityConstraint)
(SimilarityFunction OverlapSimilarity)
(IO-Class PARTModel)
(ConvexOptimizationProblem PCA-OptimizationProblem)
(IO-Class PRISMModel)
(IO-Class PatternSetBasedClassificationModel)
(IO-Class PatternSetEvaluationMeasure)
(RegularizationStrategy PenalizedMagnitudeOfModelParameters)
(Thing PenalizedMagnitudeOfModelParameters)
(RegularizationStrategy PenalizedModelSize)
(Thing PenalizedModelSize)
(IO-Class PerceptronModel)
(EarlyStoppingStrategy PerformanceBasedEarlyStopping)
(Thing PerformanceBasedEarlyStopping)
(IO-Class PerformanceMeasure)
(PiecewiseLinearBoundary PiecewiseAxisParallelLinearBoundary)
(Thing PiecewiseAxisParallelLinearBoundary)
(PiecewiseLinearBoundary PiecewiseObliqueLinearBoundary)
(Thing PiecewiseObliqueLinearBoundary)
(NonlinearPolynomialKernel PolynomialDegree2Kernel)
(Thing PolynomialDegree2Kernel)
(NonlinearPolynomialKernel PolynomialDegree3Kernel)
(Thing PolynomialDegree3Kernel)
(IO-Class PolynomialKernelSVCModel)
(DecisionTarget PosteriorProbability)
(ProbabilisticModelStructure PosteriorProbabilityDistribution)
(EarlyStoppingStrategy ProcessBasedEarlyStopping)
(Thing ProcessBasedEarlyStopping)
(CombinationFunction Product)
(Thing Product)
(IO-Class PropositionalDataSet)
(ConvexOptimizationProblem QDAOptimizationProblem)
(Thing QDAOptimizationProblem)
(NonlinearBoundary QuadraticBoundary)
(Thing QuadraticBoundary)
(IO-Class QuadraticDiscriminantModel)
(DM-Software R)
(ConvexOptimizationProblem RDAOptimizationProblem)
(SearchDirection Random)
(IO-Class RandomTreeModel)
(IterativeImprovementSearch RandomWalk)
(DM-Software RapidMiner)
(PrimitiveType Real)
(SampleHandlingStrategy RecursivePartitioning)
(IO-Class RegularizedDiscriminantModel)
(IO-Class RelationalDataSet)
(IO-Class RipperModel)
(SimilarityFunction RogersTanimotoSimilarity)
(GeneticSearch RouletteWheelGeneticSearch)
(PatternEvaluationFunction RuleAccuracy)
(Thing RuleAccuracy)
(PruningStrategy RulePruning)
(IO-Class RuleSetModel)
(PruningStrategy RuleSetPruning)
(SimilarityFunction RussellRaoSimilarity)
(IO-Class SVCModel)
(RegularizationParameter SVM-Lambda)
(NeighborhoodRange SameClass)
(RangeOfNeighborhood SameClassNeighborhood)
(SampleHandlingForRuleInduction SampleHandlingThruBoostedWeighting)
(SampleHandlingForRuleInduction SampleHandlingThruRecursivePartitioning)
(SampleHandlingForRuleInduction SampleHandlingThruSetCovering)
(DescriptiveModelEvalFunction SampleVariance)
(DescriptiveModelEvalFunction SampleVarianceInKernelSpace)
(GenerateAndSelectStrategy SelectMaxCoverageRule)
(GenerateAndSelectStrategy SelectMinConditionRule)
(List Sequence)
(Thing Sequence)
(QuadraticProgramming SequentialMinimalOptimization)
(Thing SequentialMinimalOptimization)
(List Series)
(Thing Series)
(SetOrBag Set)
(Thing Set)
(SampleHandlingStrategy SetCovering)
(ValueThresholdRule SignRule)
(SimilarityFunction SimpleMatchingSimilarity)
(IO-Class SingleConditionModel)
(SingleFeature-FeatureSubset SingleFeature)
(FeatureEvaluationTarget SingleFeatureEvaluationTarget)
(DecisionTarget SingleFeatureRank)
(DecisionTarget SingleFeatureWeight)
(ValueThresholdRule SingleFeatureWeightUserDefinedThresholdRule)
(IO-Class SlipperModel)
(LinearInequalityConstraint SoftMarginConstraint)
(Thing SoftMarginConstraint)
(ConvexOptimizationProblem SoftMarginSVCOptimizationProblem)
(Thing SoftMarginSVCOptimizationProblem)
(RuleInductionStrategy SpecToGenRuleInduction)
(GenToSpec-SpecToGen SpecificToGeneral)
(SquaredError SquaredClustError)
(Deterministic-Stochastic Stochastic)
(HillClimbing StochasticHillClimbing)
(LocalBeamSearch StochasticLocalBeamSearch)
(PrimitiveType String)
(Thing String)
(FeatureClass StructuredFeature)
(IO-Class StructuredFeature)
(IO-Class StructuredKernelSVCModel)
(IO-Class StructuredLabeledDataSet)
(LabeledDataSetClass StructuredLabeledDataSet)
(IO-Class StructuredPredictionModel)
(IO-Class SubgroupDescription)
(PatternSetBasedModelStructure SubgroupDescriptionRuleSet)
(Optimal-Suboptimal Suboptimal)
(CombinationFunction Sum)
(Thing Sum)
(EvaluationFunction SumOfSquaredErrors)
(Thing SumOfSquaredErrors)
(IO-Class SumOfSquaredWeights)
(IO-Class SumOfWieghts)
(CapacityParameter Svm-C)
(Thing Svm-C)
(SingleFeatureEvaluationFunction SymmetricalUncertainty)
(IO-Class TargetFeature)
(RecoveryOfPursuit Tentative)
(ToleranceToClassImbalance ToleratesClassImbalance)
(ToleranceToCorrelatedFeatures ToleratesCorrelatedFeatures)
(ToleranceToHighDimensionality ToleratesHighDimensionality)
(ToleranceToIrrelevantFeatures ToleratesIrrelevantFeatures)
(ToleranceToMissingValues ToleratesMissingValues)
(ToleranceToClassImbalance ToleratesNoClassImbalance)
(ToleranceToCorrelatedFeatures ToleratesNoCorrelatedFeatures)
(ToleranceToHighDimensionality ToleratesNoHighDimensionality)
(ToleranceToIrrelevantFeatures ToleratesNoIrrelevantFeatures)
(ToleranceToMissingValues ToleratesNoMissingValues)
(ToleranceToNoise ToleratesNoNoise)
(ToleranceToWideDataSets ToleratesNoWideDataSets)
(ToleranceToNoise ToleratesNoise)
(ToleranceToWideDataSets ToleratesWideDataSets)
(DecisionCriterion TopPercent)
(DecisionCriterion TopRank)
(GeneticSearch TournamentGeneticSearch)
(ProbabilisticModelStructure TrainingDataAsDistribution)
(IO-Class TreeDepth)
(PruningStrategy TreePruning)
(Thing TreePruning)
(Graph UndirectedGraph)
(Thing UndirectedGraph)
(CategoricalTargetRelatedAssumption UniformClassPriorAssumption)
(ClassPriorProbabilityAssumption UniformClassPriorAssumption)
(Thing UniformClassPriorAssumption)
(PathBasedSearch UniformCostSearch)
(LinearEqualityConstraint UnitEigenvectorConstraint)
(Univariate-Multivariate Univariate)
(Thing Univariate)
(DecisionTree UnivariateDecisionTree)
(Thing UnivariateDecisionTree)
(FeatureEvaluationContext UnivariateFeatureEvaluationContext)
(PropositionalLogicStructure UnivariateTest)
(Thing UnivariateTest)
(Yes-No-Unknown Unknown)
(IO-Class UnlabeledDataSet)
(DataTableClass UnlabeledDataTable)
(IO-Class UnlabeledDataTable)
(Tree UnorderedTree)
(Thing UnorderedTree)
(PropositionalRuleSet UnweightedRuleSet)
(Thing UnweightedRuleSet)
(K-Means-Parameter VarianceThreshold)
(Tuple Vector)
(Thing Vector)
(IO-Class VotedPerceptronModel)
(KNN-Parameter WeightNeighborVotes)
(PatternSetBasedModelStructure WeightedAssociationRuleSet)
(PropositionalRuleSet WeightedRuleSet)
(DM-Software Weka)
(Filter-Wrapper-Embedded Wrapper)
(Yes-No-Unknown Yes)
(ClassificationModelEvalFunction ZeroOneLoss)
(Thing ZeroOneLoss)
(PartitionalClusteringAlgorithm k-Means)
(HeuristicBestFirstSearch A*)
(UnlabeledDataSetClass HorizontalTransactionalDataSet)
(UnlabeledDataSetClass VerticalTransactionalDataSet)
(ClassificationModelEvalFunction wWRAcc)
(and (not (= Backward Bidirectional)) (not (= Backward Forward))
     (not (= Backward Random)))
(and (not (= BinaryClassification MultiClassClassification))
     (not (= BinaryClassification OneClassClassification)))
(not (= BinarySplit MultiwaySplit))
(not (= Blind Informed))
(and (not (= BoostedWeighting RecursivePartitioning))
     (not (= BoostedWeighting SetCovering)))
(and (not (= BottomPercent BottomRank))
     (not (= BottomPercent LastEvaluationImprovement))
     (not (= BottomPercent NumCyclesWithoutImprovement))
     (not (= BottomPercent ObservedValue))
     (not (= BottomPercent TopPercent)) (not (= BottomPercent TopRank)))
(not (= Deterministic Stochastic))
(not (= Eager Lazy))
(and (not (= Embedded Filter)) (not (= Embedded Wrapper)))
(and (not (= EqRelOp GeqRelOp)) (not (= EqRelOp GtRelOp))
     (not (= EqRelOp LeqRelOp)) (not (= EqRelOp LtRelOp)))
(not (= Exhaustive NonExhaustive))
(and (not (= FeatureBasedModelPerformance FeatureSubsetRank))
     (not (= FeatureBasedModelPerformance FeatureSubsetWeight))
     (not (= FeatureBasedModelPerformance PosteriorProbability))
     (not (= FeatureBasedModelPerformance SingleFeatureRank))
     (not (= FeatureBasedModelPerformance SingleFeatureWeight)))
(not (= FeatureSubset SingleFeature))
(and (not (= FullSample KNearest)) (not (= FullSample SameClass)))
(not (= GeneralToSpecific SpecificToGeneral))
(not (= Global Local))
(and (not (= High Low)) (not (= High Medium)))
(not (= HighBias HighVariance))
(not (= Irrevocable Tentative))
(not (= Linear NonLinear))
(not (= Maximize Minimize))
(not (= Multivariate Univariate))
(not (= No Unknown))
(not (= No Yes))
(not (= NonOrthogonal Orthogonal))
(not (= Optimal Suboptimal))
(not (= Unknown Yes))
(hasScopeOfSelection BeamSearch Global)
(hasRecoveryOfPursuit BestFirst Tentative)
(hasScopeOfSelection BestFirst Global)
(has-quale BinaryTreeBranchingFactor BinarySplit)
(hasSearchGuidance BreadthFirstSearch Blind)
(handlesFeatureType CanberraDistance Real)
(handlesFeatureType ChebychevDistance Real)
(handlesFeatureType CorrelationSimilarity Real)
(handlesFeatureType CosineSimilarity Real)
(hasSearchGuidance DepthFirstSearch Blind)
(hasUncertaintyLevel DepthFirstSearch Deterministic)
(hasUncertaintyLevel DeterministicHillClimbing Deterministic)
(hasUncertaintyLevel DeterministicLocalBeamSearch Deterministic)
(handlesFeatureType DiceSimilarity Categorical)
(handlesFeatureType DiceSimilarity Real)
(hasConstraint DualFormHardMarginSVCOptimizationProblem
               DualFormHardMarginConstraint)
(hasObjectiveFunction DualFormHardMarginSVCOptimizationProblem
                      DualFormHardMarginAndL1SVC)
(hasOptimizationGoal DualFormHardMarginSVCOptimizationProblem
                     Maximize)
(hasConstraint DualFormL2LossSVCOptimizationProblem
               DualFormL2SVCConstraint)
(hasObjectiveFunction DualFormL2LossSVCOptimizationProblem
                      DualFormL2SVCCostFunction)
(hasOptimizationGoal DualFormL2LossSVCOptimizationProblem Maximize)
(hasParameter DualFormL2SVCCostFunction None)
(hasConstraint DualFormSoftMarginSVCOptimizationProblem
               DualFormL1SVCConstraint)
(hasObjectiveFunction DualFormSoftMarginSVCOptimizationProblem
                      DualFormHardMarginAndL1SVC)
(hasOptimizationGoal DualFormSoftMarginSVCOptimizationProblem
                     Maximize)
(handlesFeatureType DynamicTimeWarpingDistance Real)
(has-quale EagerLearningPolicy Eager)
(handlesFeatureType EuclideanDistance Real)
(has-quale FeatureSubsetEvaluationTarget FeatureSubset)
(has-quale FindsMultipleSolutions No)
(has-quale FindsUniqueSolution Yes)
(has-quale FullSampleNeighborhood FullSample)
(has-quale GenToSpecRuleInduction GeneralToSpecific)
(handlesFeatureType GeodesicDistance Real)
(hasRecoveryOfPursuit Greedy Irrevocable)
(hasScopeOfSelection Greedy Local)
(hasRecoveryOfPursuit GreedyBestFirst Irrevocable)
(hasScopeOfSelection GreedyBestFirst Local)
(has-quale HandlesBinaryClassification BinaryClassification)
(has-quale HandlesCategoricalFeatures Yes)
(has-quale HandlesClassificationCosts Yes)
(has-quale HandlesContinuousFeatures Yes)
(has-quale HandlesInstanceWeights Yes)
(has-quale HandlesNoCategoricalFeatures No)
(has-quale HandlesNoClassificationCosts No)
(has-quale HandlesNoContinuousFeatures No)
(has-quale HandlesNoInstanceWeights No)
(has-quale HandlesOneClassClassification OneClassClassification)
(hasConstraint HardMarginSVCOptimizationProblem
               HardMarginConstraint)
(hasDualForm HardMarginSVCOptimizationProblem
             DualFormHardMarginSVCOptimizationProblem)
(hasObjectiveFunction HardMarginSVCOptimizationProblem L2Weights)
(hasOptimizationGoal HardMarginSVCOptimizationProblem Minimize)
(has-quale HasNoRandomComponent No)
(has-quale HasRandomComponent Yes)
(handlesFeatureType HausdorffDistance Real)
(has-quale HighBiasProfile HighBias)
(has-quale HighVarianceProfile HighVariance)
(hasOptimizationGoal InformationGainRatio Maximize)
(handlesFeatureType InnerProductSimilarity Real)
(has-quale Interpretable Yes)
(handlesFeatureType JaccardSimilarity Categorical)
(handlesFeatureType JaccardSimilarity Real)
(has-quale KNearestNeighborhood KNearest)
(hasConstraint KPCA-OptimizationProblem UnitEigenvectorConstraint)
(hasObjectiveFunction KPCA-OptimizationProblem
                      SampleVarianceInKernelSpace)
(hasOptimizationGoal KPCA-OptimizationProblem Maximize)
(handlesFeatureType KulczynskiSimilarity Categorical)
(hasCombinationFunction L1HingeLossPlusL2WeightsCostFunction Sum)
(hasComplexityComponent L1HingeLossPlusL2WeightsCostFunction
                        L2Weights)
(hasParameter L1HingeLossPlusL2WeightsCostFunction SVM-Lambda)
(hasPerformanceComponent L1HingeLossPlusL2WeightsCostFunction
                         L1HingeLoss)
(hasCombinationFunction L2HingeLossPlusL2WeightsCostFunction Sum)
(hasComplexityComponent L2HingeLossPlusL2WeightsCostFunction
                        L2Weights)
(hasParameter L2HingeLossPlusL2WeightsCostFunction SVM-Lambda)
(hasPerformanceComponent L2HingeLossPlusL2WeightsCostFunction
                         L2HingeLoss)
(hasObjectiveFunction LDAOptimizationProblem
                      LogLikelihoodOfMultivarNormalClassCondProbsSharedCovariance)
(hasOptimizationGoal LDAOptimizationProblem Maximize)
(has-quale LazyLearningPolicy Lazy)
(has-quale LinearTransformationFunction Linear)
(hasObjectiveFunction LogisticRegressionOptimizationProblem
                      LogLikelihoodOfClassPosteriors)
(hasOptimizationGoal LogisticRegressionOptimizationProblem
                     Maximize)
(handlesFeatureType MahalanobisDistance Real)
(handlesFeatureType ManhattanDistance Real)
(hasValueDomain MaxFeatureBasedModelPerformance
                FeatureBasedModelPerformance)
(hasValueDomain MaxFeatureWeight SingleFeatureWeight)
(hasObjectiveFunction MaxLaplaceAccuracyOptimizationProblem
                      LaplaceAccuracy)
(hasOptimizationGoal MaxLaplaceAccuracyOptimizationProblem
                     Maximize)
(handlesFeatureType MaxProductSimilarity Real)
(hasObjectiveFunction MinClassEntropyGivenFeatureValueOptimizationProblem
                      ClassEntropyGivenFeatureValue)
(hasOptimizationGoal MinClassEntropyGivenFeatureValueOptimizationProblem
                     Minimize)
(hasObjectiveFunction MinConditionalClassEntropyOptimizationProblem
                      ConditionalClassEntropy)
(hasOptimizationGoal MinConditionalClassEntropyOptimizationProblem
                     Minimize)
(hasObjectiveFunction MinItemReassignmentToClusterOptimizationProblem
                      ExactItemReassignmentToCluster)
(hasObjectiveFunction MinItemReassignmentToClusterOptimizationProblem
                      MinItemReassignmentToClusterOptimizationProblem)
(hasObjectiveFunction MinSquaredErrorOptimizationProblem
                      SquaredClustError)
(handlesFeatureType MinkowskiMetric Real)
(handlesFeatureType MixedDistanceFunction Categorical)
(handlesFeatureType MixedDistanceFunction Real)
(handlesFeatureType MixedEuclideanDistance Categorical)
(handlesFeatureType MixedEuclideanDistance Real)
(has-quale MultivariateFeatureEvaluationContext Multivariate)
(has-quale MultiwayTreeBranchingFactor MultiwaySplit)
(handlesFeatureType MutualNeighborDistance Real)
(handlesFeatureType NominalDistance Categorical)
(has-quale NonLinearTransformationFunction NonLinear)
(has-quale NonOrthogonalCoordinateSystem NonOrthogonal)
(has-quale NotInterpretable No)
(has-quale OrthogonalCoordinateSystem Orthogonal)
(handlesFeatureType OverlapSimilarity Real)
(hasConstraint PCA-OptimizationProblem OrthogonalityConstraint)
(hasConstraint PCA-OptimizationProblem UnitEigenvectorConstraint)
(hasObjectiveFunction PCA-OptimizationProblem SampleVariance)
(hasOptimizationGoal PCA-OptimizationProblem Maximize)
(hasObjectiveFunction QDAOptimizationProblem
                      LogLikelihoodOfMultivarNormalClassCondProbsClassSpecificCovariance)
(hasOptimizationGoal QDAOptimizationProblem Maximize)
(hasScopeOfSelection RandomWalk Local)
(hasSearchGuidance RandomWalk Blind)
(hasUncertaintyLevel RandomWalk Stochastic)
(handlesFeatureType RogersTanimotoSimilarity Categorical)
(handlesFeatureType RussellRaoSimilarity Categorical)
(has-quale SameClassNeighborhood SameClass)
(has-quale SampleHandlingThruBoostedWeighting BoostedWeighting)
(has-quale SampleHandlingThruRecursivePartitioning
           RecursivePartitioning)
(has-quale SampleHandlingThruSetCovering SetCovering)
(hasRelationalOperator SignRule GeqRelOp)
(handlesFeatureType SimpleMatchingSimilarity Categorical)
(has-quale SingleFeatureEvaluationTarget SingleFeature)
(hasDecisionCriterion SingleFeatureWeightUserDefinedThresholdRule
                      ObservedValue)
(hasDecisionTarget SingleFeatureWeightUserDefinedThresholdRule
                   SingleFeatureWeight)
(hasRelationalOperator SingleFeatureWeightUserDefinedThresholdRule
                       GtRelOp)
(hasConstraint SoftMarginSVCOptimizationProblem
               SoftMarginConstraint)
(hasDualForm SoftMarginSVCOptimizationProblem
             DualFormSoftMarginSVCOptimizationProblem)
(hasObjectiveFunction SoftMarginSVCOptimizationProblem
                      L1HingeLossPlusL2WeightsCostFunction)
(hasOptimizationGoal SoftMarginSVCOptimizationProblem Minimize)
(has-quale SpecToGenRuleInduction SpecificToGeneral)
(hasUncertaintyLevel StochasticHillClimbing Stochastic)
(hasUncertaintyLevel StochasticLocalBeamSearch Stochastic)
(hasDataType Svm-C Real)
(has-quale ToleratesClassImbalance Yes)
(has-quale ToleratesCorrelatedFeatures Yes)
(has-quale ToleratesHighDimensionality Yes)
(has-quale ToleratesIrrelevantFeatures Yes)
(has-quale ToleratesMissingValues Yes)
(has-quale ToleratesNoClassImbalance No)
(has-quale ToleratesNoCorrelatedFeatures No)
(has-quale ToleratesNoHighDimensionality No)
(has-quale ToleratesNoIrrelevantFeatures No)
(has-quale ToleratesNoMissingValues No)
(has-quale ToleratesNoNoise No)
(has-quale ToleratesNoWideDataSets No)
(has-quale ToleratesNoise Yes)
(has-quale ToleratesWideDataSets Yes)
(hasSearchGuidance UniformCostSearch Blind)
(has-quale UnivariateFeatureEvaluationContext Univariate)
(hasRecoveryOfPursuit A* Tentative)
(hasScopeOfSelection A* Global)
(and (isAdmissible BeamSearch a) (= false a) (boolean a))
(and (isAdmissible BestFirst a) (= false a) (boolean a))
(and (isAdmissible BreadthFirstSearch a) (= false a) (boolean a))
(and (isComplete BreadthFirstSearch a) (= true a) (boolean a))
(and (isAdmissible DepthFirstSearch a) (= false a) (boolean a))
(and (isComplete DepthFirstSearch a) (= false a) (boolean a))
(and (hasExplicitFeatureSpace GaussianKernel a) (= false a)
     (boolean a))
(and (hasExplicitFeatureSpace LinearKernel a) (= true a)
     (boolean a))
(and (hasFixedThreshold MinFeatureWeight a) (= 1.0 a) (float a))
(and (hasPolynomialDegree PolynomialDegree2Kernel a) (= 2 a)
     (integer a))
(and (hasExplicitFeatureSpace PolynomialDegree3Kernel a) (= true a)
     (boolean a))
(and (hasPolynomialDegree PolynomialDegree3Kernel a) (= 3 a)
     (integer a))
(and (hasFixedThreshold SignRule a) (= 0.0 a) (float a))
(and (hasFixedThreshold SingleFeatureWeightUserDefinedThresholdRule
                        a)
     (= -1.0 a) (float a))
(and (isAdmissible UniformCostSearch a) (= true a) (boolean a))
(and (isComplete UniformCostSearch a) (= true a) (boolean a))
(forall (a b) (iff (hasMember a b) (member a b)))
(forall (a b) (iff (hasPart a b) (part a b)))
(forall (a b) (iff (isPartOf a b) (part-of a b)))
(forall (c d) (if (hasCombinationFunction c d) (hasComponent c d)))
(forall (c d) (if (hasComplexityComponent c d) (hasComponent c d)))
(forall (c d) (if (hasComponent c d) (hasPart c d)))
(forall (c d) (if (hasConstraint c d) (hasComponent c d)))
(forall (c d) (if (hasDecisionCriterion c d) (hasComponent c d)))
(forall (c d) (if (hasDecisionRule c d) (hasDecisionStrategy c d)))
(forall (c d) (if (hasDecisionTarget c d) (hasComponent c d)))
(forall (c d) (if (hasDistanceFunction c
                                       d) (hasDistanceOrSimilarityFunction c
                                                                           d)))
(forall (c d) (if (hasFirstSubprocess c d) (hasSubprocess c d)))
(forall (c d) (if (hasInstance c d) (member c d)))
(forall (c d) (if (hasKernelFunction c d) (hasSimilarityFunction c
                                                                 d)))
(forall (c d) (if (hasMainTable c d) (hasTable c d)))
(forall (c d) (if (hasObjectiveFunction c d) (hasComponent c d)))
(forall (c d) (if (hasPerformanceComponent c d) (hasComponent c
                                                              d)))
(forall (c d) (if (hasPostprocessor c d) (hasComponentStep c d)))
(forall (c d) (if (hasPreprocessor c d) (hasComponentStep c d)))
(forall (c d) (if (hasRelationalOperator c d) (hasComponent c d)))
(forall (c d) (if (hasSelfTunedHyperParameter c d) (hasParameter c
                                                                 d)))
(forall (c d) (if (hasSimilarityFunction c
                                         d) (hasDistanceOrSimilarityFunction c
                                                                             d)))
(forall (c d) (if (hasTable c d) (hasComponent c d)))
(forall (c d) (if (hasTargetFeature c d) (hasFeature c d)))
(forall (c d) (if (hasVariable c d) (hasComponent c d)))
(forall (c d) (if (inDMSoftware c d) (ObsoleteObjectProperty c d)))
(forall (c d) (if (isComponentOf c d) (isPartOf c d)))
(forall (c d) (if (step1 c d) (hasComponentStep c d)))
(forall (c d) (if (step2 c d) (hasComponentStep c d)))
(forall (c d) (if (abstract-location c d) (exact-location c d)))
(forall (c d) (if (abstract-location-of c d) (exact-location-of c
                                                                d)))
(forall (c d) (if (atomic-part c d) (part c d)))
(forall (c d) (if (atomic-part-of c d) (part-of c d)))
(forall (c d) (if (boundary c d) (proper-part c d)))
(forall (c d) (if (boundary-of c d) (proper-part-of c d)))
(forall (c d) (if (exact-location c d) (generic-location c d)))
(forall (c d) (if (exact-location-of c d) (generic-location-of c
                                                               d)))
(forall (c d) (if (generic-constituent c d) (immediate-relation c
                                                                d)))
(forall (c d) (if (generic-constituent-of c
                                          d) (immediate-relation-i c d)))
(forall (c d) (if (generic-dependent c d) (immediate-relation c
                                                              d)))
(forall (c d) (if (generic-location c d) (mediated-relation c d)))
(forall (c d) (if (generic-location-of c d) (mediated-relation-i c
                                                                 d)))
(forall (c d) (if (generically-dependent-on c
                                            d) (immediate-relation-i c d)))
(forall (c d) (if (has-quale c d) (q-location c d)))
(forall (c d) (if (has-quality c d) (immediate-relation-i c d)))
(forall (c d) (if (inherent-in c d) (immediate-relation c d)))
(forall (c d) (if (overlaps c d) (mediated-relation c d)))
(forall (c d) (if (part c d) (immediate-relation c d)))
(forall (c d) (if (part-of c d) (immediate-relation-i c d)))
(forall (c d) (if (proper-part c d) (part c d)))
(forall (c d) (if (proper-part-of c d) (part-of c d)))
(forall (c d) (if (q-location c d) (immediate-relation c d)))
(forall (c d) (if (q-location-of c d) (immediate-relation-i c d)))
(forall (c d) (if (quale-of c d) (q-location-of c d)))
(forall (c d) (if (admits c d) (mediated-relation c d)))
(forall (c d) (if (admitted-by c d) (mediated-relation-i c d)))
(forall (c d) (if (co-participates-with c d) (mediated-relation c
                                                                d)))
(forall (c d) (if (component c d) (proper-part c d)))
(forall (c d) (if (component-of c d) (proper-part-of c d)))
(forall (c d) (if (covered-by c d) (intensionally-referenced-by c
                                                                d)))
(forall (c d) (if (covers c d) (intensionally-references c d)))
(forall (c d) (if (d-used-by c d) (component-of c d)))
(forall (c d) (if (d-uses c d) (component c d)))
(forall (c d) (if (defined-by c d) (d-used-by c d)))
(forall (c d) (if (defines c d) (d-uses c d)))
(forall (c d) (if (direct-predecessor c d) (predecessor c d)))
(forall (c d) (if (direct-successor c d) (successor c d)))
(forall (c d) (if (expanded-by c d) (proper-part-of c d)))
(forall (c d) (if (expands c d) (proper-part c d)))
(forall (c d) (if (expected-by c d) (mediated-relation-i c d)))
(forall (c d) (if (expects c d) (mediated-relation c d)))
(forall (c d) (if (exploited-by c d) (involved-in c d)))
(forall (c d) (if (exploits c d) (involves c d)))
(forall (c d) (if (expressed-by c d) (referenced-by c d)))
(forall (c d) (if (expresses c d) (references c d)))
(forall (c d) (if (has-method c d) (expected-by c d)))
(forall (c d) (if (instantiated-by c d) (specialized-by c d)))
(forall (c d) (if (instantiates c d) (specializes c d)))
(forall (c d) (if (intensionally-referenced-by c
                                               d) (referenced-by c d)))
(forall (c d) (if (intensionally-references c d) (references c d)))
(forall (c d) (if (involved-in c d) (mediated-relation-i c d)))
(forall (c d) (if (involves c d) (mediated-relation c d)))
(forall (c d) (if (member c d) (generic-constituent c d)))
(forall (c d) (if (member-of c d) (generic-constituent-of c d)))
(forall (c d) (if (method-of c d) (expects c d)))
(forall (c d) (if (ordered-by c d) (mediated-relation c d)))
(forall (c d) (if (orders c d) (mediated-relation-i c d)))
(forall (c d) (if (parametrized-by c d) (mediated-relation-i c d)))
(forall (c d) (if (parametrizes c d) (mediated-relation c d)))
(forall (c d) (if (predecessor c d) (immediate-relation-i c d)))
(forall (c d) (if (referenced-by c d) (immediate-relation-i c d)))
(forall (c d) (if (references c d) (immediate-relation c d)))
(forall (c d) (if (refined-by c d) (proper-part-of c d)))
(forall (c d) (if (refines c d) (proper-part c d)))
(forall (c d) (if (sequenced-by c d) (intensionally-referenced-by c
                                                                  d)))
(forall (c d) (if (sequences c d) (intensionally-references c d)))
(forall (c d) (if (specialized-by c d) (immediate-relation-i c d)))
(forall (c d) (if (specializes c d) (immediate-relation c d)))
(forall (c d) (if (successor c d) (immediate-relation c d)))
(forall (c d) (if (used-by c d) (co-participates-with c d)))
(forall (c d) (if (uses c d) (co-participates-with c d)))
(forall (c d) (if (value-for c d) (intensionally-referenced-by c
                                                               d)))
(forall (c d) (if (valued-by c d) (intensionally-references c d)))
(forall (a b) (iff (isComponentOf a b) (hasComponent b a)))
(forall (a b) (iff (isParameterOf a b) (hasParameter b a)))
(forall (a b) (iff (isPartOf a b) (hasPart b a)))
(forall (a b) (iff (isSubprocessOf a b) (hasSubprocess b a)))
(forall (a b) (iff (isTargetFeatureOf a b) (hasTargetFeature b a)))
(forall (a b) (iff (isImplementedBy a b) (implements b a)))
(forall (a b) (iff (specifiesInputClass a b) (isSpecifiedInputOf b
                                                                 a)))
(forall (a b) (iff (specifiesOutputClass a
                                         b) (isSpecifiedOutputOf b a)))
(forall (a b) (iff (abstract-location-of a b) (abstract-location b
                                                                 a)))
(forall (a b) (iff (atomic-part-of a b) (atomic-part b a)))
(forall (a b) (iff (boundary-of a b) (boundary b a)))
(forall (a b) (iff (exact-location-of a b) (exact-location b a)))
(forall (a b) (iff (generic-constituent-of a
                                           b) (generic-constituent b a)))
(forall (a b) (iff (generically-dependent-on a
                                             b) (generic-dependent b a)))
(forall (a b) (iff (generic-location-of a b) (generic-location b
                                                               a)))
(forall (a b) (iff (inherent-in a b) (has-quality b a)))
(forall (a b) (iff (overlaps a b) (overlaps b a)))
(forall (a b) (iff (part-of a b) (part b a)))
(forall (a b) (iff (proper-part-of a b) (proper-part b a)))
(forall (a b) (iff (q-location-of a b) (q-location b a)))
(forall (a b) (iff (admitted-by a b) (admits b a)))
(forall (a b) (iff (co-participates-with a
                                         b) (co-participates-with b a)))
(forall (a b) (iff (component-of a b) (component b a)))
(forall (a b) (iff (covers a b) (covered-by b a)))
(forall (a b) (iff (d-uses a b) (d-used-by b a)))
(forall (a b) (iff (defines a b) (defined-by b a)))
(forall (a b) (iff (direct-successor a b) (direct-predecessor b
                                                              a)))
(forall (a b) (iff (expands a b) (expanded-by b a)))
(forall (a b) (iff (expects a b) (expected-by b a)))
(forall (a b) (iff (exploits a b) (exploited-by b a)))
(forall (a b) (iff (expresses a b) (expressed-by b a)))
(forall (a b) (iff (method-of a b) (has-method b a)))
(forall (a b) (iff (instantiates a b) (instantiated-by b a)))
(forall (a b) (iff (intensionally-references a
                                             b) (intensionally-referenced-by b
                                                                             a)))
(forall (a b) (iff (involves a b) (involved-in b a)))
(forall (a b) (iff (member-of a b) (member b a)))
(forall (a b) (iff (orders a b) (ordered-by b a)))
(forall (a b) (iff (parametrizes a b) (parametrized-by b a)))
(forall (a b) (iff (successor a b) (predecessor b a)))
(forall (a b) (iff (references a b) (referenced-by b a)))
(forall (a b) (iff (refines a b) (refined-by b a)))
(forall (a b) (iff (sequences a b) (sequenced-by b a)))
(forall (a b) (iff (specializes a b) (specialized-by b a)))
(forall (a b) (iff (uses a b) (used-by b a)))
(forall (a b) (iff (valued-by a b) (value-for b a)))
(forall (a b c) (if (and (hasDataType a b)
                         (hasDataType a c)) (= b c)))
(forall (a b c) (if (and (hasDecisionBoundary a b)
                         (hasDecisionBoundary a c)) (= b c)))
(forall (a b c) (if (and (hasHypothesisStructure a b)
                         (hasHypothesisStructure a c)) (= b c)))
(forall (a b c) (if (and (hasMainTable a b)
                         (hasMainTable a c)) (= b c)))
(forall (a b c) (if (and (hasOptimalityLevel a b)
                         (hasOptimalityLevel a c)) (= b c)))
(forall (a b c) (if (and (hasRecoveryOfPursuit a b)
                         (hasRecoveryOfPursuit a c)) (= b c)))
(forall (a b c) (if (and (hasScopeOfSelection a b)
                         (hasScopeOfSelection a c)) (= b c)))
(forall (a b c) (if (and (hasSearchDirection a b)
                         (hasSearchDirection a c)) (= b c)))
(forall (a b c) (if (and (hasSearchGuidance a b)
                         (hasSearchGuidance a c)) (= b c)))
(forall (a b c) (if (and (hasUncertaintyLevel a b)
                         (hasUncertaintyLevel a c)) (= b c)))
(forall (a b c) (if (and (setsValueOf a b)
                         (setsValueOf a c)) (= b c)))
(forall (a b c) (if (and (hasPart a b) (hasPart b c)) (hasPart a
                                                               c)))
(forall (a b c) (if (and (isPartOf a b) (isPartOf b c)) (isPartOf a
                                                                  c)))
(forall (a b c) (if (and (predecessor a b)
                         (predecessor b c)) (predecessor a c)))
(forall (a b c) (if (and (successor a b)
                         (successor b c)) (successor a c)))
(forall (a) (exists (b) (if (achieves a b) (DM-Operation a))))
(forall (a) (exists (b) (if (addresses a b) (or (DM-Algorithm a)
                                                (DM-Workflow a)))))
(forall (a) (exists (b) (if (assumes a b) (InductionAlgorithm a))))
(forall (a) (exists (b) (if (executes a b) (or (DM-Operation a)
                                               (DM-Process a)))))
(forall (a) (exists (b) (if (handlesFeatureType a
                                                b) (DistanceOrSimilarityFunction a))))
(forall (a) (exists (b) (if (hasCombinationFunction a
                                                    b) (RegularizedClassificationModelEvalFunction a))))
(forall (a) (exists (b) (if (hasComplexityComponent a
                                                    b) (ModelEvaluationFunction a))))
(forall (a) (exists (b) (if (hasComponentStep a
                                              b) (DM-Algorithm a))))
(forall (a) (exists (b) (if (hasComputationalComplexityFunction a
                                                                b) (DM-Algorithm a))))
(forall (a) (exists (b) (if (hasConstraint a
                                           b) (OptimizationProblem a))))
(forall (a) (exists (b) (if (hasDataType a b) (or (DM-Data a)
                                                  (Parameter a)))))
(forall (a) (exists (b) (if (hasDecisionBoundary a
                                                 b) (ClassificationModel a))))
(forall (a) (exists (b) (if (hasDecisionCriterion a
                                                  b) (DecisionRule a))))
(forall (a) (exists (b) (if (hasDecisionRule a
                                             b) (DM-Algorithm a))))
(forall (a) (exists (b) (if (hasDecisionStrategy a
                                                 b) (or (DM-Algorithm a)
                                                        (DiscreteOptimizationStrategy a)))))
(forall (a) (exists (b) (if (hasDecisionTarget a
                                               b) (DecisionStrategy a))))
(forall (a) (exists (b) (if (hasDistanceOrSimilarityFunction a
                                                             b) (DM-Algorithm a))))
(forall (a) (exists (b) (if (hasDistinctValue a b) (Feature a))))
(forall (a) (exists (b) (if (hasDistributionParameter a
                                                      b) (ParametricDensityEstimation a))))
(forall (a) (exists (b) (if (hasDualForm a
                                         b) (ContinuousOptimizationProblem a))))
(forall (a) (exists (b) (if (hasEvaluationFunction a
                                                   b) (DM-Algorithm a))))
(forall (a) (exists (b) (if (hasFeature a b) (or (DataSet a)
                                                 (DataTable a)))))
(forall (a) (exists (b) (if (hasFeatureEvaluator a
                                                 b) (FeatureSelectionAlgorithm a))))
(forall (a) (exists (b) (if (hasFeatureTestEvaluator a
                                                     b) (or (ClassificationRuleInductionAlgorithm a)
                                                            (ClassificationTreeInductionAlgorithm a)))))
(forall (a) (exists (b) (if (hasHypothesisComplexityControlStrategy a
                                                                    b) (InductionAlgorithm a))))
(forall (a) (exists (b) (if (hasHypothesisStructure a
                                                    b) (DM-Hypothesis a))))
(forall (a) (exists (b) (if (hasInput a b) (or (DM-Operation a)
                                               (DM-Process a)))))
(forall (a) (exists (b) (if (hasInstance a b) (or (DataSet a)
                                                  (DataTable a)))))
(forall (a) (exists (b) (if (hasKernelFunction a
                                               b) (SVC-Algorithm a))))
(forall (a) (exists (b) (if (hasLeafPredictor a
                                              b) (or (ClassificationTreeInductionAlgorithm a)
                                                     (RegressionTreeInductionAlgorithm a)))))
(forall (a) (exists (b) (if (hasMainTable a b) (DataSet a))))
(forall (a) (exists (b) (if (hasMember a b) (endurant a))))
(forall (a) (exists (b) (if (hasModalValue a
                                           b) (CategoricalFeature a))))
(forall (a) (exists (b) (if (hasModelComplexityMeasure a
                                                       b) (DM-Hypothesis a))))
(forall (a) (exists (b) (if (hasObjectiveFunction a
                                                  b) (OptimizationProblem a))))
(forall (a) (exists (b) (if (hasOptimalityLevel a
                                                b) (OptimizationStrategy a))))
(forall (a) (exists (b) (if (hasOptimizationGoal a
                                                 b) (OptimizationProblem a))))
(forall (a) (exists (b) (if (hasOptimizationProblem a
                                                    b) (DM-Algorithm a))))
(forall (a) (exists (b) (if (hasOptimizationStrategy a
                                                     b) (or (DM-Algorithm a)
                                                            (DM-Operator a)))))
(forall (a) (exists (b) (if (hasOutput a b) (or (DM-Operation a)
                                                (DM-Process a)))))
(forall (a) (exists (b) (if (hasParameter a b) (or (DM-Algorithm a)
                                                   (DM-Model a) (DM-Operator a)
                                                   (MathematicalFunction a)))))
(forall (a) (exists (b) (if (hasParameterRole a
                                              b) (OperatorParameter a))))
(forall (a) (exists (b) (if (hasParameterSetting a
                                                 b) (DM-Operation a))))
(forall (a) (exists (b) (if (hasPart a b) (particular a))))
(forall (a) (exists (b) (if (hasPerformanceComponent a
                                                     b) (EvaluationFunction a))))
(forall (a) (exists (b) (if (hasPostprocessor a
                                              b) (ModelingAlgorithm a))))
(forall (a) (exists (b) (if (hasPreprocessor a
                                             b) (ModelingAlgorithm a))))
(forall (a) (exists (b) (if (hasRecoveryOfPursuit a
                                                  b) (SearchStrategy a))))
(forall (a) (exists (b) (if (hasRelationalOperator a
                                                   b) (DecisionRule a))))
(forall (a) (exists (b) (if (hasScopeOfSelection a
                                                 b) (SearchStrategy a))))
(forall (a) (exists (b) (if (hasSearchDirection a
                                                b) (or (FeatureSelectionAlgorithm a)
                                                       (OptimizationStrategy a)))))
(forall (a) (exists (b) (if (hasSearchGuidance a
                                               b) (SearchStrategy a))))
(forall (a) (exists (b) (if (hasSelfTunedHyperParameter a
                                                        b) (SelfConfiguringNNAlgorithm a))))
(forall (a) (exists (b) (if (hasSimilarityFunction a
                                                   b) (DM-Algorithm a))))
(forall (a) (exists (b) (if (hasSink a b) (or (Workflow a)
                                              (WorkflowTemplate a)))))
(forall (a) (exists (b) (if (hasSource a b) (or (Workflow a)
                                                (WorkflowTemplate a)))))
(forall (a) (exists (b) (if (hasStopCriterion a
                                              b) (DM-Algorithm a))))
(forall (a) (exists (b) (if (hasSubprocess a b) (DM-Process a))))
(forall (a) (exists (b) (if (hasTable a b) (DataSet a))))
(forall (a) (exists (b) (if (hasTableFormat a b) (DataTable a))))
(forall (a) (exists (b) (if (hasTargetFeature a b) (or (DataSet a)
                                                       (DataTable a)))))
(forall (a) (exists (b) (if (hasTargetLearner a
                                              b) (FeatureWeightingAlgorithm a))))
(forall (a) (exists (b) (if (hasUncertaintyLevel a
                                                 b) (OptimizationStrategy a))))
(forall (a) (exists (b) (if (hasValueDomain a
                                            b) (DecisionRule a))))
(forall (a) (exists (b) (if (hasVariable a
                                         b) (WorkflowTemplate a))))
(forall (a) (exists (b) (if (implements a b) (or (DM-Operator a)
                                                 (OperatorParameter a)))))
(forall (a) (exists (b) (if (inDMSoftware a b) (DM-Operator a))))
(forall (a) (exists (b) (if (interactsWithLearnerAs a
                                                    b) (FeatureSelectionAlgorithm a))))
(forall (a) (exists (b) (if (isImplementedBy a
                                             b) (or (AlgorithmParameter a)
                                                    (DM-Algorithm a)))))
(forall (a) (exists (b) (if (isPartOf a b) (particular a))))
(forall (a) (exists (b) (if (isSpecifiedOutputOf a
                                                 b) (IO-Class a))))
(forall (a) (exists (b) (if (isSubprocessOf a b) (DM-Process a))))
(forall (a) (exists (b) (if (isSubsampleOf a b) (DataSet a))))
(forall (a) (exists (b) (if (isTargetFeatureOf a b) (Feature a))))
(forall (a) (exists (b) (if (realizes a b) (DM-Operation a))))
(forall (a) (exists (b) (if (requiresDataType a
                                              b) (ParametricDensityEstimation a))))
(forall (a) (exists (b) (if (setsValueOf a
                                         b) (OpParameterSetting a))))
(forall (a) (exists (b) (if (solves a
                                    b) (OptimizationStrategy a))))
(forall (a) (exists (b) (if (specifiesInputClass a
                                                 b) (or (DM-Algorithm a)
                                                        (DM-Operator a)
                                                        (DM-Task a)
                                                        (DM-Workflow a)))))
(forall (a) (exists (b) (if (specifiesOutputClass a
                                                  b) (or (DM-Algorithm a)
                                                         (DM-Operator a)
                                                         (DM-Task a)
                                                         (DM-Workflow a)))))
(forall (a) (exists (b) (if (abstract-location a
                                               b) (non-physical-endurant a))))
(forall (a) (exists (b) (if (abstract-location-of a
                                                  b) (abstract-region a))))
(forall (a) (exists (b) (if (atomic-part a b) (particular a))))
(forall (a) (exists (b) (if (atomic-part-of a b) (particular a))))
(forall (a) (exists (b) (if (boundary a b) (particular a))))
(forall (a) (exists (b) (if (boundary-of a b) (particular a))))
(forall (a) (exists (b) (if (exact-location a b) (particular a))))
(forall (a) (exists (b) (if (exact-location-of a b) (region a))))
(forall (a) (exists (b) (if (generic-constituent a
                                                 b) (particular a))))
(forall (a) (exists (b) (if (generic-constituent-of a
                                                    b) (particular a))))
(forall (a) (exists (b) (if (generic-dependent a
                                               b) (particular a))))
(forall (a) (exists (b) (if (generic-location a
                                              b) (particular a))))
(forall (a) (exists (b) (if (generic-location-of a
                                                 b) (particular a))))
(forall (a) (exists (b) (if (generically-dependent-on a
                                                      b) (particular a))))
(forall (a) (exists (b) (if (has-quale a b) (quality a))))
(forall (a) (exists (b) (if (has-quality a b) (particular a))))
(forall (a) (exists (b) (if (immediate-relation a
                                                b) (particular a))))
(forall (a) (exists (b) (if (immediate-relation-i a
                                                  b) (particular a))))
(forall (a) (exists (b) (if (inherent-in a b) (quality a))))
(forall (a) (exists (b) (if (mediated-relation a
                                               b) (particular a))))
(forall (a) (exists (b) (if (mediated-relation-i a
                                                 b) (particular a))))
(forall (a) (exists (b) (if (overlaps a b) (particular a))))
(forall (a) (exists (b) (if (part a b) (particular a))))
(forall (a) (exists (b) (if (part-of a b) (particular a))))
(forall (a) (exists (b) (if (proper-part a b) (particular a))))
(forall (a) (exists (b) (if (proper-part-of a b) (particular a))))
(forall (a) (exists (b) (if (q-location a b) (quality a))))
(forall (a) (exists (b) (if (q-location-of a b) (region a))))
(forall (a) (exists (b) (if (admits a b) (description a))))
(forall (a) (exists (b) (if (admitted-by a b) (region a))))
(forall (a) (exists (b) (if (co-participates-with a
                                                  b) (endurant a))))
(forall (a) (exists (b) (if (component a b) (particular a))))
(forall (a) (exists (b) (if (component-of a b) (particular a))))
(forall (a) (exists (b) (if (covered-by a b) (collection a))))
(forall (a) (exists (b) (if (covers a b) (role a))))
(forall (a) (exists (b) (if (d-uses a b) (description a))))
(forall (a) (exists (b) (if (defines a b) (description a))))
(forall (a) (exists (b) (if (direct-predecessor a
                                                b) (particular a))))
(forall (a) (exists (b) (if (direct-successor a
                                              b) (particular a))))
(forall (a) (exists (b) (if (expanded-by a b) (description a))))
(forall (a) (exists (b) (if (expands a b) (description a))))
(forall (a) (exists (b) (if (expected-by a b) (perdurant a))))
(forall (a) (exists (b) (if (expects a b) (description a))))
(forall (a) (exists (b) (if (exploited-by a b) (endurant a))))
(forall (a) (exists (b) (if (exploits a b) (method a))))
(forall (a) (exists (b) (if (expressed-by a b) (description a))))
(forall (a) (exists (b) (if (expresses a
                                       b) (information-object a))))
(forall (a) (exists (b) (if (has-method a b) (activity a))))
(forall (a) (exists (b) (if (instantiated-by a
                                             b) (or (collection a) (concept a)
                                                    (description a)))))
(forall (a) (exists (b) (if (instantiates a b) (or (collection a)
                                                   (concept a)
                                                   (description a)))))
(forall (a) (exists (b) (if (intensionally-referenced-by a
                                                         b) (particular a))))
(forall (a) (exists (b) (if (intensionally-references a
                                                      b) (non-physical-object a))))
(forall (a) (exists (b) (if (involved-in a b) (endurant a))))
(forall (a) (exists (b) (if (involves a b) (description a))))
(forall (a) (exists (b) (if (member a b) (collection a))))
(forall (a) (exists (b) (if (member-of a b) (endurant a))))
(forall (a) (exists (b) (if (method-of a b) (method a))))
(forall (a) (exists (b) (if (ordered-by a
                                        b) (information-object a))))
(forall (a) (exists (b) (if (orders a b) (description a))))
(forall (a) (exists (b) (if (parametrized-by a b) (particular a))))
(forall (a) (exists (b) (if (parametrizes a b) (parameter a))))
(forall (a) (exists (b) (if (predecessor a b) (particular a))))
(forall (a) (exists (b) (if (referenced-by a b) (particular a))))
(forall (a) (exists (b) (if (references a
                                        b) (non-physical-object a))))
(forall (a) (exists (b) (if (refined-by a b) (social-object a))))
(forall (a) (exists (b) (if (refines a b) (social-object a))))
(forall (a) (exists (b) (if (sequenced-by a b) (perdurant a))))
(forall (a) (exists (b) (if (sequences a b) (course a))))
(forall (a) (exists (b) (if (specialized-by a b) (or (collection a)
                                                     (concept a)
                                                     (description a)))))
(forall (a) (exists (b) (if (specializes a b) (or (collection a)
                                                  (concept a)
                                                  (description a)))))
(forall (a) (exists (b) (if (successor a b) (particular a))))
(forall (a) (exists (b) (if (used-by a b) (endurant a))))
(forall (a) (exists (b) (if (uses a b) (endurant a))))
(forall (a) (exists (b) (if (value-for a b) (region a))))
(forall (a) (exists (b) (if (valued-by a b) (parameter a))))
(forall (b) (exists (a) (if (achieves a b) (DM-Task b))))
(forall (b) (exists (a) (if (addresses a b) (DM-Task b))))
(forall (b) (exists (a) (if (assumes a
                                     b) (AlgorithmAssumption b))))
(forall (b) (exists (a) (if (executes a b) (or (DM-Operator b)
                                               (DM-Workflow b)))))
(forall (b) (exists (a) (if (handlesFeatureType a
                                                b) (DataType b))))
(forall (b) (exists (a) (if (hasCombinationFunction a
                                                    b) (CombinationFunction b))))
(forall (b) (exists (a) (if (hasComplexityComponent a
                                                    b) (or (ModelComplexityFunction b)
                                                           (= b None)))))
(forall (b) (exists (a) (if (hasComponentStep a
                                              b) (or (DM-Algorithm b)
                                                     (= b None)))))
(forall (b) (exists (a) (if (hasComputationalComplexityFunction a
                                                                b) (ComputationalComplexityFunction b))))
(forall (b) (exists (a) (if (hasConstraint a b) (Constraint b))))
(forall (b) (exists (a) (if (hasDataType a b) (DataType b))))
(forall (b) (exists (a) (if (hasDecisionBoundary a
                                                 b) (DecisionBoundary b))))
(forall (b) (exists (a) (if (hasDecisionCriterion a
                                                  b) (DecisionCriterion b))))
(forall (b) (exists (a) (if (hasDecisionRule a
                                             b) (DecisionRule b))))
(forall (b) (exists (a) (if (hasDecisionStrategy a
                                                 b) (DecisionStrategy b))))
(forall (b) (exists (a) (if (hasDecisionTarget a
                                               b) (DecisionTarget b))))
(forall (b) (exists (a) (if (hasDensityEstimation a
                                                  b) (ProbabilityDensityEstimation b))))
(forall (b) (exists (a) (if (hasDistanceOrSimilarityFunction a
                                                             b) (or (DistanceFunction b)
                                                                    (SimilarityFunction b)))))
(forall (b) (exists (a) (if (hasDistinctValue a
                                              b) (CategoricalFeatureValue b))))
(forall (b) (exists (a) (if (hasDistributionParameter a
                                                      b) (DistributionParameter b))))
(forall (b) (exists (a) (if (hasDualForm a
                                         b) (OptimizationProblem b))))
(forall (b) (exists (a) (if (hasEvaluationFunction a
                                                   b) (EvaluationFunction b))))
(forall (b) (exists (a) (if (hasFeature a b) (Feature b))))
(forall (b) (exists (a) (if (hasFeatureEvaluator a
                                                 b) (or (FeatureWeightingAlgorithm b)
                                                        (SupervisedInductionAlgorithm b)))))
(forall (b) (exists (a) (if (hasHypothesisComplexityControlStrategy a
                                                                    b) (or (HypothesisComplexityControlStrategy b)
                                                                           (= b None)))))
(forall (b) (exists (a) (if (hasHypothesisStructure a
                                                    b) (HypothesisStructure b))))
(forall (b) (exists (a) (if (hasInput a b) (or (DM-Data b)
                                               (DM-Model b)))))
(forall (b) (exists (a) (if (hasInstance a b) (Instance b))))
(forall (b) (exists (a) (if (hasKernelFunction a
                                               b) (KernelFunction b))))
(forall (b) (exists (a) (if (hasLeafPredictor a b) (IO-Class b))))
(forall (b) (exists (a) (if (hasMainTable a b) (DataTable b))))
(forall (b) (exists (a) (if (hasMember a b) (endurant b))))
(forall (b) (exists (a) (if (hasModalValue a
                                           b) (CategoricalFeatureValue b))))
(forall (b) (exists (a) (if (hasModelComplexityMeasure a
                                                       b) (ModelComplexityMeasure b))))
(forall (b) (exists (a) (if (hasObjectiveFunction a
                                                  b) (MathematicalFunction b))))
(forall (b) (exists (a) (if (hasOptimalityLevel a
                                                b) (Optimal-Suboptimal b))))
(forall (b) (exists (a) (if (hasOptimizationGoal a
                                                 b) (Minimize-Maximize b))))
(forall (b) (exists (a) (if (hasOptimizationProblem a
                                                    b) (OptimizationProblem b))))
(forall (b) (exists (a) (if (hasOptimizationStrategy a
                                                     b) (OptimizationStrategy b))))
(forall (b) (exists (a) (if (hasOutput a b) (or (DM-Data b)
                                                (DM-Hypothesis b)
                                                (HypothesisEvaluationMeasure b)))))
(forall (b) (exists (a) (if (hasParameter a b) (or (Parameter b)
                                                   (= b None)))))
(forall (b) (exists (a) (if (hasParameterSetting a
                                                 b) (OpParameterSetting b))))
(forall (b) (exists (a) (if (hasPart a b) (particular b))))
(forall (b) (exists (a) (if (hasPerformanceComponent a
                                                     b) (or (HypothesisEvaluationFunction b)
                                                            (= b None)))))
(forall (b) (exists (a) (if (hasPostprocessor a
                                              b) (or (ModelProcessingAlgorithm b)
                                                     (= b None)))))
(forall (b) (exists (a) (if (hasPreprocessor a
                                             b) (or (DataProcessingAlgorithm b)
                                                    (= b None)))))
(forall (b) (exists (a) (if (hasRecoveryOfPursuit a
                                                  b) (RecoveryOfPursuit b))))
(forall (b) (exists (a) (if (hasRelationalOperator a
                                                   b) (RelOp b))))
(forall (b) (exists (a) (if (hasScopeOfSelection a
                                                 b) (ScopeOfSelection b))))
(forall (b) (exists (a) (if (hasSearchDirection a
                                                b) (SearchDirection b))))
(forall (b) (exists (a) (if (hasSearchGuidance a
                                               b) (Blind-Informed b))))
(forall (b) (exists (a) (if (hasSelfTunedHyperParameter a
                                                        b) (NNParameter b))))
(forall (b) (exists (a) (if (hasSimilarityFunction a
                                                   b) (SimilarityFunction b))))
(forall (b) (exists (a) (if (hasSink a b) (IO-Object b))))
(forall (b) (exists (a) (if (hasSource a b) (IO-Object b))))
(forall (b) (exists (a) (if (hasStopCriterion a
                                              b) (EvaluationFunction b))))
(forall (b) (exists (a) (if (hasSubprocess a b) (DM-Process b))))
(forall (b) (exists (a) (if (hasTable a b) (DataTable b))))
(forall (b) (exists (a) (if (hasTableFormat a b) (TableFormat b))))
(forall (b) (exists (a) (if (hasTargetFeature a b) (Feature b))))
(forall (b) (exists (a) (if (hasTargetLearner a
                                              b) (or (InductionAlgorithm b)
                                                     (= b None)))))
(forall (b) (exists (a) (if (hasUncertaintyLevel a
                                                 b) (Deterministic-Stochastic b))))
(forall (b) (exists (a) (if (hasVariable a
                                         b) (WorkflowVariable b))))
(forall (b) (exists (a) (if (implements a
                                        b) (or (AlgorithmParameter b)
                                               (DM-Algorithm b)))))
(forall (b) (exists (a) (if (inDMSoftware a b) (DM-Software b))))
(forall (b) (exists (a) (if (interactsWithLearnerAs a
                                                    b) (Filter-Wrapper-Embedded b))))
(forall (b) (exists (a) (if (isImplementedBy a
                                             b) (or (DM-Operator b)
                                                    (OperatorParameter b)))))
(forall (b) (exists (a) (if (isPartOf a b) (particular b))))
(forall (b) (exists (a) (if (isSpecifiedOutputOf a
                                                 b) (or (DM-Algorithm b)
                                                        (DM-Operator b)
                                                        (DM-Task b)
                                                        (DM-Workflow b)))))
(forall (b) (exists (a) (if (isSubprocessOf a b) (DM-Process b))))
(forall (b) (exists (a) (if (isSubsampleOf a b) (DataSet b))))
(forall (b) (exists (a) (if (isTargetFeatureOf a
                                               b) (or (DataTable b)
                                                      (LabeledDataSet b)))))
(forall (b) (exists (a) (if (realizes a b) (DM-Algorithm b))))
(forall (b) (exists (a) (if (requiresDataType a
                                              b) (or (= b Categorical)
                                                     (= b Real)))))
(forall (b) (exists (a) (if (setsValueOf a
                                         b) (OperatorParameter b))))
(forall (b) (exists (a) (if (solves a b) (OptimizationProblem b))))
(forall (b) (exists (a) (if (specifiesInputClass a
                                                 b) (IO-Class b))))
(forall (b) (exists (a) (if (specifiesOutputClass a
                                                  b) (IO-Class b))))
(forall (b) (exists (a) (if (abstract-location a
                                               b) (abstract-region b))))
(forall (b) (exists (a) (if (atomic-part a b) (particular b))))
(forall (b) (exists (a) (if (atomic-part-of a b) (particular b))))
(forall (b) (exists (a) (if (boundary a b) (particular b))))
(forall (b) (exists (a) (if (boundary-of a b) (particular b))))
(forall (b) (exists (a) (if (exact-location a b) (region b))))
(forall (b) (exists (a) (if (exact-location-of a
                                               b) (particular b))))
(forall (b) (exists (a) (if (generic-constituent a
                                                 b) (particular b))))
(forall (b) (exists (a) (if (generic-constituent-of a
                                                    b) (particular b))))
(forall (b) (exists (a) (if (generic-dependent a
                                               b) (particular b))))
(forall (b) (exists (a) (if (generic-location a
                                              b) (particular b))))
(forall (b) (exists (a) (if (generic-location-of a
                                                 b) (particular b))))
(forall (b) (exists (a) (if (generically-dependent-on a
                                                      b) (particular b))))
(forall (b) (exists (a) (if (has-quale a b) (quale b))))
(forall (b) (exists (a) (if (has-quality a b) (quality b))))
(forall (b) (exists (a) (if (immediate-relation a
                                                b) (particular b))))
(forall (b) (exists (a) (if (immediate-relation-i a
                                                  b) (particular b))))
(forall (b) (exists (a) (if (inherent-in a b) (particular b))))
(forall (b) (exists (a) (if (mediated-relation a
                                               b) (particular b))))
(forall (b) (exists (a) (if (mediated-relation-i a
                                                 b) (particular b))))
(forall (b) (exists (a) (if (overlaps a b) (particular b))))
(forall (b) (exists (a) (if (part a b) (particular b))))
(forall (b) (exists (a) (if (part-of a b) (particular b))))
(forall (b) (exists (a) (if (proper-part a b) (particular b))))
(forall (b) (exists (a) (if (proper-part-of a b) (particular b))))
(forall (b) (exists (a) (if (q-location a b) (region b))))
(forall (b) (exists (a) (if (q-location-of a b) (quality b))))
(forall (b) (exists (a) (if (admits a b) (region b))))
(forall (b) (exists (a) (if (admitted-by a b) (description b))))
(forall (b) (exists (a) (if (co-participates-with a
                                                  b) (endurant b))))
(forall (b) (exists (a) (if (component a b) (particular b))))
(forall (b) (exists (a) (if (component-of a b) (particular b))))
(forall (b) (exists (a) (if (covered-by a b) (role b))))
(forall (b) (exists (a) (if (covers a b) (collection b))))
(forall (b) (exists (a) (if (d-used-by a b) (description b))))
(forall (b) (exists (a) (if (d-uses a b) (concept b))))
(forall (b) (exists (a) (if (defined-by a b) (description b))))
(forall (b) (exists (a) (if (defines a b) (concept b))))
(forall (b) (exists (a) (if (direct-predecessor a
                                                b) (particular b))))
(forall (b) (exists (a) (if (direct-successor a
                                              b) (particular b))))
(forall (b) (exists (a) (if (expanded-by a b) (description b))))
(forall (b) (exists (a) (if (expands a b) (description b))))
(forall (b) (exists (a) (if (expected-by a b) (description b))))
(forall (b) (exists (a) (if (expects a b) (perdurant b))))
(forall (b) (exists (a) (if (exploited-by a b) (method b))))
(forall (b) (exists (a) (if (exploits a b) (endurant b))))
(forall (b) (exists (a) (if (expressed-by a
                                          b) (information-object b))))
(forall (b) (exists (a) (if (expresses a b) (description b))))
(forall (b) (exists (a) (if (has-method a b) (method b))))
(forall (b) (exists (a) (if (instantiated-by a
                                             b) (or (collection b) (concept b)
                                                    (description b)))))
(forall (b) (exists (a) (if (instantiates a b) (or (collection b)
                                                   (concept b)
                                                   (description b)))))
(forall (b) (exists (a) (if (intensionally-referenced-by a
                                                         b) (non-physical-object b))))
(forall (b) (exists (a) (if (intensionally-references a
                                                      b) (particular b))))
(forall (b) (exists (a) (if (involved-in a b) (description b))))
(forall (b) (exists (a) (if (involves a b) (endurant b))))
(forall (b) (exists (a) (if (member a b) (endurant b))))
(forall (b) (exists (a) (if (member-of a b) (collection b))))
(forall (b) (exists (a) (if (method-of a b) (activity b))))
(forall (b) (exists (a) (if (ordered-by a b) (description b))))
(forall (b) (exists (a) (if (orders a b) (information-object b))))
(forall (b) (exists (a) (if (parametrized-by a b) (parameter b))))
(forall (b) (exists (a) (if (parametrizes a b) (particular b))))
(forall (b) (exists (a) (if (predecessor a b) (particular b))))
(forall (b) (exists (a) (if (referenced-by a
                                           b) (non-physical-object b))))
(forall (b) (exists (a) (if (references a b) (particular b))))
(forall (b) (exists (a) (if (refined-by a b) (social-object b))))
(forall (b) (exists (a) (if (refines a b) (social-object b))))
(forall (b) (exists (a) (if (sequenced-by a b) (course b))))
(forall (b) (exists (a) (if (sequences a b) (perdurant b))))
(forall (b) (exists (a) (if (specialized-by a b) (or (collection b)
                                                     (concept b)
                                                     (description b)))))
(forall (b) (exists (a) (if (specializes a b) (or (collection b)
                                                  (concept b)
                                                  (description b)))))
(forall (b) (exists (a) (if (successor a b) (particular b))))
(forall (b) (exists (a) (if (used-by a b) (endurant b))))
(forall (b) (exists (a) (if (uses a b) (endurant b))))
(forall (b) (exists (a) (if (value-for a b) (parameter b))))
(forall (b) (exists (a) (if (valued-by a b) (region b))))
(forall (c d e) (if (and (addresses c e)
                         (specifiesInputClass e d)) (specifiesInputClass c d)))
(forall (c d e) (if (and (addresses c e)
                         (specifiesOutputClass e d)) (specifiesOutputClass c
                                                                           d)))
(forall (c d e) (if (and (hasComponentStep c e)
                         (hasEvaluationFunction e d)) (hasEvaluationFunction c
                                                                             d)))
(forall (c d e) (if (and (hasMainTable c e)
                         (hasFeature e d)) (hasFeature c d)))
(forall (c d e) (if (and (hasMainTable c e)
                         (hasInstance e d)) (hasInstance c d)))
(forall (c d e) (if (and (hasMainTable c e)
                         (hasTargetFeature e d)) (hasTargetFeature c d)))
(forall (c d e) (if (and (implements c e)
                         (specifiesInputClass e d)) (specifiesInputClass c d)))
(forall (c d e) (if (and (implements c e)
                         (specifiesOutputClass e d)) (specifiesOutputClass c
                                                                           d)))
(forall (c d e) (if (and (realizes c e)
                         (addresses e d)) (achieves c d)))
(forall (a b c) (if (and (hasDefaultValue a b)
                         (hasDefaultValue a c)) (= b c)))
(forall (a b c) (if (and (hasExplicitFeatureSpace a b)
                         (hasExplicitFeatureSpace a c)) (= b c)))
(forall (a b c) (if (and (hasFixedThreshold a b)
                         (hasFixedThreshold a c)) (= b c)))
(forall (a b c) (if (and (hasMaximumValue a b)
                         (hasMaximumValue a c)) (= b c)))
(forall (a b c) (if (and (hasMeanValue a b)
                         (hasMeanValue a c)) (= b c)))
(forall (a b c) (if (and (hasMinimumValue a b)
                         (hasMinimumValue a c)) (= b c)))
(forall (a b c) (if (and (hasParameterKey a b)
                         (hasParameterKey a c)) (= b c)))
(forall (a b c) (if (and (hasPolynomialDegree a b)
                         (hasPolynomialDegree a c)) (= b c)))
(forall (a b c) (if (and (isAdmissible a b)
                         (isAdmissible a c)) (= b c)))
(forall (a b c) (if (and (isComplete a b)
                         (isComplete a c)) (= b c)))
(forall (a b c) (if (and (isMultiAlgorithmOperator a b)
                         (isMultiAlgorithmOperator a c)) (= b c)))
(forall (a) (exists (b) (if (hasDataValue a
                                          b) (region hasDataValue))))
(forall (a) (exists (b) (if (hasExplicitFeatureSpace a
                                                     b) (SimilarityFunction hasExplicitFeatureSpace))))
(forall (a) (exists (b) (if (hasMaximumValue a
                                             b) (or (ContinuousFeature hasMaximumValue)
                                                    (Parameter hasMaximumValue)))))
(forall (a) (exists (b) (if (hasMeanValue a
                                          b) (ContinuousFeature hasMeanValue))))
(forall (a) (exists (b) (if (hasMinimumValue a
                                             b) (or (ContinuousFeature hasMinimumValue)
                                                    (Parameter hasMinimumValue)))))
(forall (a) (exists (b) (if (hasNumberOfConstraints a
                                                    b) (OptimizationProblem hasNumberOfConstraints))))
(forall (a) (exists (b) (if (hasNumberOfSupportVectors a
                                                       b) (or (DataSet hasNumberOfSupportVectors)
                                                              (DataTable hasNumberOfSupportVectors)))))
(forall (a) (exists (b) (if (hasParameterKey a
                                             b) (Parameter hasParameterKey))))
(forall (a) (exists (b) (if (hasPolynomialDegree a
                                                 b) (NonlinearPolynomialKernel hasPolynomialDegree))))
(forall (a) (exists (b) (if (isAdmissible a
                                          b) (SearchStrategy isAdmissible))))
(forall (a) (exists (b) (if (isComplete a
                                        b) (SearchStrategy isComplete))))
(forall (a) (exists (b) (if (isMultiAlgorithmOperator a
                                                      b) (DM-Operator isMultiAlgorithmOperator))))
(forall (a) (exists (b) (if (hasDataValue a b) (anyType b))))
(forall (a) (exists (b) (if (hasExplicitFeatureSpace a
                                                     b) (boolean b))))
(forall (a) (exists (b) (if (hasFixedThreshold a b) (float b))))
(forall (a) (exists (b) (if (hasMaximumValue a b) (float b))))
(forall (a) (exists (b) (if (hasMeanValue a b) (float b))))
(forall (a) (exists (b) (if (hasMinimumValue a b) (float b))))
(forall (a) (exists (b) (if (hasNumberOfConstraints a
                                                    b) (nonNegativeInteger b))))
(forall (a) (exists (b) (if (hasNumberOfSupportVectors a
                                                       b) (integer b))))
(forall (a) (exists (b) (if (hasParameterKey a b) (string b))))
(forall (a) (exists (b) (if (hasPolynomialDegree a
                                                 b) (integer b))))
(forall (a) (exists (b) (if (isAdmissible a b) (boolean b))))
(forall (a) (exists (b) (if (isComplete a b) (boolean b))))
(forall (a) (exists (b) (if (isMultiAlgorithmOperator a
                                                      b) (boolean b))))

